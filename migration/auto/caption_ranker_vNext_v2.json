{
  "creationTime": "1757576395804",
  "etag": "676KHcZYRsrI91VcBlitoQ==",
  "id": "of-scheduler-proj:mart.caption_ranker_vNext",
  "kind": "bigquery#table",
  "lastModifiedTime": "1757576395804",
  "location": "US",
  "numActiveLogicalBytes": "0",
  "numBytes": "0",
  "numLongTermBytes": "0",
  "numLongTermLogicalBytes": "0",
  "numRows": "0",
  "numTotalLogicalBytes": "0",
  "schema": {
    "fields": [
      {
        "name": "username_page",
        "type": "STRING"
      },
      {
        "name": "username_std",
        "type": "STRING"
      },
      {
        "name": "page_type",
        "type": "STRING"
      },
      {
        "name": "slot_dt_local",
        "type": "DATE"
      },
      {
        "name": "hod_local",
        "type": "INTEGER"
      },
      {
        "name": "dow_local",
        "type": "INTEGER"
      },
      {
        "name": "slot_rank",
        "type": "INTEGER"
      },
      {
        "name": "tracking_hash",
        "type": "STRING"
      },
      {
        "name": "caption_id",
        "type": "STRING"
      },
      {
        "name": "caption_text",
        "type": "STRING"
      },
      {
        "name": "caption_hash",
        "type": "STRING"
      },
      {
        "name": "category",
        "type": "STRING"
      },
      {
        "name": "explicitness",
        "type": "STRING"
      },
      {
        "name": "score_final",
        "type": "FLOAT"
      },
      {
        "name": "score_normalized",
        "type": "FLOAT"
      },
      {
        "name": "rank_in_slot",
        "type": "INTEGER"
      },
      {
        "name": "conversion_rate",
        "type": "FLOAT"
      },
      {
        "name": "rps",
        "type": "FLOAT"
      },
      {
        "name": "open_rate",
        "type": "FLOAT"
      },
      {
        "name": "dow_hod_score",
        "type": "FLOAT"
      },
      {
        "name": "dow_hod_percentile",
        "type": "FLOAT"
      },
      {
        "name": "novelty_score",
        "type": "FLOAT"
      },
      {
        "name": "momentum_score",
        "type": "NUMERIC"
      },
      {
        "name": "cooldown_ok",
        "type": "BOOLEAN"
      },
      {
        "name": "quota_ok",
        "type": "BOOLEAN"
      },
      {
        "name": "dedupe_ok",
        "type": "BOOLEAN"
      },
      {
        "name": "is_explorer",
        "type": "BOOLEAN"
      },
      {
        "name": "total_sent",
        "type": "INTEGER"
      },
      {
        "name": "days_since_used",
        "type": "INTEGER"
      },
      {
        "name": "recent_uses_7d",
        "type": "INTEGER"
      },
      {
        "name": "is_cold_start",
        "type": "BOOLEAN"
      },
      {
        "name": "is_stale",
        "type": "BOOLEAN"
      },
      {
        "name": "selection_reason",
        "type": "STRING"
      },
      {
        "name": "category_diversity",
        "type": "INTEGER"
      },
      {
        "name": "ranked_at",
        "type": "TIMESTAMP"
      },
      {
        "name": "model_version",
        "type": "STRING"
      }
    ]
  },
  "selfLink": "https://bigquery.googleapis.com/bigquery/v2/projects/of-scheduler-proj/datasets/mart/tables/caption_ranker_vNext",
  "tableReference": {
    "datasetId": "mart",
    "projectId": "of-scheduler-proj",
    "tableId": "caption_ranker_vNext"
  },
  "type": "VIEW",
  "view": {
    "query": "WITH \n-- FIXED: ML weights with username_std and proper latest selection\nml_weights AS (\n  SELECT\n    ps.username_std,\n    ps.page_state,\n    w.w_rps, w.w_open, w.w_buy, w.w_dowhod, w.w_price, w.w_novelty, w.w_momentum,\n    w.ucb_c, w.epsilon\n  FROM `of-scheduler-proj.core.page_state` ps\n  JOIN (\n    SELECT * EXCEPT(rn)\n    FROM (\n      SELECT *,\n             ROW_NUMBER() OVER (PARTITION BY page_state ORDER BY updated_at DESC) AS rn\n      FROM `of-scheduler-proj.ops.ml_ranking_weights_v1`\n    )\n    WHERE rn = 1\n  ) w USING (page_state)\n),\n\n-- Get exploration config with proper latest selection\nexplore_config AS (\n  SELECT * EXCEPT(rn)\n  FROM (\n    SELECT *,\n           ROW_NUMBER() OVER (PARTITION BY config_key ORDER BY updated_at DESC) AS rn\n    FROM `of-scheduler-proj.ops.explore_exploit_config_v1`\n  )\n  WHERE config_key = 'default' AND rn = 1\n),\n\n-- FIXED: Get cooldown config from settings\ncooldown_config AS (\n  SELECT \n    CAST(MAX(CASE WHEN setting_key = 'min_cooldown_hours' THEN setting_value END) AS INT64) AS min_cooldown_hours,\n    21 * 24 AS max_cooldown_hours,  -- 21 days from max_cooldown_days setting\n    3 AS max_weekly_uses  -- Standard max weekly uses\n  FROM `of-scheduler-proj.core.cooldown_settings_v1`\n  WHERE setting_key IN ('min_cooldown_hours', 'max_cooldown_days')\n),\n\n-- Get scheduled slots for next 7 days\nscheduled_slots AS (\n  SELECT\n    username_page,\n    username_std,\n    page_type,\n    date_local AS slot_dt_local,\n    hod_local,\n    slot_rank,\n    tracking_hash,\n    MOD(EXTRACT(DAYOFWEEK FROM date_local) + 5, 7) AS dow_local\n  FROM `of-scheduler-proj.core.v_weekly_template_7d_pages_final`\n  WHERE date_local BETWEEN CURRENT_DATE() AND DATE_ADD(CURRENT_DATE(), INTERVAL 7 DAY)\n),\n\n-- Get DOW\u00d7HOD performance patterns\ndow_hod_patterns AS (\n  SELECT\n    username_std,\n    dow_local,\n    hod_local,\n    score AS dow_hod_score,\n    PERCENT_RANK() OVER (PARTITION BY username_std ORDER BY score) AS dow_hod_percentile\n  FROM `of-scheduler-proj.mart.v_mm_dow_hod_180d_local_v2`\n),\n\n-- FIXED: Price elasticity - one row per page with optimal band\nprice_elasticity AS (\n  SELECT \n    username_page,\n    ANY_VALUE(optimal_band) AS optimal_band,\n    MAX_BY(band_rps, band_rps) AS optimal_band_rps\n  FROM (\n    SELECT \n      username_page,\n      price_band,\n      AVG(SAFE_DIVIDE(earnings_usd, NULLIF(sent, 0))) AS band_rps,\n      FIRST_VALUE(price_band) OVER (\n        PARTITION BY username_page \n        ORDER BY AVG(SAFE_DIVIDE(earnings_usd, NULLIF(sent, 0))) DESC\n      ) AS optimal_band\n    FROM (\n      SELECT \n        CONCAT(mf.username_std, '__', COALESCE(pta.page_type, 'main')) AS username_page,\n        mf.earnings_usd,\n        mf.sent,\n        mf.price_usd,\n        CASE \n          WHEN mf.price_usd < 15 THEN 'low'\n          WHEN mf.price_usd < 30 THEN 'mid'\n          WHEN mf.price_usd < 45 THEN 'high'\n          ELSE 'premium'\n        END AS price_band\n      FROM `of-scheduler-proj.core.message_facts` mf\n      LEFT JOIN `of-scheduler-proj.core.page_type_authority` pta\n        ON mf.username_std = pta.username_std\n      WHERE mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY)\n        AND mf.sent > 0\n    )\n    GROUP BY username_page, price_band\n  )\n  GROUP BY username_page\n),\n\n-- FIXED: Cooldown check with TIMESTAMP_DIFF\ncooldown_check AS (\n  SELECT\n    cd.caption_id,\n    CONCAT(mf.username_std, '__', COALESCE(pta.page_type, 'main')) AS username_page,\n    MAX(mf.sending_ts) AS last_sent_ts,\n    COUNTIF(mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)) AS recent_uses_7d,\n    COUNT(DISTINCT DATE(mf.sending_ts)) AS unique_days_7d\n  FROM `of-scheduler-proj.core.message_facts` mf\n  LEFT JOIN `of-scheduler-proj.core.page_type_authority` pta\n    ON mf.username_std = pta.username_std\n  LEFT JOIN `of-scheduler-proj.core.caption_dim` cd\n    ON mf.caption_hash = cd.caption_hash\n    AND mf.username_std = cd.username_std\n  WHERE mf.caption_hash IS NOT NULL\n    AND cd.caption_id IS NOT NULL\n  GROUP BY cd.caption_id, username_page\n),\n\n-- Calculate momentum scores\nmomentum_scores AS (\n  SELECT\n    CONCAT(mf.username_std, '__', COALESCE(pta.page_type, 'main')) AS username_page,\n    SAFE_DIVIDE(\n      SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY) \n               THEN mf.earnings_usd END),\n      NULLIF(SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY) \n                      THEN mf.sent END), 0)\n    ) AS rps_7d,\n    SAFE_DIVIDE(\n      SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY) \n               THEN mf.earnings_usd END),\n      NULLIF(SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY) \n                      THEN mf.sent END), 0)\n    ) AS rps_30d,\n    SAFE_DIVIDE(\n      SAFE_DIVIDE(\n        SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY) \n                 THEN mf.earnings_usd END),\n        NULLIF(SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY) \n                        THEN mf.sent END), 0)\n      ),\n      NULLIF(SAFE_DIVIDE(\n        SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY) \n                 THEN mf.earnings_usd END),\n        NULLIF(SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY) \n                        THEN mf.sent END), 0)\n      ), 0)\n    ) AS momentum_ratio\n  FROM `of-scheduler-proj.core.message_facts` mf\n  LEFT JOIN `of-scheduler-proj.core.page_type_authority` pta\n    ON mf.username_std = pta.username_std\n  WHERE mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)\n    AND mf.sent > 0\n  GROUP BY username_page\n),\n\n-- FIXED: Combine features with proper JOINs (not CROSS JOIN)\nscored_captions AS (\n  SELECT\n    ss.username_page,\n    ss.username_std,\n    ss.page_type,\n    ss.slot_dt_local,\n    ss.hod_local,\n    ss.dow_local,\n    ss.slot_rank,\n    ss.tracking_hash,\n    cf.caption_id,\n    cf.caption_text,\n    cf.caption_hash,\n    cf.category,\n    cf.explicitness,\n    \n    -- Raw features\n    cf.conversion_rate,\n    cf.rps,\n    cf.open_rate,\n    COALESCE(dhp.dow_hod_score, 0) AS dow_hod_score,\n    COALESCE(dhp.dow_hod_percentile, 0.5) AS dow_hod_percentile,\n    cf.novelty_score,\n    COALESCE(ms.momentum_ratio, 1.0) AS momentum_score,\n    \n    -- Normalized features\n    cf.rps_z_score,\n    cf.conversion_z_score,\n    cf.open_z_score,\n    \n    -- ML weights\n    mw.w_rps,\n    mw.w_open,\n    mw.w_buy,\n    mw.w_dowhod,\n    mw.w_price,\n    mw.w_novelty,\n    mw.w_momentum,\n    mw.ucb_c,\n    mw.epsilon,\n    \n    -- Exploration bonus\n    cf.exploration_bonus,\n    ec.max_explorer_share,\n    \n    -- FIXED: Deterministic epsilon flag using hash\n    (ABS(FARM_FINGERPRINT(CONCAT(\n      cf.caption_id,\n      FORMAT_DATE('%Y%m%d', ss.slot_dt_local),\n      CAST(ss.hod_local AS STRING)\n    ))) / 9.22e18) < mw.epsilon AS epsilon_flag,\n    \n    -- Calculate final score\n    (\n      mw.w_rps * COALESCE(cf.rps_z_score, 0) +\n      mw.w_open * COALESCE(cf.open_z_score, 0) +\n      mw.w_buy * COALESCE(cf.conversion_z_score, 0) +\n      mw.w_dowhod * COALESCE((dhp.dow_hod_percentile - 0.5) * 2, 0) +\n      mw.w_price * CASE \n        WHEN pe.optimal_band = 'mid' AND cf.rps > pe.optimal_band_rps THEN 0.2\n        WHEN pe.optimal_band = 'high' AND cf.rps > pe.optimal_band_rps THEN 0.1\n        ELSE 0\n      END +\n      mw.w_novelty * cf.novelty_score +\n      mw.w_momentum * LEAST(1.5, GREATEST(0.5, COALESCE(ms.momentum_ratio, 1.0))) +\n      -- UCB exploration bonus (deterministic)\n      CASE \n        WHEN cf.is_cold_start THEN mw.ucb_c * cf.exploration_bonus\n        WHEN (ABS(FARM_FINGERPRINT(CONCAT(\n          cf.caption_id,\n          FORMAT_DATE('%Y%m%d', ss.slot_dt_local),\n          CAST(ss.hod_local AS STRING)\n        ))) / 9.22e18) < mw.epsilon THEN 2.0\n        ELSE 0\n      END\n    ) AS score_final,\n    \n    -- FIXED: Compliance flags with config-driven thresholds\n    CASE \n      WHEN cc.recent_uses_7d >= (SELECT max_weekly_uses FROM cooldown_config) THEN FALSE\n      WHEN cc.unique_days_7d >= 3 THEN FALSE\n      WHEN cc.last_sent_ts IS NOT NULL \n        AND TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), cc.last_sent_ts, HOUR) < \n            (SELECT min_cooldown_hours FROM cooldown_config) THEN FALSE\n      ELSE TRUE\n    END AS cooldown_ok,\n    \n    TRUE AS quota_ok,  -- Would join with quota table\n    \n    CASE \n      WHEN cc.recent_uses_7d > 0 THEN FALSE\n      ELSE TRUE\n    END AS dedupe_ok,\n    \n    CASE \n      WHEN cf.is_cold_start THEN TRUE\n      WHEN (ABS(FARM_FINGERPRINT(CONCAT(\n        cf.caption_id,\n        FORMAT_DATE('%Y%m%d', ss.slot_dt_local),\n        CAST(ss.hod_local AS STRING)\n      ))) / 9.22e18) < mw.epsilon THEN TRUE\n      ELSE FALSE\n    END AS is_explorer,\n    \n    -- Metadata\n    cf.total_sent,\n    cf.days_since_used,\n    cf.is_cold_start,\n    cf.is_stale,\n    cc.recent_uses_7d,\n    \n    -- Reason codes\n    CASE\n      WHEN cf.is_cold_start THEN 'cold_start_exploration'\n      WHEN (ABS(FARM_FINGERPRINT(CONCAT(\n        cf.caption_id,\n        FORMAT_DATE('%Y%m%d', ss.slot_dt_local),\n        CAST(ss.hod_local AS STRING)\n      ))) / 9.22e18) < mw.epsilon THEN 'epsilon_exploration'\n      WHEN cf.rps_percentile > 0.8 THEN 'high_performer'\n      WHEN dhp.dow_hod_percentile > 0.7 THEN 'optimal_timing'\n      WHEN cf.novelty_score > 0.9 THEN 'fresh_content'\n      ELSE 'balanced_selection'\n    END AS selection_reason\n    \n  FROM scheduled_slots ss\n  -- FIXED: Proper JOIN instead of CROSS JOIN\n  INNER JOIN `of-scheduler-proj.mart.caption_features_vNext` cf\n    ON cf.username_page = ss.username_page\n  LEFT JOIN ml_weights mw \n    ON ss.username_std = mw.username_std\n  LEFT JOIN dow_hod_patterns dhp \n    ON ss.username_std = dhp.username_std \n    AND ss.dow_local = dhp.dow_local \n    AND ss.hod_local = dhp.hod_local\n  LEFT JOIN price_elasticity pe \n    ON ss.username_page = pe.username_page\n  LEFT JOIN cooldown_check cc \n    ON cf.caption_id = cc.caption_id \n    AND ss.username_page = cc.username_page\n  LEFT JOIN momentum_scores ms \n    ON ss.username_page = ms.username_page\n  CROSS JOIN explore_config ec\n  CROSS JOIN cooldown_config\n),\n\n-- Rank captions per slot\nranked_captions AS (\n  SELECT\n    *,\n    ROW_NUMBER() OVER (\n      PARTITION BY username_page, slot_dt_local, hod_local\n      ORDER BY \n        CASE WHEN cooldown_ok AND quota_ok AND dedupe_ok THEN 0 ELSE 1 END,\n        score_final DESC,\n        days_since_used DESC\n    ) AS rank_in_slot,\n    \n    COUNT(DISTINCT category) OVER (\n      PARTITION BY username_page, slot_dt_local, hod_local\n    ) AS category_diversity,\n    \n    -- FIXED: Normalize score per slot (not per page)\n    100 * (score_final - MIN(score_final) OVER (PARTITION BY username_page, slot_dt_local, hod_local)) / \n    NULLIF(\n      MAX(score_final) OVER (PARTITION BY username_page, slot_dt_local, hod_local) - \n      MIN(score_final) OVER (PARTITION BY username_page, slot_dt_local, hod_local), \n      0\n    ) AS score_normalized\n    \n  FROM scored_captions\n  WHERE caption_id IS NOT NULL\n    AND caption_text IS NOT NULL\n)\n\n-- Final output\nSELECT\n  username_page,\n  username_std,\n  page_type,\n  slot_dt_local,\n  hod_local,\n  dow_local,\n  slot_rank,\n  tracking_hash,\n  caption_id,\n  caption_text,\n  caption_hash,\n  category,\n  explicitness,\n  \n  ROUND(score_final, 3) AS score_final,\n  ROUND(score_normalized, 1) AS score_normalized,\n  rank_in_slot,\n  \n  ROUND(conversion_rate, 4) AS conversion_rate,\n  ROUND(rps, 2) AS rps,\n  ROUND(open_rate, 4) AS open_rate,\n  \n  ROUND(dow_hod_score, 2) AS dow_hod_score,\n  ROUND(dow_hod_percentile, 3) AS dow_hod_percentile,\n  \n  ROUND(novelty_score, 3) AS novelty_score,\n  ROUND(momentum_score, 3) AS momentum_score,\n  \n  cooldown_ok,\n  quota_ok,\n  dedupe_ok,\n  is_explorer,\n  \n  total_sent,\n  days_since_used,\n  recent_uses_7d,\n  is_cold_start,\n  is_stale,\n  selection_reason,\n  category_diversity,\n  \n  CURRENT_TIMESTAMP() AS ranked_at,\n  'v1.0.1-patched' AS model_version\n  \nFROM ranked_captions\nWHERE rank_in_slot <= 20\nQUALIFY ROW_NUMBER() OVER (\n  PARTITION BY username_page, slot_dt_local, hod_local, caption_id\n  ORDER BY rank_in_slot\n) = 1",
    "useLegacySql": false
  }
}
