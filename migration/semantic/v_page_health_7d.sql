CREATE OR REPLACE VIEW `of-scheduler-proj.layer_04_semantic.v_page_health_7d` OPTIONS(description="Generates 7-day rolling health and intensity metrics for each creator. This is the foundational input for the tiering engine.") AS WITH current_creator_dim AS (SELECT creator_key, `of-scheduler-proj.util.norm_username`(username) AS username_std FROM `of-scheduler-proj.layer_03_foundation.dim_creator` WHERE is_current_record = TRUE), message_metrics_7d AS (SELECT creator_key, SUM(messages_purchased) AS total_purchases_7d, SUM(CAST(gross_revenue_usd AS NUMERIC)) AS total_earnings_7d, SUM(CAST(net_revenue_usd AS NUMERIC)) AS message_net_7d FROM `of-scheduler-proj.layer_03_foundation.fact_message_send` WHERE send_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 6 DAY) AND CURRENT_DATE('UTC') AND COALESCE(quality_flag, 'valid') = 'valid' GROUP BY creator_key), creator_stats_latest AS (SELECT l.username_std, l.end_date, l.active_fans, l.renew_on_pct FROM `of-scheduler-proj.staging.creator_stats_latest` AS l QUALIFY ROW_NUMBER() OVER (PARTITION BY l.username_std ORDER BY l.end_date DESC) = 1), expired_delta_latest AS (WITH raw_in AS (SELECT `of-scheduler-proj.util.norm_username`(LOWER(Creator)) AS username_std, COALESCE(SAFE.PARSE_DATE('%Y-%m-%d', SPLIT(CAST(`Date_Time America_New_York` AS STRING), ' - ')[SAFE_OFFSET(1)]), SAFE.PARSE_DATE('%m/%d/%Y', SPLIT(CAST(`Date_Time America_New_York` AS STRING), ' - ')[SAFE_OFFSET(1)])) AS end_date, SAFE_CAST(`Change in expired fan count` AS INT64) AS expired_change_7d FROM `of-scheduler-proj.staging.creator_stats_upload` WHERE `Date_Time America_New_York` IS NOT NULL), latest AS (SELECT username_std, end_date, expired_change_7d, ROW_NUMBER() OVER (PARTITION BY username_std ORDER BY end_date DESC) AS rn FROM raw_in) SELECT username_std, expired_change_7d FROM latest WHERE rn = 1) SELECT d.creator_key AS page_id, d.username_std, COALESCE(cs.active_fans, 0) AS active_fans_7d, COALESCE(cs.renew_on_pct, 0) AS renew_on_rate_7d, COALESCE(ed.expired_change_7d, 0) AS expired_change_7d, COALESCE(mm.total_earnings_7d, 0) AS total_earnings_7d, COALESCE(mm.message_net_7d, 0) AS message_net_7d, SAFE_DIVIDE(COALESCE(mm.total_earnings_7d,0), NULLIF(COALESCE(mm.total_purchases_7d,0),0)) AS avg_spend_per_txn_7d, SAFE_DIVIDE(COALESCE(mm.total_earnings_7d,0), NULLIF(COALESCE(cs.active_fans,0),0)) AS avg_earn_per_fan_7d, CURRENT_TIMESTAMP() AS computed_at FROM current_creator_dim d LEFT JOIN message_metrics_7d mm USING (creator_key) LEFT JOIN creator_stats_latest cs USING (username_std) LEFT JOIN expired_delta_latest ed USING (username_std);