==============================================================
DATASET: archive
==============================================================

------------------ TABLES ------------------
****** Table: archive.infloww_stats_v4_backup ******
[{"name":"backed_up_at","type":"TIMESTAMP"},{"name":"username","type":"STRING"},{"name":"sending_timestamp","type":"TIMESTAMP"},{"name":"sending_date","type":"DATE"},{"name":"price_usd","type":"NUMERIC"},{"name":"earnings_usd","type":"NUMERIC"},{"name":"sent","type":"INTEGER"},{"name":"viewed","type":"INTEGER"},{"name":"purchased","type":"INTEGER"},{"name":"caption_hash","type":"STRING"},{"name":"row_key_v1","type":"STRING"},{"name":"source","type":"STRING"},{"name":"loaded_at","type":"TIMESTAMP"},{"name":"sender","type":"STRING"}]

------------------ VIEWS ------------------
------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: backup_20250911_pre_migration
==============================================================

------------------ TABLES ------------------
****** Table: backup_20250911_pre_migration.caption_overrides ******
[{"name":"override_timestamp","type":"TIMESTAMP","mode":"REQUIRED"},{"name":"scheduler_email","type":"STRING","mode":"REQUIRED"},{"name":"username_page","type":"STRING","mode":"REQUIRED"},{"name":"slot_time","type":"STRING"},{"name":"original_caption_id","type":"STRING"},{"name":"override_caption_id","type":"STRING","mode":"REQUIRED"},{"name":"override_reason","type":"STRING"},{"name":"slot_price","type":"FLOAT"},{"name":"performance_tracked","type":"BOOLEAN","defaultValueExpression":"FALSE"}]

****** Table: backup_20250911_pre_migration.explore_exploit_config_v1 ******
[{"name":"config_key","type":"STRING"},{"name":"min_obs_for_exploit","type":"INTEGER"},{"name":"max_explorer_share","type":"FLOAT"},{"name":"cold_start_days","type":"INTEGER"},{"name":"thompson_sampling_enabled","type":"BOOLEAN"},{"name":"ucb_enabled","type":"BOOLEAN"},{"name":"decay_factor","type":"FLOAT"},{"name":"updated_at","type":"TIMESTAMP"}]

****** Table: backup_20250911_pre_migration.ml_ranking_weights_v1 ******
[{"name":"page_state","type":"STRING"},{"name":"w_rps","type":"FLOAT"},{"name":"w_open","type":"FLOAT"},{"name":"w_buy","type":"FLOAT"},{"name":"w_dowhod","type":"FLOAT"},{"name":"w_price","type":"FLOAT"},{"name":"w_novelty","type":"FLOAT"},{"name":"w_momentum","type":"FLOAT"},{"name":"ucb_c","type":"FLOAT"},{"name":"epsilon","type":"FLOAT"},{"name":"updated_at","type":"TIMESTAMP"},{"name":"updated_by","type":"STRING"}]

****** Table: backup_20250911_pre_migration.page_type_authority_snap ******
[{"name":"username_std","type":"STRING"},{"name":"page_type","type":"STRING"},{"name":"decided_as_of","type":"DATE"}]

****** Table: backup_20250911_pre_migration.scheduler_assignments_v1 ******
[{"name":"username_std","type":"STRING"},{"name":"username_page","type":"STRING"},{"name":"scheduler_name","type":"STRING"},{"name":"scheduler_email","type":"STRING"},{"name":"is_active","type":"BOOLEAN"},{"name":"updated_at","type":"TIMESTAMP"}]

------------------ VIEWS ------------------
------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: core
==============================================================

------------------ TABLES ------------------
****** Table: core.active_overrides ******
[{"name":"username_std","type":"STRING"},{"name":"include","type":"BOOLEAN"},{"name":"note","type":"STRING"},{"name":"updated_at","type":"TIMESTAMP"}]

****** Table: core.active_overrides_backup_20250909_192001 ******
[{"name":"username_std","type":"STRING"},{"name":"include","type":"BOOLEAN"},{"name":"note","type":"STRING"},{"name":"updated_at","type":"TIMESTAMP","defaultValueExpression":"CURRENT_TIMESTAMP()"}]

****** Table: core.caption_fatigue_scores_v1 ******
[{"name":"caption_hash","type":"STRING"},{"name":"username_page","type":"STRING"},{"name":"times_used_30d","type":"INTEGER"},{"name":"most_recent_use","type":"TIMESTAMP"},{"name":"first_use_30d","type":"TIMESTAMP"},{"name":"usage_dates","type":"DATE","mode":"REPEATED"},{"name":"avg_days_between_uses","type":"FLOAT"},{"name":"base_fatigue_score","type":"FLOAT"},{"name":"recency_multiplier","type":"FLOAT"},{"name":"usage_density","type":"FLOAT"},{"name":"fatigue_score","type":"FLOAT"},{"name":"fatigue_tier","type":"STRING"},{"name":"days_since_last_use","type":"INTEGER"},{"name":"calculated_at","type":"TIMESTAMP"}]

****** Table: core.cooldown_settings_v1 ******
[{"name":"setting_key","type":"STRING"},{"name":"setting_value","type":"STRING"},{"name":"description","type":"STRING"},{"name":"updated_at","type":"TIMESTAMP","defaultValueExpression":"CURRENT_TIMESTAMP()"},{"name":"updated_by","type":"STRING"}]

****** Table: core.message_facts ******
[{"name":"row_key_v1","type":"STRING"},{"name":"message_id","type":"STRING"},{"name":"username_raw","type":"STRING"},{"name":"username_std","type":"STRING"},{"name":"sender","type":"STRING"},{"name":"sending_ts","type":"TIMESTAMP"},{"name":"sending_date","type":"DATE"},{"name":"price_usd","type":"NUMERIC"},{"name":"earnings_usd","type":"NUMERIC"},{"name":"sent","type":"INTEGER"},{"name":"viewed","type":"INTEGER"},{"name":"purchased","type":"INTEGER"},{"name":"caption_hash","type":"STRING"},{"name":"source_file","type":"STRING"},{"name":"loaded_at","type":"TIMESTAMP"}]

****** Table: core.page_content_profile_v1 ******
[{"name":"username_std","type":"STRING"},{"name":"content_types","type":"STRING","mode":"REPEATED"},{"name":"max_explicitness","type":"STRING"},{"name":"blocked_themes","type":"STRING","mode":"REPEATED"},{"name":"allowed_themes","type":"STRING","mode":"REPEATED"},{"name":"updated_at","type":"TIMESTAMP","defaultValueExpression":"CURRENT_TIMESTAMP()"}]

****** Table: core.page_knobs_learned_v1 ******
[{"name":"username_std","type":"STRING","mode":"REQUIRED"},{"name":"quota_nudge","type":"INTEGER"},{"name":"hour_pool_nudge","type":"INTEGER"},{"name":"price_mode_bias","type":"STRING"},{"name":"confidence","type":"FLOAT"},{"name":"reason","type":"STRING"},{"name":"computed_at","type":"TIMESTAMP","defaultValueExpression":"CURRENT_TIMESTAMP()"}]

****** Table: core.page_learner_config_v1 ******
[{"name":"username_std","type":"STRING","mode":"REQUIRED"},{"name":"auto_tune_enabled","type":"BOOLEAN","defaultValueExpression":"TRUE"},{"name":"quota_min","type":"INTEGER","defaultValueExpression":"0"},{"name":"quota_max","type":"INTEGER","defaultValueExpression":"12"},{"name":"hour_pool_min","type":"INTEGER","defaultValueExpression":"6"},{"name":"hour_pool_max","type":"INTEGER","defaultValueExpression":"24"},{"name":"freeze_until","type":"DATE"},{"name":"updated_at","type":"TIMESTAMP","defaultValueExpression":"CURRENT_TIMESTAMP()"}]

****** Table: core.page_onboarding_v1 ******
[{"name":"username_std","type":"STRING"},{"name":"created_at","type":"TIMESTAMP","defaultValueExpression":"CURRENT_TIMESTAMP()"},{"name":"new_until","type":"DATE"},{"name":"tier_pending","type":"BOOLEAN","defaultValueExpression":"TRUE"}]

****** Table: core.page_overrides ******
[{"name":"username_std","type":"STRING"},{"name":"quota_min","type":"INTEGER"},{"name":"quota_max","type":"INTEGER"},{"name":"price_aggressiveness","type":"STRING"},{"name":"burst_days","type":"INTEGER"},{"name":"hour_pool","type":"INTEGER"}]

****** Table: core.page_personalization_weights ******
[{"name":"username_std","type":"STRING"},{"name":"weight_volume","type":"FLOAT"},{"name":"weight_price","type":"FLOAT"},{"name":"weight_hours","type":"FLOAT"},{"name":"exploration_rate","type":"FLOAT"},{"name":"updated_at","type":"TIMESTAMP"}]

****** Table: core.page_scheduler_override ******
[{"name":"username_std","type":"STRING"},{"name":"assigned_scheduler","type":"STRING"},{"name":"updated_at","type":"TIMESTAMP"}]

****** Table: core.page_tier_override_v1 ******
[{"name":"username_std","type":"STRING","mode":"REQUIRED"},{"name":"tier_override","type":"STRING","mode":"REQUIRED"},{"name":"reason","type":"STRING"},{"name":"updated_at","type":"TIMESTAMP","defaultValueExpression":"CURRENT_TIMESTAMP()"}]

****** Table: core.page_tz ******
[{"name":"username_std","type":"STRING"},{"name":"tz","type":"STRING"},{"name":"min_hod","type":"INTEGER"},{"name":"max_hod","type":"INTEGER"},{"name":"updated_at","type":"TIMESTAMP"},{"name":"migrated_at","type":"TIMESTAMP"}]

****** Table: core.scheduler_user_map ******
[{"name":"scheduler_name","type":"STRING"},{"name":"email","type":"STRING"},{"name":"display_name","type":"STRING"},{"name":"can_view_all","type":"BOOLEAN"},{"name":"updated_at","type":"TIMESTAMP"}]

****** Table: core.settings_modeling ******
[{"name":"setting_key","type":"STRING"},{"name":"setting_val","type":"STRING"},{"name":"updated_at","type":"TIMESTAMP","defaultValueExpression":"CURRENT_TIMESTAMP()"}]

****** Table: core.starter_pack_by_tier_v1 ******
[{"name":"tier","type":"STRING","mode":"REQUIRED"},{"name":"page_type","type":"STRING"},{"name":"pack_id","type":"STRING","mode":"REQUIRED"},{"name":"updated_at","type":"TIMESTAMP","defaultValueExpression":"CURRENT_TIMESTAMP()"}]

****** Table: core.starter_pack_policy_v1 ******
[{"name":"pack_id","type":"STRING","mode":"REQUIRED"},{"name":"dow","type":"INTEGER","mode":"REQUIRED"},{"name":"ppv_quota","type":"INTEGER","mode":"REQUIRED"},{"name":"hour_pool","type":"INTEGER"},{"name":"min_hod","type":"INTEGER"},{"name":"max_hod","type":"INTEGER"},{"name":"price_mode_default","type":"STRING"},{"name":"is_burst_dow","type":"INTEGER","defaultValueExpression":"0"},{"name":"updated_at","type":"TIMESTAMP","defaultValueExpression":"CURRENT_TIMESTAMP()"}]

****** Table: core.username_alias ******
[{"name":"alias_raw","type":"STRING"},{"name":"alias_norm","type":"STRING"},{"name":"username_std","type":"STRING"},{"name":"note","type":"STRING"},{"name":"updated_at","type":"TIMESTAMP"}]

------------------ VIEWS ------------------
****** View: core.caption_dim ******
Table of-scheduler-proj:core.caption_dim

                                    Query                                    
 --------------------------------------------------------------------------- 
  SELECT                                                                     
    `of-scheduler-proj.util.norm_username`(last_used_page) AS username_std,  
    CAST(caption_id AS STRING) AS caption_id,                                
    caption_hash,                                                            
    caption_text,                                                            
    caption_type,                                                            
    explicitness,                                                            
    theme_tags                                                               
  FROM `of-scheduler-proj.raw.caption_library`                               


****** View: core.page_active_current ******
Table of-scheduler-proj:core.page_active_current

                                           Query                                            
 ------------------------------------------------------------------------------------------ 
  WITH last_seen AS (                                                                       
    SELECT username_std, MAX(COALESCE(end_date, start_date)) AS last_seen_date              
    FROM `of-scheduler-proj.staging.creator_stats_norm`                                     
    GROUP BY username_std                                                                   
  ),                                                                                        
  base_active AS (                                                                          
    SELECT username_std                                                                     
    FROM last_seen                                                                          
    WHERE last_seen_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 21 DAY)                       
  ),                                                                                        
  ovr AS (                                                                                  
    SELECT LOWER(username_std) AS username_std, include                                     
    FROM `of-scheduler-proj.core.active_overrides`                                          
  ),                                                                                        
  base_plus_forced AS (                                                                     
    SELECT username_std FROM base_active                                                    
    UNION DISTINCT                                                                          
    SELECT username_std FROM ovr WHERE include = TRUE                                       
  ),                                                                                        
  final_active AS (                                                                         
    SELECT username_std FROM base_plus_forced                                               
    EXCEPT DISTINCT                                                                         
    SELECT username_std FROM ovr WHERE include = FALSE                                      
  )                                                                                         
  SELECT                                                                                    
    fa.username_std,                                                                        
    COALESCE(LOWER(NULLIF(mpe.assigned_scheduler,'')),'unassigned') AS assigned_scheduler,  
    mpe.performance_tier AS tier,                                                           
    TRUE AS is_active                                                                       
  FROM final_active fa                                                                      
  LEFT JOIN `of-scheduler-proj.raw.model_profiles_enhanced` mpe                             
    ON LOWER(mpe.Creator) = fa.username_std                                                 


****** View: core.page_billing_v1 ******
Table of-scheduler-proj:core.page_billing_v1

                           Query                           
 --------------------------------------------------------- 
  SELECT                                                   
    l.username_std,                                        
    COALESCE(l.renew_on_pct, 0) > 0 AS is_paid_sub,        
    l.end_date AS decided_as_of                            
  FROM `of-scheduler-proj.staging.creator_stats_latest` l  


****** View: core.page_dim ******
Table of-scheduler-proj:core.page_dim

                                             Query                                             
 --------------------------------------------------------------------------------------------- 
  SELECT                                                                                       
    a.username_std,                                                                            
    COALESCE(o.assigned_scheduler, a.assigned_scheduler, 'unassigned') AS assigned_scheduler,  
    a.tier,                                                                                    
    COALESCE(tz.tz, 'UTC') AS tz,                                                              
    tz.min_hod, tz.max_hod,                                                                    
    TRUE AS is_active                                                                          
  FROM `of-scheduler-proj.core.page_active_current` a                                          
  LEFT JOIN `of-scheduler-proj.core.page_tz` tz USING (username_std)                           
  LEFT JOIN `of-scheduler-proj.core.page_scheduler_overrides` o USING (username_std)           


****** View: core.page_is_paid_v1 ******
Table of-scheduler-proj:core.page_is_paid_v1

                          Query                          
 ------------------------------------------------------- 
  SELECT                                                 
    username_std,                                        
    IFNULL(renew_on_pct, 0) > 0 AS is_paid               
  FROM `of-scheduler-proj.staging.creator_stats_latest`  


****** View: core.page_scheduler_overrides ******
Table of-scheduler-proj:core.page_scheduler_overrides

                           Query                           
 --------------------------------------------------------- 
  WITH ranked AS (                                         
    SELECT                                                 
      username_std,                                        
      assigned_scheduler,                                  
      updated_at,                                          
      ROW_NUMBER() OVER (                                  
        PARTITION BY username_std                          
        ORDER BY updated_at DESC, assigned_scheduler       
      ) AS rn                                              
    FROM `of-scheduler-proj.core.page_scheduler_override`  
  )                                                        
  SELECT                                                   
    username_std,                                          
    assigned_scheduler,                                    
    CAST(NULL AS STRING) AS note,                          
    updated_at                                             
  FROM ranked                                              
  WHERE rn = 1                                             


****** View: core.page_state ******
Table of-scheduler-proj:core.page_state

                                                     Query                                                     
 ------------------------------------------------------------------------------------------------------------- 
  WITH perf AS (                                                                                               
    SELECT                                                                                                     
      username_std,                                                                                            
      SUM(IF(sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7  DAY), earnings_usd, 0))  AS rev_7d,  
      SUM(IF(sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 28 DAY), earnings_usd, 0))  AS rev_28d  
    FROM `of-scheduler-proj.core.message_facts`                                                                
    WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 28 DAY)                                    
    GROUP BY username_std                                                                                      
  ),                                                                                                           
  joined AS (                                                                                                  
    SELECT                                                                                                     
      p.username_std,                                                                                          
      COALESCE(cs.active_fans,0)   AS active_fans,                                                             
      COALESCE(cs.new_fans,0)      AS new_fans,                                                                
      COALESCE(cs.renew_on_pct,0)  AS renew_on_pct,                                                            
      COALESCE(cs.msg_rev_ratio,0) AS msg_rev_ratio,                                                           
      COALESCE(perf.rev_7d,0)      AS rev_7d,                                                                  
      COALESCE(perf.rev_28d,0)     AS rev_28d                                                                  
    FROM `of-scheduler-proj.core.page_dim` p                                                                   
    LEFT JOIN `of-scheduler-proj.staging.creator_stats_latest` cs USING (username_std)                         
    LEFT JOIN perf USING (username_std)                                                                        
  )                                                                                                            
  SELECT                                                                                                       
    username_std, rev_7d, rev_28d, active_fans, new_fans, renew_on_pct, msg_rev_ratio,                         
    CASE                                                                                                       
      WHEN new_fans >= 20 AND renew_on_pct < 0.30 THEN 'grow'                                                  
      WHEN renew_on_pct < 0.25 THEN 'retain'                                                                   
      WHEN rev_7d >= rev_28d / 4 THEN 'monetize'                                                               
      ELSE 'balance'                                                                                           
    END AS page_state,                                                                                         
    CASE                                                                                                       
      WHEN renew_on_pct < 0.25 THEN 'Low renewals; prioritize relationship-building captions & prime hours'    
      WHEN new_fans >= 20 THEN 'New fan inflow; schedule more lightweight messages at proven hours'            
      WHEN rev_7d >= rev_28d / 4 THEN 'Revenue strong; keep price band and hours; rotate themes'               
      ELSE 'Mixed signals; keep diversity, avoid repeats, follow best hours'                                   
    END AS state_note                                                                                          
  FROM joined                                                                                                  


****** View: core.page_type_authority ******
Table of-scheduler-proj:core.page_type_authority

                                                      Query                                                       
 ---------------------------------------------------------------------------------------------------------------- 
  WITH raw_in AS (                                                                                                
    SELECT                                                                                                        
      `of-scheduler-proj.util.norm_username`(Creator) AS username_norm,                                           
      SAFE_CAST(`Subscription Net`       AS NUMERIC)  AS sub_net,                                                 
      SAFE_CAST(`New subscriptions Net`  AS NUMERIC)  AS new_sub_net,                                             
      /* end_date is the right edge from "YYYY-MM-DD - YYYY-MM-DD" or similar */                                  
      COALESCE(                                                                                                   
        SAFE.PARSE_DATE('%Y-%m-%d', SPLIT(CAST(`Date_Time America_New_York` AS STRING), ' - ')[SAFE_OFFSET(1)]),  
        SAFE.PARSE_DATE('%m/%d/%Y', SPLIT(CAST(`Date_Time America_New_York` AS STRING), ' - ')[SAFE_OFFSET(1)]),  
        SAFE.PARSE_DATE('%Y/%m/%d', SPLIT(CAST(`Date_Time America_New_York` AS STRING), ' - ')[SAFE_OFFSET(1)])   
      ) AS end_date                                                                                               
    FROM `of-scheduler-proj.staging.creator_stats_upload`                                                         
    WHERE Creator IS NOT NULL                                                                                     
  ),                                                                                                              
  latest AS (                                                                                                     
    SELECT                                                                                                        
      username_norm, sub_net, new_sub_net, end_date,                                                              
      ROW_NUMBER() OVER (PARTITION BY username_norm ORDER BY end_date DESC) AS rn                                 
    FROM raw_in                                                                                                   
  )                                                                                                               
  SELECT                                                                                                          
    c.username_std,                                                                                               
    CASE WHEN COALESCE(l.sub_net,0) > 0 OR COALESCE(l.new_sub_net,0) > 0                                          
         THEN 'vip' ELSE 'main' END AS page_type,                                                                 
    l.end_date AS decided_as_of                                                                                   
  FROM `of-scheduler-proj.core.username_canonical` c                                                              
  LEFT JOIN latest l                                                                                              
    ON l.username_norm = c.username_std                                                                           
   AND l.rn = 1                                                                                                   


****** View: core.scheduled_send_facts ******
Table of-scheduler-proj:core.scheduled_send_facts

                                          Query                                          
 --------------------------------------------------------------------------------------- 
  WITH base AS (                                                                         
    SELECT                                                                               
      `of-scheduler-proj.util.norm_username`(model_name) AS username_std,                
      LOWER(NULLIF(scheduler_name,'')) AS scheduler_name,                                
      TIMESTAMP_TRUNC(CAST(logged_ts AS TIMESTAMP), MINUTE) AS logged_ts,                
      CAST(price_usd AS NUMERIC) AS price_usd_scheduled,                                 
      COALESCE(NULLIF(tracking_hash_v2,''), NULLIF(tracking_hash,'')) AS tracking_hash,  
      CAST(caption_id AS STRING) AS caption_id,                                          
      CAST(was_modified AS BOOL) AS was_modified,                                        
      created_at                                                                         
    FROM `of-scheduler-proj.raw.scheduled_sends`                                         
    WHERE logged_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 180 DAY)              
  ),                                                                                     
  dedup AS (                                                                             
    SELECT *,                                                                            
      ROW_NUMBER() OVER (                                                                
        PARTITION BY username_std, logged_ts, caption_id, tracking_hash                  
        ORDER BY created_at DESC                                                         
      ) AS rn                                                                            
    FROM base                                                                            
  )                                                                                      
  SELECT * EXCEPT(rn, created_at)                                                        
  FROM dedup                                                                             
  WHERE rn = 1                                                                           


****** View: core.username_canonical ******
Table of-scheduler-proj:core.username_canonical

                          Query                          
 ------------------------------------------------------- 
  SELECT DISTINCT username_std                           
  FROM `of-scheduler-proj.staging.creator_stats_latest`  


****** View: core.username_dim ******
Table of-scheduler-proj:core.username_dim

                                              Query                                               
 ------------------------------------------------------------------------------------------------ 
  WITH m AS (                                                                                     
    SELECT                                                                                        
      `of-scheduler-proj.util.norm_username`(raw_username) AS username_raw,                       
      `of-scheduler-proj.util.norm_username`(                                                     
        COALESCE(standard_username, base_username, normalized_username, raw_username)             
      ) AS username_std,                                                                          
      created_at,                                                                                 
      updated_at                                                                                  
    FROM `of-scheduler-proj.raw.username_mapping`                                                 
  ),                                                                                              
  ranked AS (                                                                                     
    SELECT                                                                                        
      m.username_raw,                                                                             
      m.username_std,                                                                             
      m.created_at,                                                                               
      m.updated_at,                                                                               
      ROW_NUMBER() OVER (                                                                         
        PARTITION BY m.username_raw                                                               
        ORDER BY                                                                                  
          CASE WHEN m.username_std = m.username_raw THEN 0 ELSE 1 END,        -- prefer identity  
          COALESCE(m.updated_at, m.created_at) DESC,                          -- newest first     
          m.username_std ASC                                                  -- stable fallback  
      ) AS rn                                                                                     
    FROM m                                                                                        
  )                                                                                               
  SELECT username_std, username_raw                                                               
  FROM ranked                                                                                     
  WHERE rn = 1                                                                                    


****** View: core.username_unknowns_last30 ******
Table of-scheduler-proj:core.username_unknowns_last30

                                    Query                                    
 --------------------------------------------------------------------------- 
  SELECT DISTINCT n.username_raw                                             
  FROM `of-scheduler-proj.staging.gmail_etl_normalized` n                    
  LEFT JOIN `of-scheduler-proj.core.username_dim` d                          
    ON d.username_raw = n.username_raw                                       
  WHERE n.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)  
    AND d.username_std IS NULL                                               


****** View: core.username_unknowns_last60 ******
Table of-scheduler-proj:core.username_unknowns_last60

                                    Query                                    
 --------------------------------------------------------------------------- 
  SELECT DISTINCT n.username_raw                                             
  FROM `of-scheduler-proj.staging.gmail_etl_normalized` n                    
  LEFT JOIN `of-scheduler-proj.core.username_dim` d                          
    ON d.username_raw = n.username_raw                                       
  WHERE n.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 60 DAY)  
    AND d.username_std IS NULL                                               


****** View: core.v_active_overrides_status ******
Table of-scheduler-proj:core.v_active_overrides_status

                                 Query                                 
 --------------------------------------------------------------------- 
  SELECT                                                               
    o.username_std,                                                    
    CASE WHEN o.include THEN 'force-in' ELSE 'force-out' END AS rule,  
    o.note, o.updated_at                                               
  FROM `of-scheduler-proj.core.active_overrides` o                     
  ORDER BY updated_at DESC                                             


****** View: core.v_caption_bank_quality_v1 ******
Table of-scheduler-proj:core.v_caption_bank_quality_v1

                                            Query                                             
 -------------------------------------------------------------------------------------------- 
  SELECT                                                                                      
    DATE(created_at) as insert_date,                                                          
    COUNT(*) as captions_added,                                                               
    COUNT(DISTINCT caption_hash_v2) as unique_captions,                                       
    COUNT(DISTINCT last_used_page) as unique_pages,                                           
    STRING_AGG(DISTINCT explicitness) as explicitness_values,                                 
    STRING_AGG(DISTINCT length_cat) as length_categories,                                     
    AVG(`of-scheduler-proj.util.emoji_count`(caption_text)) as avg_emoji_count,               
    COUNTIF(`of-scheduler-proj.util.has_cta`(caption_text)) as captions_with_cta,             
    COUNTIF(`of-scheduler-proj.util.has_urgency`(caption_text)) as captions_with_urgency,     
    COUNTIF(`of-scheduler-proj.util.ends_with_question`(caption_text)) as question_captions,  
    -- Additional quality metrics                                                             
    AVG(LENGTH(caption_text)) as avg_text_length,                                             
    COUNTIF(LENGTH(TRIM(caption_text)) < 10) as very_short_captions,                          
    COUNTIF(LENGTH(TRIM(caption_text)) > 500) as very_long_captions,                          
    COUNTIF(theme_tags = 'untagged') as untagged_captions                                     
  FROM `of-scheduler-proj.raw.caption_library`                                                
  WHERE created_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)                      
  GROUP BY 1                                                                                  
  ORDER BY 1 DESC                                                                             


****** View: core.v_caption_candidates_features_v3 ******
Table of-scheduler-proj:core.v_caption_candidates_features_v3

                                                                         Query                                                                         
 ----------------------------------------------------------------------------------------------------------------------------------------------------- 
  WITH bank AS (                                                                                                                                       
    SELECT                                                                                                                                             
      v.username_page,                                                                                                                                 
      SAFE_CAST(c.caption_id AS STRING) AS caption_id,                                                                                                 
      c.caption_hash,                                                                                                                                  
      c.caption_text                                                                                                                                   
    FROM `of-scheduler-proj.core.caption_dim` c                                                                                                        
    JOIN `of-scheduler-proj.core.v_pages` v USING (username_std)                                                                                       
  ),                                                                                                                                                   
  r60 AS (                                                                                                                                             
    SELECT r.username_page,                                                                                                                            
           COALESCE(b.caption_id, CONCAT('recent_', SUBSTR(r.caption_hash,1,10))) AS caption_id,                                                       
           r.caption_hash,                                                                                                                             
           b.caption_text                                                                                                                              
    FROM `of-scheduler-proj.core.v_recent_captions_60d_v1` r                                                                                           
    LEFT JOIN `of-scheduler-proj.core.caption_dim` b                                                                                                   
      ON b.username_std=r.username_std AND b.caption_hash=r.caption_hash                                                                               
  ),                                                                                                                                                   
  r365 AS (                                                                                                                                            
    SELECT r.username_page,                                                                                                                            
           COALESCE(b.caption_id, CONCAT('recent_', SUBSTR(r.caption_hash,1,10))) AS caption_id,                                                       
           r.caption_hash,                                                                                                                             
           b.caption_text                                                                                                                              
    FROM `of-scheduler-proj.core.v_recent_captions_365d_v1` r                                                                                          
    LEFT JOIN `of-scheduler-proj.core.caption_dim` b                                                                                                   
      ON b.username_std=r.username_std AND b.caption_hash=r.caption_hash                                                                               
  ),                                                                                                                                                   
  unioned AS (                                                                                                                                         
    SELECT * FROM bank                                                                                                                                 
    UNION ALL                                                                                                                                          
    SELECT * FROM r60                                                                                                                                  
    UNION ALL                                                                                                                                          
    SELECT t.*                                                                                                                                         
    FROM r365 t                                                                                                                                        
    WHERE NOT EXISTS (SELECT 1 FROM bank b WHERE b.username_page=t.username_page AND b.caption_hash=t.caption_hash)                                    
      AND NOT EXISTS (SELECT 1 FROM r60  x WHERE x.username_page=t.username_page AND x.caption_hash=t.caption_hash)                                    
  )                                                                                                                                                    
  SELECT                                                                                                                                               
    username_page,                                                                                                                                     
    caption_id,                                                                                                                                        
    caption_hash,                                                                                                                                      
    caption_text,                                                                                                                                      
    ARRAY_LENGTH(REGEXP_EXTRACT_ALL(COALESCE(caption_text,''), r'\b[\p{L}\p{N}]+\b')) AS len_words,                                                    
    `of-scheduler-proj.util.emoji_count`(caption_text) AS emoji_cnt,                                                                                   
    CASE WHEN ARRAY_LENGTH(REGEXP_EXTRACT_ALL(COALESCE(caption_text,''), r'\b[\p{L}\p{N}]+\b')) < 12 THEN 'short'                                      
         WHEN ARRAY_LENGTH(REGEXP_EXTRACT_ALL(COALESCE(caption_text,''), r'\b[\p{L}\p{N}]+\b')) <= 24 THEN 'med'                                       
         ELSE 'long' END AS len_bin,                                                                                                                   
    CASE WHEN `of-scheduler-proj.util.emoji_count`(caption_text)=0 THEN 'no_emoji'                                                                     
         WHEN `of-scheduler-proj.util.emoji_count`(caption_text)<=2 THEN 'lite' ELSE 'heavy' END AS emoji_bin,                                         
    REGEXP_CONTAINS(LOWER(COALESCE(caption_text,'')), r'\b(dm|message|open|unlock|tip|buy|pay|bundle|sale|special|discount)\b') AS has_cta,            
    REGEXP_CONTAINS(LOWER(COALESCE(caption_text,'')), r'\b(today|tonight|now|last chance|limited|only|expires)\b')             AS has_urgency,         
    REGEXP_CONTAINS(LOWER(COALESCE(caption_text,'')), r'\?\s*$')                                                                AS ends_with_question  
  FROM unioned                                                                                                                                         


****** View: core.v_caption_candidates_safe_v1 ******
Table of-scheduler-proj:core.v_caption_candidates_safe_v1

                                                   Query                                                    
 ---------------------------------------------------------------------------------------------------------- 
  WITH profiles AS (                                                                                        
    SELECT                                                                                                  
      v.username_page,                                                                                      
      COALESCE(p.content_types, ["main"]) AS allowed_types,                                                 
      COALESCE(p.max_explicitness, "explicit") AS max_explicit,                                             
      COALESCE(p.blocked_themes, []) AS blocked,                                                            
      COALESCE(p.allowed_themes, []) AS allowed                                                             
    FROM `of-scheduler-proj.core.v_pages` v                                                                 
    LEFT JOIN `of-scheduler-proj.core.page_content_profile_v1` p                                            
      ON v.username_std = p.username_std                                                                    
  )                                                                                                         
  SELECT f.*                                                                                                
  FROM `of-scheduler-proj.core.v_caption_candidates_features_v3` f                                          
  JOIN profiles p ON p.username_page = f.username_page                                                      
  LEFT JOIN `of-scheduler-proj.core.caption_dim` c ON c.caption_hash = f.caption_hash  -- FIXED: LEFT JOIN  
  WHERE                                                                                                     
    -- Explicitness matching (default to mild if no classification)                                         
    (p.max_explicit = "explicit" OR                                                                         
     (p.max_explicit = "moderate" AND COALESCE(c.explicitness,"mild") IN ("mild","moderate")) OR            
     (p.max_explicit = "mild" AND COALESCE(c.explicitness,"mild") = "mild"))                                
                                                                                                            
    -- Theme filtering (only apply if caption has themes)                                                   
    AND (ARRAY_LENGTH(p.blocked) = 0 OR                                                                     
         c.theme_tags IS NULL OR                                                                            
         NOT EXISTS(SELECT 1 FROM UNNEST(p.blocked) AS blocked_theme                                        
                    WHERE REGEXP_CONTAINS(LOWER(c.theme_tags), blocked_theme)))                             


****** View: core.v_caption_classification_priority ******
Table of-scheduler-proj:core.v_caption_classification_priority

uery

  WITH caption_usage AS ( SELECT caption_hash, COUNT(*) as usage_count, SUM(earnings_usd) as total_revenue, COUNT(DISTINCT username_std) as creators_using FROM `of-scheduler-proj.core.message_facts` WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY) GROUP BY caption_hash ), unclassified_captions AS ( SELECT caption_id, caption_hash, caption_text FROM `of-scheduler-proj.raw.caption_library` WHERE explicitness = 'pending_review' OR explicitness IS NULL ) SELECT u.caption_id, u.caption_hash, u.caption_text, COALESCE(cu.usage_count, 0) as usage_count, COALESCE(cu.total_revenue, 0) as revenue_generated, COALESCE(cu.creators_using, 0) as creators_using, CASE WHEN cu.usage_count >= 10 THEN 'HIGH_PRIORITY' WHEN cu.usage_count >= 3 THEN 'MEDIUM_PRIORITY' WHEN cu.usage_count >= 1 THEN 'LOW_PRIORITY' ELSE 'UNUSED' END as classification_priority FROM unclassified_captions u LEFT JOIN caption_usage cu USING (caption_hash) ORDER BY COALESCE(cu.usage_count, 0) DESC, COALESCE(cu.total_revenue, 0) DESC  


****** View: core.v_caption_content_signals_v1 ******
Table of-scheduler-proj:core.v_caption_content_signals_v1

                                     Query                                      
 ------------------------------------------------------------------------------ 
                                                                                
  SELECT                                                                        
    username_std,                                                               
    caption_text,                                                               
    caption_hash,                                                               
    theme_tags,                                                                 
    explicitness as content_rating,                                             
    `of-scheduler-proj.util.word_count`(caption_text) as word_count,            
    `of-scheduler-proj.util.emoji_count`(caption_text) as emoji_count,          
    `of-scheduler-proj.util.ends_with_question`(caption_text) as has_question,  
    `of-scheduler-proj.util.has_cta`(caption_text) as has_cta,                  
    `of-scheduler-proj.util.has_urgency`(caption_text) as has_urgency           
  FROM `of-scheduler-proj.core.caption_dim`                                     
  WHERE caption_text IS NOT NULL                                                
    AND LENGTH(TRIM(caption_text)) > 0                                          
  ORDER BY username_std, caption_hash                                           


****** View: core.v_caption_last_used_v3 ******
Table of-scheduler-proj:core.v_caption_last_used_v3

                         Query                         
 ----------------------------------------------------- 
  SELECT                                               
    username_page,                                     
    caption_hash,                                      
    MAX(sending_ts_utc) AS last_used_ts                
  FROM `of-scheduler-proj.mart.fn_dm_send_facts`(180)  
  GROUP BY 1,2                                         


****** View: core.v_caption_sentiment_v1 ******
Table of-scheduler-proj:core.v_caption_sentiment_v1

                                                                        Query                                                                        
 --------------------------------------------------------------------------------------------------------------------------------------------------- 
  WITH f AS (                                                                                                                                        
    SELECT                                                                                                                                           
      caption_hash,                                                                                                                                  
      caption_text,                                                                                                                                  
      -- Urgency Score: Time-sensitive language                                                                                                      
      CASE                                                                                                                                           
        WHEN REGEXP_CONTAINS(UPPER(caption_text), r'(EXCLUSIVE|LIMITED|NOW|TODAY|TONIGHT|URGENT|HURRY|QUICK|FAST|EXPIRING|EXPIRES)') THEN 3          
        WHEN REGEXP_CONTAINS(UPPER(caption_text), r'(SPECIAL|HOT|READY|WAIT|SOON|ALMOST|ALMOST|ENDING)') THEN 2                                      
        ELSE 1                                                                                                                                       
      END AS urgency_score,                                                                                                                          
                                                                                                                                                     
      -- Intimacy Score: Personal connection language                                                                                                
      CASE                                                                                                                                           
        WHEN REGEXP_CONTAINS(LOWER(caption_text), r'(daddy|baby|love|miss you|thinking of you|dream|imagine|personal|private|just for you)') THEN 3  
        WHEN REGEXP_CONTAINS(LOWER(caption_text), r'(babe|honey|darling|sweetie|cutie|special|close|together)') THEN 2                               
        ELSE 1                                                                                                                                       
      END AS intimacy_score,                                                                                                                         
                                                                                                                                                     
      -- Action Score: Call-to-action intensity                                                                                                      
      CASE                                                                                                                                           
        WHEN REGEXP_CONTAINS(LOWER(caption_text), r'(click|watch|see|check|look|unlock|open|view|download|get|grab)') THEN 3                         
        WHEN REGEXP_CONTAINS(LOWER(caption_text), r'(want|need|ready|come|join|experience|enjoy|try)') THEN 2                                        
        ELSE 1                                                                                                                                       
      END AS action_score,                                                                                                                           
                                                                                                                                                     
      -- Emoji Analysis                                                                                                                              
      ARRAY_LENGTH(REGEXP_EXTRACT_ALL(caption_text, r'[\p{Emoji_Presentation}\p{Extended_Pictographic}]')) AS emoji_count,                           
      LENGTH(caption_text) AS caption_length,                                                                                                        
                                                                                                                                                     
      -- Sexual Explicitness Indicators                                                                                                              
      CASE                                                                                                                                           
        WHEN REGEXP_CONTAINS(LOWER(caption_text), r'(fuck|cock|pussy|ass|cum|dick|wet|hard|horny|sexy|nude|naked)') THEN 3                           
        WHEN REGEXP_CONTAINS(LOWER(caption_text), r'(tease|naughty|dirty|hot|play|touch|kiss|body)') THEN 2                                          
        ELSE 1                                                                                                                                       
      END AS sexual_intensity,                                                                                                                       
                                                                                                                                                     
      -- Question/Engagement Pattern                                                                                                                 
      CASE                                                                                                                                           
        WHEN REGEXP_CONTAINS(caption_text, r'\?') THEN 1                                                                                             
        ELSE 0                                                                                                                                       
      END AS has_question                                                                                                                            
                                                                                                                                                     
    FROM `of-scheduler-proj.raw.caption_library`                                                                                                     
    WHERE caption_text IS NOT NULL                                                                                                                   
  ),                                                                                                                                                 
  normalized AS (                                                                                                                                    
    SELECT *,                                                                                                                                        
      -- Composite Energy Score (0-1 scale)                                                                                                          
      SAFE_DIVIDE(urgency_score + intimacy_score + action_score, 9.0) AS composite_energy,                                                           
                                                                                                                                                     
      -- Emoji Density (emojis per 100 characters)                                                                                                   
      SAFE_MULTIPLY(SAFE_DIVIDE(emoji_count, NULLIF(caption_length, 0)), 100) AS emoji_density_pct,                                                  
                                                                                                                                                     
      -- Sexual intensity normalized                                                                                                                 
      SAFE_DIVIDE(sexual_intensity, 3.0) AS sexual_intensity_norm                                                                                    
                                                                                                                                                     
    FROM f                                                                                                                                           
  )                                                                                                                                                  
  SELECT                                                                                                                                             
    *,                                                                                                                                               
    -- Final engagement prediction score                                                                                                             
    (composite_energy * 0.4 +                                                                                                                        
     LEAST(emoji_density_pct / 10.0, 1.0) * 0.2 +                                                                                                    
     sexual_intensity_norm * 0.3 +                                                                                                                   
     has_question * 0.1) AS engagement_prediction_score                                                                                              
  FROM normalized                                                                                                                                    


****** View: core.v_enhanced_slot_recommendations_next24 ******
Table of-scheduler-proj:core.v_enhanced_slot_recommendations_next24

                                                                                       Query                                                                                        
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
  WITH                                                                                                                                                                              
  -- Base slot recommendations from existing system                                                                                                                                 
  base_slots AS (                                                                                                                                                                   
    SELECT                                                                                                                                                                          
      sr.*,                                                                                                                                                                         
      -- Add DOW for time variance analysis                                                                                                                                         
      MOD(EXTRACT(DAYOFWEEK FROM sr.slot_dt_local) + 5, 7) AS dow_calc                                                                                                              
    FROM `of-scheduler-proj.mart.v_slot_recommendations_next24_v3` sr                                                                                                               
  ),                                                                                                                                                                                
                                                                                                                                                                                    
  -- Volume optimization integration                                                                                                                                                
  volume_enhanced AS (                                                                                                                                                              
    SELECT                                                                                                                                                                          
      bs.*,                                                                                                                                                                         
      vr.recommended_daily_sends,                                                                                                                                                   
      vr.volume_reasoning,                                                                                                                                                          
      vr.recommendation_confidence AS volume_confidence,                                                                                                                            
                                                                                                                                                                                    
      -- Volume-based slot scoring adjustment                                                                                                                                       
      CASE                                                                                                                                                                          
        WHEN vr.recommended_daily_sends >= 8 THEN 1.2  -- High volume pages get boost                                                                                               
        WHEN vr.recommended_daily_sends >= 6 THEN 1.1                                                                                                                               
        WHEN vr.recommended_daily_sends <= 3 THEN 0.9  -- Conservative volume pages                                                                                                 
        ELSE 1.0                                                                                                                                                                    
      END AS volume_score_multiplier                                                                                                                                                
                                                                                                                                                                                    
    FROM base_slots bs                                                                                                                                                              
    LEFT JOIN `of-scheduler-proj.core.v_ppv_volume_recommendations` vr USING (username_page)                                                                                        
  ),                                                                                                                                                                                
                                                                                                                                                                                    
  -- Time variance integration                                                                                                                                                      
  time_variance_enhanced AS (                                                                                                                                                       
    SELECT                                                                                                                                                                          
      ve.*,                                                                                                                                                                         
                                                                                                                                                                                    
      -- Get time variance risk for this page                                                                                                                                       
      COALESCE(tvd.overall_risk_score, 0) AS time_variance_risk,                                                                                                                    
      COALESCE(tvd.risk_level, 'MINIMAL') AS time_variance_level,                                                                                                                   
                                                                                                                                                                                    
      -- Check if this specific hour contributes to robotic patterns                                                                                                                
      CASE                                                                                                                                                                          
        WHEN tvd.most_common_hour = ve.hod AND tvd.most_common_hour_ratio > 0.4                                                                                                     
          THEN 0.7  -- Penalize overused hours                                                                                                                                      
        WHEN tvd.overall_risk_score > 50 AND ve.hod = tvd.most_common_hour                                                                                                          
          THEN 0.8  -- Moderate penalty for high-risk pages                                                                                                                         
        WHEN tvd.overall_risk_score < 20                                                                                                                                            
          THEN 1.1  -- Reward good variance                                                                                                                                         
        ELSE 1.0                                                                                                                                                                    
      END AS time_variance_multiplier                                                                                                                                               
                                                                                                                                                                                    
    FROM volume_enhanced ve                                                                                                                                                         
    LEFT JOIN `of-scheduler-proj.core.v_time_variance_detection` tvd USING (username_page)                                                                                          
  ),                                                                                                                                                                                
                                                                                                                                                                                    
  -- Revenue impact integration                                                                                                                                                     
  revenue_enhanced AS (                                                                                                                                                             
    SELECT                                                                                                                                                                          
      tve.*,                                                                                                                                                                        
                                                                                                                                                                                    
      -- Revenue impact projections                                                                                                                                                 
      rip.projected_revenue_current,                                                                                                                                                
      rip.revenue_lift_vs_historical,                                                                                                                                               
      rip.revenue_opportunity_alt_price,                                                                                                                                            
      rip.total_opportunity_score,                                                                                                                                                  
      rip.projection_confidence,                                                                                                                                                    
      rip.performance_trend,                                                                                                                                                        
                                                                                                                                                                                    
      -- Revenue-based scoring adjustment                                                                                                                                           
      CASE                                                                                                                                                                          
        WHEN rip.total_opportunity_score > 50 THEN 1.3  -- High opportunity slots                                                                                                   
        WHEN rip.total_opportunity_score > 25 THEN 1.15                                                                                                                             
        WHEN rip.total_opportunity_score > 10 THEN 1.05                                                                                                                             
        WHEN rip.revenue_lift_vs_historical < -5 THEN 0.8  -- Negative opportunity                                                                                                  
        ELSE 1.0                                                                                                                                                                    
      END AS revenue_opportunity_multiplier                                                                                                                                         
                                                                                                                                                                                    
    FROM time_variance_enhanced tve                                                                                                                                                 
    LEFT JOIN `of-scheduler-proj.core.v_revenue_impact_projections` rip                                                                                                             
      ON rip.username_page = tve.username_page                                                                                                                                      
      AND rip.slot_dt_local = tve.slot_dt_local                                                                                                                                     
  ),                                                                                                                                                                                
                                                                                                                                                                                    
  -- Calculate enhanced composite scores                                                                                                                                            
  enhanced_scoring AS (                                                                                                                                                             
    SELECT                                                                                                                                                                          
      re.*,                                                                                                                                                                         
                                                                                                                                                                                    
      -- Original slot score (from existing system)                                                                                                                                 
      re.slot_score_base AS original_slot_score,                                                                                                                                    
                                                                                                                                                                                    
      -- Enhanced composite score with all optimizations                                                                                                                            
      re.slot_score_base *                                                                                                                                                          
      re.volume_score_multiplier *                                                                                                                                                  
      re.time_variance_multiplier *                                                                                                                                                 
      re.revenue_opportunity_multiplier AS enhanced_slot_score,                                                                                                                     
                                                                                                                                                                                    
      -- Individual optimization contributions                                                                                                                                      
      re.slot_score_base * (re.volume_score_multiplier - 1) AS volume_contribution,                                                                                                 
      re.slot_score_base * (re.time_variance_multiplier - 1) AS time_variance_contribution,                                                                                         
      re.slot_score_base * (re.revenue_opportunity_multiplier - 1) AS revenue_contribution,                                                                                         
                                                                                                                                                                                    
      -- Total optimization impact                                                                                                                                                  
      (re.volume_score_multiplier * re.time_variance_multiplier * re.revenue_opportunity_multiplier) - 1 AS total_optimization_impact                                               
                                                                                                                                                                                    
    FROM revenue_enhanced re                                                                                                                                                        
  ),                                                                                                                                                                                
                                                                                                                                                                                    
  -- Apply volume constraints and final ranking                                                                                                                                     
  final_recommendations AS (                                                                                                                                                        
    SELECT                                                                                                                                                                          
      es.*,                                                                                                                                                                         
                                                                                                                                                                                    
      -- Rank slots by enhanced score within each page                                                                                                                              
      ROW_NUMBER() OVER (                                                                                                                                                           
        PARTITION BY es.username_page, DATE(es.slot_dt_local)                                                                                                                       
        ORDER BY es.enhanced_slot_score DESC, es.slot_dt_local                                                                                                                      
      ) AS enhanced_daily_rank,                                                                                                                                                     
                                                                                                                                                                                    
      -- Apply volume constraints                                                                                                                                                   
      CASE                                                                                                                                                                          
        WHEN ROW_NUMBER() OVER (                                                                                                                                                    
          PARTITION BY es.username_page, DATE(es.slot_dt_local)                                                                                                                     
          ORDER BY es.enhanced_slot_score DESC, es.slot_dt_local                                                                                                                    
        ) <= COALESCE(es.recommended_daily_sends, 4)                                                                                                                                
        THEN TRUE                                                                                                                                                                   
        ELSE FALSE                                                                                                                                                                  
      END AS within_volume_recommendation                                                                                                                                           
                                                                                                                                                                                    
    FROM enhanced_scoring es                                                                                                                                                        
  )                                                                                                                                                                                 
                                                                                                                                                                                    
  SELECT                                                                                                                                                                            
    fr.username_page,                                                                                                                                                               
    fr.slot_dt_local,                                                                                                                                                               
    FORMAT_DATETIME('%a %b %d, %I:%M %p', fr.slot_dt_local) AS slot_display,                                                                                                        
    fr.dow,                                                                                                                                                                         
    fr.hod,                                                                                                                                                                         
    fr.reco_dm_type,                                                                                                                                                                
    fr.reco_price_usd,                                                                                                                                                              
                                                                                                                                                                                    
    -- Enhanced scoring                                                                                                                                                             
    ROUND(fr.original_slot_score, 4) AS original_score,                                                                                                                             
    ROUND(fr.enhanced_slot_score, 4) AS enhanced_score,                                                                                                                             
    fr.enhanced_daily_rank,                                                                                                                                                         
    fr.within_volume_recommendation,                                                                                                                                                
                                                                                                                                                                                    
    -- Optimization factors                                                                                                                                                         
    fr.volume_score_multiplier,                                                                                                                                                     
    fr.time_variance_multiplier,                                                                                                                                                    
    fr.revenue_opportunity_multiplier,                                                                                                                                              
    ROUND(fr.total_optimization_impact * 100, 1) AS optimization_impact_pct,                                                                                                        
                                                                                                                                                                                    
    -- Volume optimization                                                                                                                                                          
    fr.recommended_daily_sends,                                                                                                                                                     
    fr.volume_reasoning,                                                                                                                                                            
    fr.volume_confidence,                                                                                                                                                           
                                                                                                                                                                                    
    -- Time variance optimization                                                                                                                                                   
    fr.time_variance_risk,                                                                                                                                                          
    fr.time_variance_level,                                                                                                                                                         
                                                                                                                                                                                    
    -- Revenue optimization                                                                                                                                                         
    ROUND(fr.projected_revenue_current, 2) AS projected_revenue,                                                                                                                    
    ROUND(fr.revenue_lift_vs_historical, 2) AS revenue_lift_historical,                                                                                                             
    ROUND(fr.revenue_opportunity_alt_price, 2) AS pricing_opportunity,                                                                                                              
    fr.projection_confidence,                                                                                                                                                       
    fr.performance_trend,                                                                                                                                                           
                                                                                                                                                                                    
    -- Original system fields preserved                                                                                                                                             
    fr.best_ppv_buy_rate,                                                                                                                                                           
    fr.rps_lcb,                                                                                                                                                                     
                                                                                                                                                                                    
    -- Recommendation priority                                                                                                                                                      
    CASE                                                                                                                                                                            
      WHEN fr.enhanced_daily_rank = 1 THEN 'TOP_PRIORITY'                                                                                                                           
      WHEN fr.within_volume_recommendation AND fr.total_optimization_impact > 0.2 THEN 'HIGH_PRIORITY'                                                                              
      WHEN fr.within_volume_recommendation THEN 'RECOMMENDED'                                                                                                                       
      WHEN fr.enhanced_daily_rank <= 8 THEN 'CONSIDER'                                                                                                                              
      ELSE 'LOW_PRIORITY'                                                                                                                                                           
    END AS recommendation_priority,                                                                                                                                                 
                                                                                                                                                                                    
    -- Action items                                                                                                                                                                 
    ARRAY(                                                                                                                                                                          
      SELECT action FROM UNNEST([                                                                                                                                                   
        CASE WHEN fr.time_variance_risk > 50 THEN 'WARNING: High time variance risk - vary send times' END,                                                                         
        CASE WHEN fr.revenue_opportunity_alt_price > 20 THEN CONCAT('OPPORTUNITY: +$', CAST(ROUND(fr.revenue_opportunity_alt_price, 0) AS STRING), ' with different pricing') END,  
        CASE WHEN fr.performance_trend = 'DECLINING' THEN 'CAUTION: Performance declining for this time slot' END,                                                                  
        CASE WHEN fr.volume_confidence = 'VERY_LOW' THEN 'NOTE: Volume recommendation has low confidence' END                                                                       
      ]) AS action                                                                                                                                                                  
      WHERE action IS NOT NULL                                                                                                                                                      
    ) AS action_items,                                                                                                                                                              
                                                                                                                                                                                    
    CURRENT_TIMESTAMP() AS calculated_at                                                                                                                                            
                                                                                                                                                                                    
  FROM final_recommendations fr                                                                                                                                                     
  ORDER BY fr.username_page, fr.enhanced_daily_rank, fr.slot_dt_local                                                                                                               


****** View: core.v_message_facts_by_page ******
Table of-scheduler-proj:core.v_message_facts_by_page

                                      Query                                       
 -------------------------------------------------------------------------------- 
  WITH f AS (                                                                     
    SELECT                                                                        
      m.* EXCEPT(username_std),                                                   
      m.username_std AS username_std_raw,                                         
      COALESCE(m.username_raw, m.username_std) AS src                             
    FROM `of-scheduler-proj.core.message_facts` AS m                              
  ),                                                                              
  resolved AS (                                                                   
    SELECT                                                                        
      f.* EXCEPT(username_std_raw, src),                                          
      COALESCE(r.resolved_username_std, f.username_std_raw) AS username_std       
    FROM f                                                                        
    LEFT JOIN `of-scheduler-proj.core.v_username_resolver` r                      
      ON r.alias_norm = `of-scheduler-proj.util.norm_username`(f.src)             
  )                                                                               
  SELECT                                                                          
    r.*,                                                                          
    COALESCE(p.page_type, 'main') AS page_type,                                   
    CONCAT(r.username_std, '__', COALESCE(p.page_type, 'main')) AS username_page  
  FROM resolved r                                                                 
  LEFT JOIN `of-scheduler-proj.core.page_type_authority` p                        
    ON p.username_std = r.username_std                                            


****** View: core.v_message_facts_by_page_90d ******
Table of-scheduler-proj:core.v_message_facts_by_page_90d

                                   Query                                   
 ------------------------------------------------------------------------- 
  SELECT *                                                                 
  FROM `of-scheduler-proj.core.v_message_facts_by_page`                    
  WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY)  
    AND sending_ts <  CURRENT_TIMESTAMP()                                  


****** View: core.v_new_captions_inflow_v1 ******
Table of-scheduler-proj:core.v_new_captions_inflow_v1

                                                 Query                                                 
 ----------------------------------------------------------------------------------------------------- 
  WITH                                                                                                 
  -- Prioritized source collection                                                                     
  prioritized_sources AS (                                                                             
    -- Priority 1: Caption library upload (if exists and has data)                                     
    SELECT                                                                                             
      s.caption_text,                                                                                  
      s.caption_hash,                                                                                  
      s.last_used_page AS username_page,                                                               
      CURRENT_TIMESTAMP() AS discovered_at,                                                            
      'caption_library_upload' AS src_name,                                                            
      1 as source_priority                                                                             
    FROM `of-scheduler-proj.staging.caption_library_upload` s                                          
    WHERE s.caption_text IS NOT NULL                                                                   
      AND LENGTH(TRIM(s.caption_text)) > 0                                                             
      AND 1=0  -- Disable for now since table may not exist                                            
                                                                                                       
    UNION ALL                                                                                          
                                                                                                       
    -- Priority 2: Gmail ETL normalized (using discovered column names)                                
    SELECT                                                                                             
      n.Message AS caption_text,                                                                       
      n.caption_hash,                                                                                  
      COALESCE(                                                                                        
        REGEXP_EXTRACT(n.username_raw, r'^([^_]+)'),  -- Extract base username                         
        n.username_std                                                                                 
      ) AS username_page,                                                                              
      CURRENT_TIMESTAMP() AS discovered_at,                                                            
      'gmail_etl_normalized' AS src_name,                                                              
      2 as source_priority                                                                             
    FROM `of-scheduler-proj.staging.gmail_etl_normalized` n                                            
    WHERE n.Message IS NOT NULL                                                                        
      AND LENGTH(TRIM(n.Message)) > 0                                                                  
      AND n.loaded_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)                           
  ),                                                                                                   
                                                                                                       
  -- Dedupe by text, keeping highest priority source                                                   
  deduped_sources AS (                                                                                 
    SELECT                                                                                             
      caption_text,                                                                                    
      caption_hash,                                                                                    
      username_page,                                                                                   
      discovered_at,                                                                                   
      src_name                                                                                         
    FROM (                                                                                             
      SELECT *,                                                                                        
        ROW_NUMBER() OVER (                                                                            
          PARTITION BY `of-scheduler-proj.util.canonicalize_caption`(caption_text)                     
          ORDER BY source_priority                                                                     
        ) AS rn                                                                                        
      FROM prioritized_sources                                                                         
    )                                                                                                  
    WHERE rn = 1                                                                                       
  ),                                                                                                   
                                                                                                       
  -- Add canonical hashes and features                                                                 
  canon AS (                                                                                           
    SELECT                                                                                             
      caption_text,                                                                                    
      COALESCE(caption_hash, `of-scheduler-proj.util.caption_hash_v2`(caption_text)) AS caption_hash,  
      `of-scheduler-proj.util.caption_hash_v2`(caption_text) AS caption_hash_v2,                       
      username_page,                                                                                   
      discovered_at,                                                                                   
      src_name,                                                                                        
      -- Feature columns for auditing                                                                  
      `of-scheduler-proj.util.length_bin`(caption_text) AS length_bin,                                 
      `of-scheduler-proj.util.emoji_bin`(caption_text) AS emoji_bin,                                   
      `of-scheduler-proj.util.has_cta`(caption_text) AS has_cta,                                       
      `of-scheduler-proj.util.has_urgency`(caption_text) AS has_urgency,                               
      `of-scheduler-proj.util.ends_with_question`(caption_text) AS ends_with_question                  
    FROM deduped_sources                                                                               
    WHERE caption_text IS NOT NULL                                                                     
      AND LENGTH(TRIM(caption_text)) > 0                                                               
      AND caption_text NOT LIKE '%�%'  -- Mojibake guard                                               
      AND caption_text NOT LIKE '%\ufffd%'  -- Replacement character guard                             
      AND LENGTH(TRIM(caption_text)) >= 3  -- Minimum length filter                                    
      AND LENGTH(TRIM(caption_text)) <= 2000  -- Maximum length filter                                 
  ),                                                                                                   
                                                                                                       
  -- Existing bank entries                                                                             
  bank AS (                                                                                            
    SELECT DISTINCT caption_hash, caption_hash_v2                                                      
    FROM `of-scheduler-proj.raw.caption_library`                                                       
  )                                                                                                    
                                                                                                       
  -- Final output: new captions only                                                                   
  SELECT c.*                                                                                           
  FROM canon c                                                                                         
  LEFT JOIN bank b                                                                                     
    ON b.caption_hash = c.caption_hash                                                                 
    OR b.caption_hash_v2 = c.caption_hash_v2                                                           
  WHERE b.caption_hash IS NULL                                                                         
    AND b.caption_hash_v2 IS NULL                                                                      


****** View: core.v_optimization_dashboard ******
Table of-scheduler-proj:core.v_optimization_dashboard

                                                                       Query                                                                       
 ------------------------------------------------------------------------------------------------------------------------------------------------- 
  SELECT                                                                                                                                           
    -- Volume optimization summary                                                                                                                 
    COUNT(DISTINCT vr.username_page) AS total_pages_with_volume_recs,                                                                              
    ROUND(AVG(vr.recommended_daily_sends), 1) AS avg_recommended_volume,                                                                           
    COUNT(CASE WHEN vr.volume_change_vs_current > 0 THEN 1 END) AS pages_volume_increase,                                                          
    COUNT(CASE WHEN vr.volume_change_vs_current < 0 THEN 1 END) AS pages_volume_decrease,                                                          
                                                                                                                                                   
    -- Time variance summary                                                                                                                       
    COUNT(DISTINCT tv.username_page) AS total_pages_analyzed_variance,                                                                             
    COUNT(CASE WHEN tv.risk_level IN ('CRITICAL', 'HIGH') THEN 1 END) AS high_risk_variance_pages,                                                 
    ROUND(AVG(tv.overall_risk_score), 1) AS avg_variance_risk_score,                                                                               
                                                                                                                                                   
    -- Revenue opportunity summary                                                                                                                 
    COUNT(DISTINCT ri.username_page) AS total_pages_with_revenue_projections,                                                                      
    ROUND(SUM(ri.revenue_lift_vs_historical), 2) AS total_revenue_opportunity_usd,                                                                 
    ROUND(AVG(ri.total_opportunity_score), 2) AS avg_opportunity_score,                                                                            
                                                                                                                                                   
    -- Enhanced recommendations summary                                                                                                            
    COUNT(DISTINCT er.username_page) AS total_pages_enhanced_recommendations,                                                                      
    ROUND(AVG(er.optimization_impact_pct), 1) AS avg_optimization_impact_pct,                                                                      
                                                                                                                                                   
    -- System health assessment                                                                                                                    
    CASE                                                                                                                                           
      WHEN COUNT(CASE WHEN tv.risk_level IN ('CRITICAL', 'HIGH') THEN 1 END) > COUNT(DISTINCT tv.username_page) * 0.3 THEN 'TIME_VARIANCE_CRISIS'  
      WHEN SUM(ri.revenue_lift_vs_historical) > 1000 THEN 'HIGH_REVENUE_OPPORTUNITY'                                                               
      WHEN AVG(er.optimization_impact_pct) > 15 THEN 'SIGNIFICANT_OPTIMIZATION_POTENTIAL'                                                          
      WHEN AVG(tv.overall_risk_score) > 60 THEN 'VARIANCE_ATTENTION_NEEDED'                                                                        
      ELSE 'SYSTEM_HEALTHY'                                                                                                                        
    END AS system_status,                                                                                                                          
                                                                                                                                                   
    -- Quick stats                                                                                                                                 
    CONCAT(                                                                                                                                        
      'Volume: ', CAST(COUNT(DISTINCT vr.username_page) AS STRING), ' pages analyzed, ',                                                           
      'Variance: ', CAST(COUNT(CASE WHEN tv.risk_level IN ('CRITICAL', 'HIGH') THEN 1 END) AS STRING), ' high-risk pages, ',                       
      'Revenue: $', CAST(ROUND(SUM(ri.revenue_lift_vs_historical), 0) AS STRING), ' opportunity'                                                   
    ) AS summary_stats,                                                                                                                            
                                                                                                                                                   
    CURRENT_TIMESTAMP() AS dashboard_updated_at                                                                                                    
                                                                                                                                                   
  FROM `of-scheduler-proj.core.v_ppv_volume_recommendations` vr                                                                                    
  FULL OUTER JOIN `of-scheduler-proj.core.v_time_variance_detection` tv USING (username_page)                                                      
  FULL OUTER JOIN `of-scheduler-proj.core.v_revenue_impact_projections` ri USING (username_page)                                                   
  FULL OUTER JOIN `of-scheduler-proj.core.v_enhanced_slot_recommendations_next24` er USING (username_page)                                         


****** View: core.v_page_engagement_patterns_v1 ******
Table of-scheduler-proj:core.v_page_engagement_patterns_v1

                                                         Query                                                         
 --------------------------------------------------------------------------------------------------------------------- 
  WITH hourly AS (                                                                                                     
    SELECT                                                                                                             
      username_std,                                                                                                    
      EXTRACT(HOUR FROM sending_ts) AS hour,                                                                           
      EXTRACT(DAYOFWEEK FROM sending_ts) AS dow,                                                                       
      AVG(SAFE_DIVIDE(purchased, NULLIF(sent, 0))) AS conversion_rate,                                                 
      AVG(price_usd) AS avg_price,                                                                                     
      AVG(earnings_usd) AS avg_earnings,                                                                               
      STDDEV(earnings_usd) AS earnings_volatility,                                                                     
      COUNT(*) AS n_messages,                                                                                          
      SUM(earnings_usd) AS total_earnings                                                                              
    FROM `of-scheduler-proj.core.message_facts`                                                                        
    WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY)                                            
      AND sending_ts IS NOT NULL                                                                                       
      AND username_std IS NOT NULL                                                                                     
    GROUP BY 1, 2, 3                                                                                                   
    HAVING n_messages >= 3  -- Minimum data for reliability                                                            
  ),                                                                                                                   
  aggregated AS (                                                                                                      
    SELECT                                                                                                             
      username_std,                                                                                                    
      -- Top conversion windows (hour, dow, rate)                                                                      
      ARRAY_AGG(STRUCT(hour, dow, conversion_rate, avg_earnings, n_messages)                                           
                ORDER BY conversion_rate DESC LIMIT 10) AS top_conversion_windows,                                     
                                                                                                                       
      -- Revenue consistency (1 - CV where CV = std/mean)                                                              
      1 - SAFE_DIVIDE(                                                                                                 
        SQRT(AVG(POW(earnings_volatility, 2))),                                                                        
        NULLIF(AVG(avg_earnings), 0)                                                                                   
      ) AS revenue_consistency,                                                                                        
                                                                                                                       
      -- Schedule coverage (fraction of possible hour×dow slots used)                                                  
      SAFE_DIVIDE(COUNT(DISTINCT CONCAT(hour, '-', dow)), 168.0) AS schedule_coverage,                                 
                                                                                                                       
      -- Price elasticity (correlation between price and conversion)                                                   
      CORR(avg_price, conversion_rate) AS price_elasticity,                                                            
                                                                                                                       
      -- Peak performance metrics                                                                                      
      MAX(conversion_rate) AS peak_conversion_rate,                                                                    
      AVG(conversion_rate) AS avg_conversion_rate,                                                                     
      MAX(avg_earnings) AS peak_earnings_per_message,                                                                  
      SUM(total_earnings) AS total_90d_earnings,                                                                       
      SUM(n_messages) AS total_90d_messages                                                                            
                                                                                                                       
    FROM hourly                                                                                                        
    GROUP BY 1                                                                                                         
  )                                                                                                                    
  SELECT                                                                                                               
    *,                                                                                                                 
    -- Performance volatility score                                                                                    
    SAFE_DIVIDE(peak_conversion_rate - avg_conversion_rate, NULLIF(avg_conversion_rate, 0)) AS conversion_volatility,  
                                                                                                                       
    -- Message volume tier                                                                                             
    CASE                                                                                                               
      WHEN total_90d_messages >= 1000 THEN 'HIGH_VOLUME'                                                               
      WHEN total_90d_messages >= 300 THEN 'MEDIUM_VOLUME'                                                              
      WHEN total_90d_messages >= 50 THEN 'LOW_VOLUME'                                                                  
      ELSE 'MINIMAL_VOLUME'                                                                                            
    END AS volume_tier                                                                                                 
  FROM aggregated                                                                                                      


****** View: core.v_page_overrides_all_v1 ******
Table of-scheduler-proj:core.v_page_overrides_all_v1

                                     Query                                      
 ------------------------------------------------------------------------------ 
  WITH manual AS (                                                              
    SELECT username_std, quota_min, quota_max, hour_pool AS hour_pool_override  
    FROM `of-scheduler-proj.core.page_overrides`                                
  ),                                                                            
  learned AS (                                                                  
    SELECT username_std, quota_nudge, hour_pool_nudge, price_mode_bias          
    FROM `of-scheduler-proj.core.page_knobs_learned_v1`                         
  )                                                                             
  SELECT                                                                        
    COALESCE(m.username_std, l.username_std) AS username_std,                   
    m.quota_min, m.quota_max,                                                   
    m.hour_pool_override,                                                       
    l.quota_nudge, l.hour_pool_nudge, l.price_mode_bias                         
  FROM manual m                                                                 
  FULL OUTER JOIN learned l USING (username_std)                                


****** View: core.v_page_paid_final_v1 ******
Table of-scheduler-proj:core.v_page_paid_final_v1

                                          Query                                          
 --------------------------------------------------------------------------------------- 
  WITH p1 AS (                                                                           
    -- Collapse to a single boolean per creator (in case of duplicates)                  
    SELECT                                                                               
      username_std,                                                                      
      MAX(CAST(is_paid AS BOOL)) AS is_paid_flag                                         
    FROM `of-scheduler-proj.core.page_is_paid_v1`                                        
    GROUP BY username_std                                                                
  )                                                                                      
  SELECT                                                                                 
    v.username_page,                                                                     
    v.username_std,                                                                      
    v.page_type,                                                                         
    COALESCE(                                                                            
      p1.is_paid_flag,                                                                   
      CASE WHEN LOWER(v.page_type) IN ('vip','paid','premium') THEN TRUE ELSE FALSE END  
    ) AS is_paid                                                                         
  FROM `of-scheduler-proj.core.v_pages` v                                                
  LEFT JOIN p1 USING (username_std)                                                      


****** View: core.v_page_tier_final_v1 ******
Table of-scheduler-proj:core.v_page_tier_final_v1

                                       Query                                       
 --------------------------------------------------------------------------------- 
  SELECT a.username_std,                                                           
         COALESCE(o.tier_override, a.tier) AS tier_final                           
  FROM `of-scheduler-proj.core.page_active_current` a   -- tier from model feed    
  LEFT JOIN `of-scheduler-proj.core.page_tier_override_v1` o USING (username_std)  


****** View: core.v_pages ******
Table of-scheduler-proj:core.v_pages

                                           Query                                            
 ------------------------------------------------------------------------------------------ 
  SELECT username_std, page_type,                                                           
         CONCAT(username_std, '__', page_type) AS username_page,                            
         decided_as_of                                                                      
  FROM (                                                                                    
    SELECT *,                                                                               
           ROW_NUMBER() OVER (PARTITION BY username_std ORDER BY decided_as_of DESC) AS rn  
    FROM `of-scheduler-proj.core.page_type_authority`                                       
  )                                                                                         
  WHERE rn = 1                                                                              


------------------ ROUTINES ------------------
Listing routines (definitions not extracted):
                 Id                    Routine Type     Language    Creation Time    Last Modified Time   Is Remote  
 ----------------------------------- ----------------- ---------- ----------------- -------------------- ----------- 
  fn_norm                             SCALAR_FUNCTION   SQL        09 Sep 21:52:51   09 Sep 21:52:51      No         
  get_caption_available_time          SCALAR_FUNCTION   SQL        08 Sep 21:32:21   08 Sep 21:32:21      No         
  is_caption_available                SCALAR_FUNCTION   SQL        08 Sep 21:32:20   08 Sep 21:32:20      No         
  sp_onboard_new_pages_v1             PROCEDURE         SQL        09 Sep 16:54:31   09 Sep 16:54:31      No         
  sp_onboarding_expire_and_tier_v1    PROCEDURE         SQL        07 Sep 08:28:05   07 Sep 08:28:05      No         
  sp_update_page_knobs_learned_v1     PROCEDURE         SQL        07 Sep 03:28:20   07 Sep 03:28:20      No         
  sp_update_personalization_weights   PROCEDURE         SQL        07 Sep 03:57:01   07 Sep 03:57:01      No         

==============================================================
DATASET: dashboard
==============================================================

------------------ TABLES ------------------
------------------ VIEWS ------------------
****** View: dashboard.v_ai_recommendation_performance ******
Table of-scheduler-proj:dashboard.v_ai_recommendation_performance

                                                         Query                                                          
 ---------------------------------------------------------------------------------------------------------------------- 
  WITH caption_performance AS (                                                                                         
    SELECT                                                                                                              
      cr.username_page,                                                                                                 
      cr.caption_hash,                                                                                                  
      cr.caption_text,                                                                                                  
      AVG(cr.p_buy_eb) as predicted_purchase_rate,                                                                      
      AVG(cr.score_final) as ai_confidence_score,                                                                       
      COUNT(*) as times_recommended,                                                                                    
      COALESCE(SUM(CAST(mf.sent AS INT64)), 0) as actual_sent,                                                          
      COALESCE(SUM(CAST(mf.purchased AS INT64)), 0) as actual_purchased,                                                
      COALESCE(SAFE_DIVIDE(SUM(CAST(mf.purchased AS INT64)), SUM(CAST(mf.sent AS INT64))), 0) as actual_purchase_rate,  
      COALESCE(SUM(CAST(mf.earnings_usd AS FLOAT64)), 0) as actual_revenue                                              
    FROM `of-scheduler-proj.mart.caption_rank_next24_v3_tbl` cr                                                         
    LEFT JOIN `of-scheduler-proj.core.message_facts` mf                                                                 
      ON cr.username_page = mf.username_std                                                                             
      AND cr.caption_hash = mf.caption_hash                                                                             
      AND DATE(cr.slot_dt_local) = DATE(mf.sending_ts)                                                                  
    WHERE DATE(cr.slot_dt_local) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)                                            
      AND cr.rn = 1                                                                                                     
    GROUP BY 1, 2, 3                                                                                                    
    HAVING actual_sent > 0                                                                                              
  )                                                                                                                     
  SELECT                                                                                                                
    username_page,                                                                                                      
    caption_hash,                                                                                                       
    LEFT(caption_text, 50) as caption_preview,                                                                          
    times_recommended,                                                                                                  
    actual_sent,                                                                                                        
    actual_purchased,                                                                                                   
    ROUND(predicted_purchase_rate * 100, 2) as predicted_purchase_rate_pct,                                             
    ROUND(actual_purchase_rate * 100, 2) as actual_purchase_rate_pct,                                                   
    ROUND(ai_confidence_score, 3) as ai_confidence_score,                                                               
    ROUND(actual_revenue, 2) as actual_revenue,                                                                         
    ABS(predicted_purchase_rate - actual_purchase_rate) as prediction_error,                                            
    CASE                                                                                                                
      WHEN ABS(predicted_purchase_rate - actual_purchase_rate) <= 0.01 THEN 'EXCELLENT'                                 
      WHEN ABS(predicted_purchase_rate - actual_purchase_rate) <= 0.02 THEN 'GOOD'                                      
      WHEN ABS(predicted_purchase_rate - actual_purchase_rate) <= 0.03 THEN 'FAIR'                                      
      ELSE 'POOR'                                                                                                       
    END as prediction_accuracy                                                                                          
  FROM caption_performance                                                                                              
  ORDER BY actual_revenue DESC                                                                                          


****** View: dashboard.v_executive_summary ******
Table of-scheduler-proj:dashboard.v_executive_summary

                                                                       Query                                                                        
 -------------------------------------------------------------------------------------------------------------------------------------------------- 
  WITH current_period AS (                                                                                                                          
    SELECT                                                                                                                                          
      COUNT(DISTINCT username_std) as active_pages,                                                                                                 
      COUNT(DISTINCT DATE(sending_ts)) as active_days,                                                                                              
      COUNT(*) as total_messages,                                                                                                                   
      SUM(CAST(sent AS INT64)) as total_sent,                                                                                                       
      SUM(CAST(purchased AS INT64)) as total_purchased,                                                                                             
      SUM(CAST(earnings_usd AS FLOAT64)) as total_revenue,                                                                                          
      SAFE_DIVIDE(SUM(CAST(purchased AS INT64)), SUM(CAST(sent AS INT64))) as overall_conversion_rate                                               
    FROM `of-scheduler-proj.core.message_facts`                                                                                                     
    WHERE DATE(sending_ts) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)                                                                             
      AND earnings_usd IS NOT NULL                                                                                                                  
  ),                                                                                                                                                
  previous_period AS (                                                                                                                              
    SELECT                                                                                                                                          
      SUM(CAST(earnings_usd AS FLOAT64)) as prev_revenue,                                                                                           
      SAFE_DIVIDE(SUM(CAST(purchased AS INT64)), SUM(CAST(sent AS INT64))) as prev_conversion_rate                                                  
    FROM `of-scheduler-proj.core.message_facts`                                                                                                     
    WHERE DATE(sending_ts) >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY)                                                                             
      AND DATE(sending_ts) < DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)                                                                              
      AND earnings_usd IS NOT NULL                                                                                                                  
  )                                                                                                                                                 
  SELECT                                                                                                                                            
    cp.active_pages,                                                                                                                                
    cp.active_days,                                                                                                                                 
    cp.total_messages,                                                                                                                              
    cp.total_sent,                                                                                                                                  
    cp.total_purchased,                                                                                                                             
    ROUND(cp.total_revenue, 2) as total_revenue,                                                                                                    
    ROUND(cp.overall_conversion_rate * 100, 2) as conversion_rate_pct,                                                                              
    ROUND(cp.total_revenue / cp.active_pages, 2) as revenue_per_page,                                                                               
    ROUND(cp.total_revenue / cp.total_messages, 2) as revenue_per_message,                                                                          
    ROUND(pp.prev_revenue, 2) as prev_period_revenue,                                                                                               
    ROUND(cp.total_revenue - pp.prev_revenue, 2) as revenue_change,                                                                                 
    ROUND(SAFE_DIVIDE(cp.total_revenue - pp.prev_revenue, pp.prev_revenue) * 100, 1) as revenue_growth_pct,                                         
    ROUND((cp.overall_conversion_rate - pp.prev_conversion_rate) * 100, 2) as conversion_rate_change_pts,                                           
    (SELECT COUNT(*) FROM `of-scheduler-proj.mart.caption_rank_next24_v3_tbl` WHERE DATE(slot_dt_local) = CURRENT_DATE()) as ai_predictions_today,  
    (SELECT COUNT(*) FROM `of-scheduler-proj.raw.caption_library`) as total_captions_available,                                                     
    CURRENT_TIMESTAMP() as report_generated_at                                                                                                      
  FROM current_period cp                                                                                                                            
  CROSS JOIN previous_period pp                                                                                                                     


****** View: dashboard.v_page_performance_leaderboard ******
Table of-scheduler-proj:dashboard.v_page_performance_leaderboard

                                                   Query                                                    
 ---------------------------------------------------------------------------------------------------------- 
  WITH page_metrics AS (                                                                                    
    SELECT                                                                                                  
      mf.username_std,                                                                                      
      COALESCE(pso.assigned_scheduler, 'unassigned') as scheduler,                                          
      COUNT(*) as messages_sent,                                                                            
      SUM(CAST(mf.sent AS INT64)) as total_sent,                                                            
      SUM(CAST(mf.viewed AS INT64)) as total_viewed,                                                        
      SUM(CAST(mf.purchased AS INT64)) as total_purchased,                                                  
      SUM(CAST(mf.earnings_usd AS FLOAT64)) as total_revenue,                                               
      AVG(CAST(mf.price_usd AS FLOAT64)) as avg_price,                                                      
      SAFE_DIVIDE(SUM(CAST(mf.viewed AS INT64)), SUM(CAST(mf.sent AS INT64))) as view_rate,                 
      SAFE_DIVIDE(SUM(CAST(mf.purchased AS INT64)), SUM(CAST(mf.sent AS INT64))) as purchase_rate,          
      SAFE_DIVIDE(SUM(CAST(mf.earnings_usd AS FLOAT64)), SUM(CAST(mf.sent AS INT64))) as revenue_per_send,  
      MAX(DATE(mf.sending_ts)) as last_active_date,                                                         
      DATE_DIFF(CURRENT_DATE(), MAX(DATE(mf.sending_ts)), DAY) as days_since_active                         
    FROM `of-scheduler-proj.core.message_facts` mf                                                          
    LEFT JOIN `of-scheduler-proj.core.page_scheduler_override` pso                                          
      ON mf.username_std = pso.username_std                                                                 
    WHERE DATE(mf.sending_ts) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)                                  
      AND mf.earnings_usd IS NOT NULL                                                                       
    GROUP BY 1, 2                                                                                           
    HAVING total_sent > 10                                                                                  
  ),                                                                                                        
  page_ranks AS (                                                                                           
    SELECT *,                                                                                               
      ROW_NUMBER() OVER (ORDER BY total_revenue DESC) as revenue_rank,                                      
      ROW_NUMBER() OVER (ORDER BY purchase_rate DESC) as conversion_rank,                                   
      ROW_NUMBER() OVER (ORDER BY revenue_per_send DESC) as efficiency_rank                                 
    FROM page_metrics                                                                                       
  )                                                                                                         
  SELECT                                                                                                    
    username_std,                                                                                           
    scheduler,                                                                                              
    messages_sent,                                                                                          
    total_sent,                                                                                             
    total_purchased,                                                                                        
    ROUND(total_revenue, 2) as total_revenue,                                                               
    ROUND(avg_price, 2) as avg_price,                                                                       
    ROUND(view_rate * 100, 2) as view_rate_pct,                                                             
    ROUND(purchase_rate * 100, 2) as purchase_rate_pct,                                                     
    ROUND(revenue_per_send, 3) as revenue_per_send,                                                         
    last_active_date,                                                                                       
    days_since_active,                                                                                      
    revenue_rank,                                                                                           
    conversion_rank,                                                                                        
    efficiency_rank,                                                                                        
    CASE                                                                                                    
      WHEN days_since_active > 7 THEN 'INACTIVE'                                                            
      WHEN purchase_rate >= 0.05 AND revenue_per_send >= 0.10 THEN 'EXCELLENT'                              
      WHEN purchase_rate >= 0.03 AND revenue_per_send >= 0.05 THEN 'GOOD'                                   
      WHEN purchase_rate >= 0.01 THEN 'FAIR'                                                                
      ELSE 'POOR'                                                                                           
    END as performance_tier                                                                                 
  FROM page_ranks                                                                                           
  ORDER BY total_revenue DESC                                                                               


****** View: dashboard.v_revenue_overview ******
Table of-scheduler-proj:dashboard.v_revenue_overview

                                                                          Query                                                                          
 ------------------------------------------------------------------------------------------------------------------------------------------------------- 
  WITH daily_metrics AS (                                                                                                                                
    SELECT                                                                                                                                               
      DATE(sending_ts) as date,                                                                                                                          
      COUNT(*) as messages_sent,                                                                                                                         
      SUM(CAST(sent AS INT64)) as total_sent,                                                                                                            
      SUM(CAST(viewed AS INT64)) as total_viewed,                                                                                                        
      SUM(CAST(purchased AS INT64)) as total_purchased,                                                                                                  
      SUM(CAST(earnings_usd AS FLOAT64)) as total_revenue,                                                                                               
      AVG(CAST(price_usd AS FLOAT64)) as avg_price,                                                                                                      
      SAFE_DIVIDE(SUM(CAST(viewed AS INT64)), SUM(CAST(sent AS INT64))) as view_rate,                                                                    
      SAFE_DIVIDE(SUM(CAST(purchased AS INT64)), SUM(CAST(sent AS INT64))) as purchase_rate,                                                             
      SAFE_DIVIDE(SUM(CAST(earnings_usd AS FLOAT64)), SUM(CAST(purchased AS INT64))) as avg_order_value                                                  
    FROM `of-scheduler-proj.core.message_facts`                                                                                                          
    WHERE DATE(sending_ts) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)                                                                                  
      AND earnings_usd IS NOT NULL                                                                                                                       
    GROUP BY 1                                                                                                                                           
  )                                                                                                                                                      
  SELECT                                                                                                                                                 
    date,                                                                                                                                                
    messages_sent,                                                                                                                                       
    total_sent,                                                                                                                                          
    total_viewed,                                                                                                                                        
    total_purchased,                                                                                                                                     
    ROUND(total_revenue, 2) as total_revenue,                                                                                                            
    ROUND(avg_price, 2) as avg_price,                                                                                                                    
    ROUND(view_rate * 100, 2) as view_rate_pct,                                                                                                          
    ROUND(purchase_rate * 100, 2) as purchase_rate_pct,                                                                                                  
    ROUND(avg_order_value, 2) as avg_order_value,                                                                                                        
    LAG(total_revenue) OVER (ORDER BY date) as prev_day_revenue,                                                                                         
    ROUND(total_revenue - LAG(total_revenue) OVER (ORDER BY date), 2) as revenue_change,                                                                 
    ROUND(SAFE_DIVIDE(total_revenue - LAG(total_revenue) OVER (ORDER BY date), LAG(total_revenue) OVER (ORDER BY date)) * 100, 1) as revenue_growth_pct  
  FROM daily_metrics                                                                                                                                     
  ORDER BY date DESC                                                                                                                                     


****** View: dashboard.v_scheduler_performance ******
Table of-scheduler-proj:dashboard.v_scheduler_performance

                                                     Query                                                     
 ------------------------------------------------------------------------------------------------------------- 
  WITH scheduler_stats AS (                                                                                    
    SELECT                                                                                                     
      COALESCE(pso.assigned_scheduler, 'unassigned') as scheduler_name,                                        
      COUNT(DISTINCT mf.username_std) as pages_managed,                                                        
      COUNT(*) as messages_sent,                                                                               
      SUM(CAST(mf.sent AS INT64)) as total_sent,                                                               
      SUM(CAST(mf.purchased AS INT64)) as total_purchased,                                                     
      SUM(CAST(mf.earnings_usd AS FLOAT64)) as total_revenue,                                                  
      SAFE_DIVIDE(SUM(CAST(mf.purchased AS INT64)), SUM(CAST(mf.sent AS INT64))) as conversion_rate,           
      SAFE_DIVIDE(SUM(CAST(mf.earnings_usd AS FLOAT64)), COUNT(*)) as revenue_per_message,                     
      SAFE_DIVIDE(SUM(CAST(mf.earnings_usd AS FLOAT64)), COUNT(DISTINCT mf.username_std)) as revenue_per_page  
    FROM `of-scheduler-proj.core.message_facts` mf                                                             
    LEFT JOIN `of-scheduler-proj.core.page_scheduler_override` pso                                             
      ON mf.username_std = pso.username_std                                                                    
    WHERE DATE(mf.sending_ts) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)                                     
      AND mf.earnings_usd IS NOT NULL                                                                          
    GROUP BY 1                                                                                                 
  ),                                                                                                           
  scheduler_ranks AS (                                                                                         
    SELECT *,                                                                                                  
      ROW_NUMBER() OVER (ORDER BY total_revenue DESC) as revenue_rank,                                         
      ROW_NUMBER() OVER (ORDER BY conversion_rate DESC) as conversion_rank,                                    
      ROW_NUMBER() OVER (ORDER BY revenue_per_message DESC) as efficiency_rank                                 
    FROM scheduler_stats                                                                                       
  )                                                                                                            
  SELECT                                                                                                       
    scheduler_name,                                                                                            
    pages_managed,                                                                                             
    messages_sent,                                                                                             
    total_sent,                                                                                                
    total_purchased,                                                                                           
    ROUND(total_revenue, 2) as total_revenue,                                                                  
    ROUND(conversion_rate * 100, 2) as conversion_rate_pct,                                                    
    ROUND(revenue_per_message, 2) as revenue_per_message,                                                      
    ROUND(revenue_per_page, 2) as revenue_per_page,                                                            
    revenue_rank,                                                                                              
    conversion_rank,                                                                                           
    efficiency_rank,                                                                                           
    ROUND((revenue_rank * 0.5 + conversion_rank * 0.3 + efficiency_rank * 0.2), 1) as performance_score        
  FROM scheduler_ranks                                                                                         
  ORDER BY total_revenue DESC                                                                                  


------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: layer_01_raw
==============================================================

------------------ TABLES ------------------
------------------ VIEWS ------------------
------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: layer_02_staging
==============================================================

------------------ TABLES ------------------
****** Table: layer_02_staging.gmail_events_staging ******
[{"name":"ingestion_run_id","type":"STRING","mode":"REQUIRED"},{"name":"ingested_at","type":"TIMESTAMP","mode":"REQUIRED"},{"name":"ingestion_date","type":"DATE","mode":"REQUIRED"},{"name":"message_id","type":"STRING","mode":"REQUIRED"},{"name":"source_file","type":"STRING","mode":"REQUIRED"},{"name":"Message","type":"STRING"},{"name":"Sending_time","type":"STRING"},{"name":"Sender","type":"STRING"},{"name":"Price","type":"STRING"},{"name":"Sent","type":"INTEGER"},{"name":"Viewed","type":"INTEGER"},{"name":"Purchased","type":"INTEGER"},{"name":"Earnings","type":"STRING"},{"name":"message_sent_ts","type":"TIMESTAMP"},{"name":"message_sent_date","type":"DATE"}]

****** Table: layer_02_staging.stg_message_events ******
[{"name":"message_event_id","type":"STRING"},{"name":"caption_hash","type":"STRING"},{"name":"username_std","type":"STRING"},{"name":"sending_ts","type":"TIMESTAMP"},{"name":"event_date","type":"DATE"},{"name":"messages_sent","type":"INTEGER"},{"name":"messages_viewed","type":"INTEGER"},{"name":"messages_purchased","type":"INTEGER"},{"name":"price_usd","type":"NUMERIC"},{"name":"revenue_usd","type":"NUMERIC"},{"name":"view_rate","type":"FLOAT"},{"name":"purchase_rate","type":"FLOAT"},{"name":"revenue_per_send","type":"NUMERIC"},{"name":"hour_utc","type":"INTEGER"},{"name":"day_of_week","type":"INTEGER"},{"name":"year_month","type":"STRING"},{"name":"price_tier","type":"STRING"},{"name":"send_size_category","type":"STRING"},{"name":"scheduler_code","type":"STRING"},{"name":"campaign_id","type":"INTEGER"},{"name":"quality_status","type":"STRING"},{"name":"source_table","type":"STRING"},{"name":"source_date","type":"DATE"},{"name":"staging_timestamp","type":"TIMESTAMP"}]

------------------ VIEWS ------------------
------------------ ROUTINES ------------------
Listing routines (definitions not extracted):
              Id                    Routine Type        Language    Creation Time    Last Modified Time   Is Remote  
 ----------------------------- ----------------------- ---------- ----------------- -------------------- ----------- 
  fn_gmail_events_last_n_days   TABLE_VALUED_FUNCTION   SQL        11 Sep 20:32:57   11 Sep 20:32:57      No         
  fn_gmail_events_normalized    TABLE_VALUED_FUNCTION   SQL        11 Sep 20:03:26   11 Sep 20:03:26      No         

==============================================================
DATASET: layer_03_foundation
==============================================================

------------------ TABLES ------------------
****** Table: layer_03_foundation.dim_caption ******
[{"name":"caption_key","type":"STRING"},{"name":"caption_id","type":"STRING"},{"name":"caption_hash","type":"STRING"},{"name":"caption_text","type":"STRING"},{"name":"caption_category","type":"STRING"},{"name":"content_tags","type":"STRING","mode":"REPEATED"},{"name":"explicitness_level","type":"INTEGER"},{"name":"creator_username","type":"STRING"},{"name":"creator_page_type","type":"STRING"},{"name":"creator_page_state","type":"STRING"},{"name":"username_page","type":"STRING"},{"name":"caption_length","type":"INTEGER"},{"name":"tag_count","type":"INTEGER"},{"name":"is_active","type":"BOOLEAN"},{"name":"created_timestamp","type":"TIMESTAMP"},{"name":"valid_from","type":"TIMESTAMP"},{"name":"valid_to","type":"TIMESTAMP"},{"name":"etl_source","type":"STRING"},{"name":"etl_timestamp","type":"TIMESTAMP"}]

****** Table: layer_03_foundation.dim_creator ******
[{"name":"creator_key","type":"STRING"},{"name":"username","type":"STRING"},{"name":"account_type","type":"STRING"},{"name":"page_classifications","type":"RECORD","fields":[{"name":"primary_type","type":"STRING"},{"name":"secondary_types","type":"STRING","mode":"REPEATED"},{"name":"confidence_score","type":"FLOAT"},{"name":"classification_date","type":"DATE"}]},{"name":"performance_metrics","type":"RECORD","fields":[{"name":"performance_segment","type":"STRING"},{"name":"avg_daily_revenue","type":"NUMERIC"},{"name":"revenue_volatility","type":"FLOAT"},{"name":"active_days","type":"INTEGER"}]},{"name":"account_status","type":"STRING"},{"name":"scheduler_info","type":"RECORD","fields":[{"name":"scheduler_code","type":"STRING"},{"name":"scheduler_email","type":"STRING"},{"name":"assignment_date","type":"DATE"}]},{"name":"created_date","type":"DATE"},{"name":"last_active_date","type":"DATE"},{"name":"valid_from","type":"TIMESTAMP"},{"name":"valid_to","type":"TIMESTAMP"},{"name":"is_current_record","type":"BOOLEAN"},{"name":"etl_source","type":"STRING"},{"name":"etl_timestamp","type":"TIMESTAMP"}]

****** Table: layer_03_foundation.fact_gmail_message_send ******
[{"name":"message_send_key","type":"STRING","mode":"REQUIRED"},{"name":"caption_hash","type":"STRING"},{"name":"caption_text","type":"STRING"},{"name":"sender","type":"STRING"},{"name":"username_std","type":"STRING"},{"name":"message_sent_ts","type":"TIMESTAMP"},{"name":"message_sent_date","type":"DATE"},{"name":"price_usd","type":"NUMERIC"},{"name":"revenue_usd","type":"NUMERIC"},{"name":"sent_count","type":"INTEGER"},{"name":"viewed_count","type":"INTEGER"},{"name":"purchased_count","type":"INTEGER"},{"name":"view_rate","type":"FLOAT"},{"name":"purchase_rate","type":"FLOAT"},{"name":"purchase_given_view","type":"FLOAT"},{"name":"revenue_per_send","type":"NUMERIC"},{"name":"price_tier","type":"STRING"},{"name":"send_size_category","type":"STRING"},{"name":"message_id","type":"STRING"},{"name":"source_file","type":"STRING"},{"name":"ingestion_run_id","type":"STRING"},{"name":"ingested_at","type":"TIMESTAMP"},{"name":"last_updated_at","type":"TIMESTAMP"}]

****** Table: layer_03_foundation.fact_message_send ******
[{"name":"message_send_key","type":"STRING"},{"name":"caption_key","type":"STRING"},{"name":"creator_key","type":"STRING"},{"name":"send_timestamp","type":"TIMESTAMP"},{"name":"send_date","type":"DATE"},{"name":"time_of_day_utc","type":"INTEGER"},{"name":"day_of_week","type":"INTEGER"},{"name":"week_of_year","type":"INTEGER"},{"name":"month_of_year","type":"INTEGER"},{"name":"messages_sent","type":"INTEGER"},{"name":"messages_viewed","type":"INTEGER"},{"name":"messages_purchased","type":"INTEGER"},{"name":"view_rate","type":"FLOAT"},{"name":"purchase_rate","type":"FLOAT"},{"name":"conversion_rate","type":"FLOAT"},{"name":"price_usd","type":"NUMERIC"},{"name":"gross_revenue_usd","type":"NUMERIC"},{"name":"net_revenue_usd","type":"NUMERIC"},{"name":"revenue_per_send","type":"NUMERIC"},{"name":"revenue_per_purchase","type":"NUMERIC"},{"name":"response_metrics","type":"RECORD","fields":[{"name":"time_to_first_view_seconds","type":"INTEGER"},{"name":"time_to_first_purchase_seconds","type":"INTEGER"},{"name":"response_category","type":"STRING"},{"name":"bounce_rate","type":"FLOAT"}]},{"name":"scheduler_code","type":"STRING"},{"name":"send_type","type":"STRING"},{"name":"campaign_id","type":"INTEGER"},{"name":"quality_flag","type":"STRING"},{"name":"etl_source","type":"STRING"},{"name":"etl_timestamp","type":"TIMESTAMP"}]

------------------ VIEWS ------------------
------------------ ROUTINES ------------------
Listing routines (definitions not extracted):
                 Id                   Routine Type   Language    Creation Time    Last Modified Time   Is Remote  
 ----------------------------------- -------------- ---------- ----------------- -------------------- ----------- 
  sp_upsert_fact_gmail_message_send   PROCEDURE      SQL        11 Sep 20:10:44   11 Sep 20:10:44      No         

==============================================================
DATASET: layer_04_semantic
==============================================================

------------------ TABLES ------------------
****** Table: layer_04_semantic.caption_performance_daily ******
[{"name":"metric_date","type":"DATE"},{"name":"caption_id","type":"STRING"},{"name":"caption_text","type":"STRING"},{"name":"caption_category","type":"STRING"},{"name":"creator_username","type":"STRING"},{"name":"creator_page_type","type":"STRING"},{"name":"username_page","type":"STRING"},{"name":"send_count","type":"INTEGER"},{"name":"total_messages_sent","type":"INTEGER"},{"name":"total_messages_viewed","type":"INTEGER"},{"name":"total_messages_purchased","type":"INTEGER"},{"name":"total_revenue","type":"NUMERIC"},{"name":"avg_price","type":"NUMERIC"},{"name":"view_rate","type":"FLOAT"},{"name":"purchase_rate","type":"FLOAT"},{"name":"revenue_per_send","type":"NUMERIC"},{"name":"median_rps","type":"NUMERIC"},{"name":"p75_rps","type":"NUMERIC"},{"name":"p25_rps","type":"NUMERIC"},{"name":"rps_7d_avg","type":"NUMERIC"},{"name":"purchase_rate_7d_avg","type":"FLOAT"},{"name":"rps_30d_avg","type":"NUMERIC"},{"name":"rps_trend_slope","type":"NUMERIC"},{"name":"stability_score","type":"NUMERIC"},{"name":"rps_percentile_by_creator","type":"FLOAT"},{"name":"rps_percentile_by_category","type":"FLOAT"},{"name":"days_since_last_use","type":"INTEGER"},{"name":"hourly_performance","type":"RECORD","mode":"REPEATED","fields":[{"name":"hour","type":"INTEGER"},{"name":"sends","type":"INTEGER"},{"name":"rps","type":"NUMERIC"}]},{"name":"performance_tier","type":"STRING"},{"name":"computed_at","type":"TIMESTAMP"}]

------------------ VIEWS ------------------
****** View: layer_04_semantic.v_page_behavior_28d ******
Table of-scheduler-proj:layer_04_semantic.v_page_behavior_28d

                                                       Query                                                        
 ------------------------------------------------------------------------------------------------------------------ 
  WITH recent AS (                                                                                                  
    SELECT                                                                                                          
      username_std AS page_key,                                                                                     
      SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(SUM(messages_sent), 0)) AS rps_28d, -- ratio-of-sums    
      SAFE_DIVIDE(SUM(messages_purchased), NULLIF(SUM(messages_sent), 0)) AS ppv_conversion_rate, -- ratio-of-sums  
      COUNT(DISTINCT event_date) AS active_days                                                                     
    FROM `of-scheduler-proj.layer_02_staging.stg_message_events`                                                    
    WHERE event_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 28 DAY) AND CURRENT_DATE('UTC')                 
    GROUP BY 1                                                                                                      
  ),                                                                                                                
  prior AS (                                                                                                        
    SELECT                                                                                                          
      username_std AS page_key,                                                                                     
      SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(SUM(messages_sent), 0)) AS rps_prior_28d                
    FROM `of-scheduler-proj.layer_02_staging.stg_message_events`                                                    
    WHERE event_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 56 DAY)                                         
                        AND DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 29 DAY)                                          
    GROUP BY 1                                                                                                      
  ),                                                                                                                
  night_activity AS (                                                                                               
    SELECT                                                                                                          
      username_std AS page_key,                                                                                     
      SUM(CASE WHEN hour_utc BETWEEN 20 AND 23 OR hour_utc BETWEEN 0 AND 2                                          
               THEN CAST(revenue_usd AS FLOAT64) ELSE 0 END) AS night_revenue,                                      
      SUM(CAST(revenue_usd AS FLOAT64)) AS total_revenue                                                            
    FROM `of-scheduler-proj.layer_02_staging.stg_message_events`                                                    
    WHERE event_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 28 DAY) AND CURRENT_DATE('UTC')                 
    GROUP BY 1                                                                                                      
  )                                                                                                                 
  SELECT                                                                                                            
    r.page_key,                                                                                                     
    r.rps_28d,                                                                                                      
    r.ppv_conversion_rate,                                                                                          
    r.active_days,                                                                                                  
    SAFE_DIVIDE(r.rps_28d - p.rps_prior_28d, NULLIF(p.rps_prior_28d, 0)) AS or_slump_pct,                           
    SAFE_DIVIDE(n.night_revenue, NULLIF(n.total_revenue, 0)) > 0.35 AS night_owl_idx,                               
    0.0 AS cohort_currency,  -- placeholder                                                                         
    0.0 AS refund_rate       -- placeholder                                                                         
  FROM recent r                                                                                                     
  LEFT JOIN prior p USING (page_key)                                                                                
  LEFT JOIN night_activity n USING (page_key)                                                                       


****** View: layer_04_semantic.v_page_dow_hod_profile_90d ******
Table of-scheduler-proj:layer_04_semantic.v_page_dow_hod_profile_90d

                                                        Query                                                        
 ------------------------------------------------------------------------------------------------------------------- 
  WITH base AS (                                                                                                     
    SELECT                                                                                                           
      username_std AS page_key,                                                                                      
      EXTRACT(DAYOFWEEK FROM event_date) AS dow_utc,                                                                 
      hour_utc,                                                                                                      
      SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(SUM(messages_sent), 0)) AS rps_actual, -- ratio-of-sums  
      COUNT(DISTINCT event_date) AS sample_days                                                                      
    FROM `of-scheduler-proj.layer_02_staging.stg_message_events`                                                     
    WHERE event_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 90 DAY) AND CURRENT_DATE('UTC')                  
    GROUP BY 1,2,3                                                                                                   
  ),                                                                                                                 
  avg_rps AS (                                                                                                       
    SELECT page_key, AVG(rps_actual) AS avg_rps_page                                                                 
    FROM base                                                                                                        
    GROUP BY 1                                                                                                       
  )                                                                                                                  
  SELECT                                                                                                             
    b.page_key, b.dow_utc, b.hour_utc, b.rps_actual,                                                                 
    SAFE_DIVIDE(b.rps_actual, NULLIF(a.avg_rps_page, 0)) AS rps_lift,                                                
    b.sample_days,                                                                                                   
    RANK() OVER (PARTITION BY b.page_key, b.dow_utc ORDER BY b.rps_actual DESC) AS hour_rank_in_day                  
  FROM base b                                                                                                        
  JOIN avg_rps a USING (page_key)                                                                                    


****** View: layer_04_semantic.v_page_intensity_7d ******
Table of-scheduler-proj:layer_04_semantic.v_page_intensity_7d

                                                                 Query                                                                  
 -------------------------------------------------------------------------------------------------------------------------------------- 
  WITH base AS (                                                                                                                        
    SELECT                                                                                                                              
      username_std AS page_key,                                                                                                         
      SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(SUM(messages_sent), 0)) AS rps_7d, -- ratio-of-sums                         
      SUM(CAST(revenue_usd AS FLOAT64)) AS total_earnings_7d,                                                                           
      SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(SUM(messages_purchased), 0)) AS avg_spend_per_txn,                          
      -- proxies until fan-level exists                                                                                                 
      SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(COUNT(DISTINCT CONCAT(username_std, event_date)), 0)) AS avg_earn_per_fan,  
      COUNT(DISTINCT event_date) AS active_fans,                                                                                        
      0.7 AS renew_on_pct -- placeholder                                                                                                
    FROM `of-scheduler-proj.layer_02_staging.stg_message_events`                                                                        
    WHERE event_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 7 DAY) AND CURRENT_DATE('UTC')                                      
    GROUP BY 1                                                                                                                          
  )                                                                                                                                     
  SELECT                                                                                                                                
    page_key, rps_7d, total_earnings_7d, avg_spend_per_txn, avg_earn_per_fan, active_fans, renew_on_pct,                                
    (0.3 * SAFE.LN(1 + total_earnings_7d)                                                                                               
     + 0.2 * SAFE.LN(1 + avg_spend_per_txn)                                                                                             
     + 0.2 * SAFE.LN(1 + avg_earn_per_fan)                                                                                              
     + 0.2 * renew_on_pct                                                                                                               
     + 0.1 * SAFE.LN(1 + active_fans)) AS intensity_score,                                                                              
    CASE                                                                                                                                
      WHEN (0.3 * SAFE.LN(1 + total_earnings_7d)                                                                                        
          + 0.2 * SAFE.LN(1 + avg_spend_per_txn)                                                                                        
          + 0.2 * SAFE.LN(1 + avg_earn_per_fan)                                                                                         
          + 0.2 * renew_on_pct                                                                                                          
          + 0.1 * SAFE.LN(1 + active_fans)) > 5.0 THEN 'high'                                                                           
      WHEN (0.3 * SAFE.LN(1 + total_earnings_7d)                                                                                        
          + 0.2 * SAFE.LN(1 + avg_spend_per_txn)                                                                                        
          + 0.2 * SAFE.LN(1 + avg_earn_per_fan)                                                                                         
          + 0.2 * renew_on_pct                                                                                                          
          + 0.1 * SAFE.LN(1 + active_fans)) > 3.0 THEN 'medium'                                                                         
      ELSE 'low'                                                                                                                        
    END AS recommended_tier                                                                                                             
  FROM base                                                                                                                             


------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: layer_05_ml
==============================================================

------------------ TABLES ------------------
****** Table: layer_05_ml.feature_store ******
[{"name":"caption_id","type":"STRING"},{"name":"creator_username","type":"STRING"},{"name":"creator_page_type","type":"STRING"},{"name":"username_page","type":"STRING"},{"name":"caption_category","type":"STRING"},{"name":"performance_features","type":"RECORD","fields":[{"name":"rps_30d","type":"FLOAT"},{"name":"rps_weighted","type":"FLOAT"},{"name":"rps_smoothed","type":"FLOAT"},{"name":"purchase_rate_30d","type":"FLOAT"},{"name":"purchase_rate_smoothed","type":"FLOAT"},{"name":"revenue_30d","type":"FLOAT"},{"name":"sends_30d","type":"INTEGER"},{"name":"trend_slope","type":"FLOAT"},{"name":"stability_score","type":"FLOAT"},{"name":"confidence_score","type":"FLOAT"}]},{"name":"statistical_features","type":"RECORD","fields":[{"name":"median_rps","type":"FLOAT"},{"name":"p75_rps","type":"FLOAT"},{"name":"p25_rps","type":"FLOAT"},{"name":"rps_stddev","type":"FLOAT"},{"name":"iqr","type":"FLOAT"},{"name":"coefficient_variation","type":"FLOAT"}]},{"name":"exploration_features","type":"RECORD","fields":[{"name":"ucb_bonus","type":"FLOAT"},{"name":"exploration_temperature","type":"FLOAT"},{"name":"novelty_bonus","type":"FLOAT"},{"name":"smoothing_weight","type":"FLOAT"}]},{"name":"temporal_features","type":"RECORD","fields":[{"name":"best_hour","type":"INTEGER"},{"name":"best_hour_rps","type":"FLOAT"},{"name":"best_day_of_week","type":"INTEGER"},{"name":"hours_since_use","type":"INTEGER"},{"name":"last_used_timestamp","type":"TIMESTAMP"},{"name":"active_days_30d","type":"INTEGER"}]},{"name":"cooldown_features","type":"RECORD","fields":[{"name":"base_cooldown_hours","type":"FLOAT"},{"name":"fatigue_score","type":"FLOAT"},{"name":"is_eligible","type":"BOOLEAN"}]},{"name":"composite_scores","type":"RECORD","fields":[{"name":"base_score","type":"FLOAT"},{"name":"exploration_score","type":"FLOAT"},{"name":"rps_percentile","type":"FLOAT"},{"name":"category_percentile","type":"FLOAT"}]},{"name":"computed_at","type":"TIMESTAMP"},{"name":"computed_date","type":"DATE"}]

------------------ VIEWS ------------------
****** View: layer_05_ml.feature_store_ext ******
Table of-scheduler-proj:layer_05_ml.feature_store_ext

                                            Query                                             
 -------------------------------------------------------------------------------------------- 
  WITH latest_features AS (                                                                   
    SELECT                                                                                    
      username_page,                                                                          
      caption_id,                                                                             
      computed_date,                                                                          
      performance_features,                                                                   
      statistical_features,                                                                   
      exploration_features,                                                                   
      temporal_features,                                                                      
      cooldown_features,                                                                      
      composite_scores,                                                                       
      RANK() OVER (PARTITION BY username_page, caption_id ORDER BY computed_date DESC) AS rn  
    FROM `of-scheduler-proj.layer_05_ml.feature_store`                                        
    WHERE computed_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)                           
  ),                                                                                          
  behavior AS (                                                                               
    SELECT * FROM `of-scheduler-proj.layer_04_semantic.v_page_behavior_28d`                   
  ),                                                                                          
  intensity AS (                                                                              
    SELECT * FROM `of-scheduler-proj.layer_04_semantic.v_page_intensity_7d`                   
  )                                                                                           
  SELECT                                                                                      
    f.username_page,                                                                          
    f.caption_id,                                                                             
    f.computed_date,                                                                          
    f.performance_features,                                                                   
    f.statistical_features,                                                                   
    f.exploration_features,                                                                   
    f.temporal_features,                                                                      
    f.cooldown_features,                                                                      
    f.composite_scores,                                                                       
    COALESCE(b.or_slump_pct * 0.5, 0.0) AS scam_risk_score,                                   
    b.night_owl_idx,                                                                          
    CASE                                                                                      
      WHEN i.avg_spend_per_txn > 50 THEN 'premium'                                            
      WHEN i.avg_spend_per_txn > 20 THEN 'standard'                                           
      ELSE 'budget'                                                                           
    END AS price_stance_bucket,                                                               
    0 AS family_recent_uses,  -- Placeholder                                                  
    0 AS cross_page_usage,  -- Placeholder                                                    
    i.renew_on_pct                                                                            
  FROM latest_features f                                                                      
  LEFT JOIN behavior b ON f.username_page = b.page_key                                        
  LEFT JOIN intensity i ON f.username_page = i.page_key                                       
  WHERE f.rn = 1                                                                              


****** View: layer_05_ml.ml_ranker ******
Table of-scheduler-proj:layer_05_ml.ml_ranker

                                                       Query                                                        
 ------------------------------------------------------------------------------------------------------------------ 
  WITH schedule_slots AS (                                                                                          
    -- Generate schedule slots (next 24 hours)                                                                      
    SELECT                                                                                                          
      username_page,                                                                                                
      slot_timestamp,                                                                                               
      DATE(slot_timestamp) AS slot_date,                                                                            
      EXTRACT(HOUR FROM slot_timestamp) AS slot_hour,                                                               
      EXTRACT(DAYOFWEEK FROM slot_timestamp) AS slot_dow                                                            
    FROM (                                                                                                          
      SELECT DISTINCT username_page                                                                                 
      FROM `of-scheduler-proj.layer_05_ml.feature_store`                                                            
      WHERE computed_date = CURRENT_DATE()                                                                          
    ) u                                                                                                             
    CROSS JOIN (                                                                                                    
      SELECT timestamp AS slot_timestamp                                                                            
      FROM UNNEST(                                                                                                  
        GENERATE_TIMESTAMP_ARRAY(                                                                                   
          CURRENT_TIMESTAMP(),                                                                                      
          TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 24 HOUR),                                                     
          INTERVAL 1 HOUR                                                                                           
        )                                                                                                           
      ) AS timestamp                                                                                                
    )                                                                                                               
  ),                                                                                                                
                                                                                                                    
  config AS (                                                                                                       
    -- Get ML configuration (will be replaced with config table)                                                    
    SELECT                                                                                                          
      'active' AS page_state,                                                                                       
      0.4 AS w_performance,                                                                                         
      0.2 AS w_exploration,                                                                                         
      0.2 AS w_recency,                                                                                             
      0.2 AS w_stability,                                                                                           
      10 AS epsilon_percent,  -- 10% random exploration                                                             
      2.0 AS ucb_c,           -- UCB exploration constant                                                           
      6 AS min_cooldown_hours,                                                                                      
      0.8 AS fatigue_threshold                                                                                      
  ),                                                                                                                
                                                                                                                    
  eligible_captions AS (                                                                                            
    -- Get eligible captions with features                                                                          
    SELECT                                                                                                          
      fs.*,                                                                                                         
      ss.slot_timestamp,                                                                                            
      ss.slot_date,                                                                                                 
      ss.slot_hour,                                                                                                 
      ss.slot_dow,                                                                                                  
      cfg.*                                                                                                         
    FROM `of-scheduler-proj.layer_05_ml.feature_store` fs                                                           
    JOIN schedule_slots ss                                                                                          
      ON fs.username_page = ss.username_page                                                                        
    CROSS JOIN config cfg                                                                                           
    WHERE fs.computed_date = CURRENT_DATE()                                                                         
      AND fs.cooldown_features.is_eligible = TRUE                                                                   
  ),                                                                                                                
                                                                                                                    
  scored_captions AS (                                                                                              
    SELECT                                                                                                          
      username_page,                                                                                                
      caption_id,                                                                                                   
      slot_timestamp,                                                                                               
      slot_date,                                                                                                    
      slot_hour,                                                                                                    
                                                                                                                    
      -- Component scores                                                                                           
      composite_scores.rps_percentile AS performance_score,                                                         
      exploration_features.ucb_bonus * ucb_c AS exploration_score,                                                  
      EXP(-0.1 * temporal_features.hours_since_use / 24) AS recency_score,                                          
      performance_features.stability_score AS stability_score,                                                      
                                                                                                                    
      -- Weighted combination                                                                                       
      (                                                                                                             
        w_performance * composite_scores.rps_percentile +                                                           
        w_exploration * exploration_features.ucb_bonus * ucb_c +                                                    
        w_recency * EXP(-0.1 * temporal_features.hours_since_use / 24) +                                            
        w_stability * performance_features.stability_score                                                          
      ) AS base_score,                                                                                              
                                                                                                                    
      -- Apply epsilon-greedy exploration                                                                           
      CASE                                                                                                          
        -- Use hash for deterministic randomization                                                                 
        WHEN MOD(ABS(FARM_FINGERPRINT(CONCAT(caption_id, CAST(slot_timestamp AS STRING)))), 100) < epsilon_percent  
        THEN RAND()  -- Pure random for exploration                                                                 
        ELSE (                                                                                                      
          w_performance * composite_scores.rps_percentile +                                                         
          w_exploration * exploration_features.ucb_bonus * ucb_c +                                                  
          w_recency * EXP(-0.1 * temporal_features.hours_since_use / 24) +                                          
          w_stability * performance_features.stability_score                                                        
        )                                                                                                           
      END AS final_score,                                                                                           
                                                                                                                    
      -- Temporal bonus (boost if it's the best hour for this caption)                                              
      CASE                                                                                                          
        WHEN slot_hour = temporal_features.best_hour THEN 1.2                                                       
        WHEN ABS(slot_hour - temporal_features.best_hour) <= 2 THEN 1.1                                             
        ELSE 1.0                                                                                                    
      END AS temporal_multiplier,                                                                                   
                                                                                                                    
      -- Features for debugging                                                                                     
      performance_features,                                                                                         
      exploration_features,                                                                                         
      temporal_features,                                                                                            
      statistical_features,                                                                                         
      cooldown_features,                                                                                            
      composite_scores                                                                                              
                                                                                                                    
    FROM eligible_captions                                                                                          
  ),                                                                                                                
                                                                                                                    
  ranked_captions AS (                                                                                              
    SELECT                                                                                                          
      *,                                                                                                            
      final_score * temporal_multiplier AS adjusted_score,                                                          
                                                                                                                    
      -- Ranking                                                                                                    
      ROW_NUMBER() OVER (                                                                                           
        PARTITION BY username_page, slot_timestamp                                                                  
        ORDER BY final_score * temporal_multiplier DESC                                                             
      ) AS rank,                                                                                                    
                                                                                                                    
      -- Percentile within slot                                                                                     
      PERCENT_RANK() OVER (                                                                                         
        PARTITION BY username_page, slot_timestamp                                                                  
        ORDER BY final_score * temporal_multiplier                                                                  
      ) AS score_percentile                                                                                         
                                                                                                                    
    FROM scored_captions                                                                                            
  )                                                                                                                 
                                                                                                                    
  SELECT                                                                                                            
    -- Core fields                                                                                                  
    username_page,                                                                                                  
    caption_id,                                                                                                     
    slot_timestamp,                                                                                                 
    slot_date,                                                                                                      
    slot_hour,                                                                                                      
    rank,                                                                                                           
                                                                                                                    
    -- Scores                                                                                                       
    ROUND(adjusted_score, 4) AS score,                                                                              
    ROUND(score_percentile * 100, 2) AS score_percentile,                                                           
    ROUND(performance_score, 4) AS performance_component,                                                           
    ROUND(exploration_score, 4) AS exploration_component,                                                           
    ROUND(recency_score, 4) AS recency_component,                                                                   
    ROUND(stability_score, 4) AS stability_component,                                                               
                                                                                                                    
    -- Key metrics for display                                                                                      
    ROUND(performance_features.rps_smoothed, 2) AS expected_rps,                                                    
    ROUND(performance_features.confidence_score, 3) AS confidence,                                                  
    ROUND(temporal_features.hours_since_use / 24, 1) AS days_since_use,                                             
    performance_features.sends_30d AS recent_sends,                                                                 
                                                                                                                    
    -- Recommendation category                                                                                      
    CASE                                                                                                            
      WHEN rank = 1 THEN 'primary'                                                                                  
      WHEN rank <= 3 THEN 'secondary'                                                                               
      WHEN rank <= 5 THEN 'backup'                                                                                  
      ELSE 'alternative'                                                                                            
    END AS recommendation_tier,                                                                                     
                                                                                                                    
    -- Exploration flag                                                                                             
    CASE                                                                                                            
      WHEN exploration_score > performance_score THEN TRUE                                                          
      ELSE FALSE                                                                                                    
    END AS is_exploration,                                                                                          
                                                                                                                    
    -- Debug info (can be removed in production)                                                                    
    STRUCT(                                                                                                         
      performance_features.rps_30d,                                                                                 
      performance_features.trend_slope,                                                                             
      exploration_features.ucb_bonus,                                                                               
      temporal_features.best_hour,                                                                                  
      cooldown_features.fatigue_score                                                                               
    ) AS debug_info                                                                                                 
                                                                                                                    
  FROM ranked_captions                                                                                              
  WHERE rank <= 10                                                                                                  


****** View: layer_05_ml.v_rank_ready ******
Table of-scheduler-proj:layer_05_ml.v_rank_ready

                                              Query                                              
 ----------------------------------------------------------------------------------------------- 
  WITH latest_features AS (                                                                      
    SELECT                                                                                       
      username_page,                                                                             
      caption_id,                                                                                
      computed_date,                                                                             
      performance_features,                                                                      
      statistical_features,                                                                      
      exploration_features,                                                                      
      temporal_features,                                                                         
      cooldown_features,                                                                         
      composite_scores,                                                                          
      RANK() OVER (PARTITION BY username_page, caption_id ORDER BY computed_date DESC) AS rn     
    FROM `of-scheduler-proj.layer_05_ml.feature_store`                                           
    WHERE computed_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)                              
  ),                                                                                             
  ext_features AS (                                                                              
    SELECT * FROM `of-scheduler-proj.layer_05_ml.feature_store_ext`                              
  ),                                                                                             
  intensity AS (                                                                                 
    SELECT * FROM `of-scheduler-proj.layer_04_semantic.v_page_intensity_7d`                      
  ),                                                                                             
  bandit_params AS (                                                                             
    SELECT * FROM `of-scheduler-proj.ops_config.ml_params_bandit`                                
  )                                                                                              
  SELECT                                                                                         
    f.username_page AS page_key,                                                                 
    f.caption_id,                                                                                
    f.computed_date,                                                                             
    f.performance_features,                                                                      
    f.statistical_features,                                                                      
    f.exploration_features,                                                                      
    f.temporal_features,                                                                         
    f.cooldown_features,                                                                         
    f.composite_scores,                                                                          
    e.scam_risk_score,                                                                           
    e.night_owl_idx,                                                                             
    e.price_stance_bucket,                                                                       
    e.family_recent_uses,                                                                        
    e.cross_page_usage,                                                                          
    e.renew_on_pct,                                                                              
    i.recommended_tier AS current_tier,                                                          
    b.alpha,                                                                                     
    b.beta,                                                                                      
    b.epsilon,                                                                                   
    b.ucb_c,                                                                                     
    b.base_cooldown_hours,                                                                       
    b.use_true_thompson,                                                                         
    0 AS uses_today  -- Placeholder (would come from ops_audit.ml_events)                        
  FROM latest_features f                                                                         
  LEFT JOIN ext_features e ON f.username_page = e.username_page AND f.caption_id = e.caption_id  
  LEFT JOIN intensity i ON f.username_page = i.page_key                                          
  LEFT JOIN bandit_params b ON i.recommended_tier = b.tier                                       
  WHERE f.rn = 1                                                                                 


------------------ ROUTINES ------------------
Listing routines (definitions not extracted):
         Id               Routine Type        Language    Creation Time    Last Modified Time   Is Remote  
 ------------------- ----------------------- ---------- ----------------- -------------------- ----------- 
  fn_beta_sample      SCALAR_FUNCTION         SQL        12 Sep 06:45:58   12 Sep 06:45:58      No         
  fn_cooldown_end     SCALAR_FUNCTION         SQL        12 Sep 05:51:11   12 Sep 05:51:11      No         
  fn_hash_uniform     SCALAR_FUNCTION         SQL        12 Sep 06:45:57   12 Sep 06:45:57      No         
  fn_ucb_bonus        SCALAR_FUNCTION         SQL        12 Sep 05:51:11   12 Sep 05:51:11      No         
  tvf_rank_captions   TABLE_VALUED_FUNCTION   SQL        12 Sep 07:01:35   12 Sep 07:01:35      No         

==============================================================
DATASET: layer_06_analytics
==============================================================

------------------ TABLES ------------------
------------------ VIEWS ------------------
------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: layer_07_export
==============================================================

------------------ TABLES ------------------
****** Table: layer_07_export.schedule_recommendations ******
[{"name":"username_page","type":"STRING"},{"name":"creator_username","type":"STRING"},{"name":"creator_page_type","type":"STRING"},{"name":"schedule_date","type":"DATE"},{"name":"schedule_hour","type":"INTEGER"},{"name":"caption_id","type":"STRING"},{"name":"caption_preview","type":"STRING"},{"name":"caption_category","type":"STRING"},{"name":"recommendation_rank","type":"INTEGER"},{"name":"ml_score","type":"FLOAT"},{"name":"predicted_rps","type":"FLOAT"},{"name":"confidence_score","type":"FLOAT"},{"name":"days_since_last_send","type":"FLOAT"},{"name":"recommendation_tier","type":"STRING"},{"name":"is_exploration_pick","type":"BOOLEAN"},{"name":"model_version","type":"STRING"},{"name":"generated_at","type":"TIMESTAMP"}]

------------------ VIEWS ------------------
****** View: layer_07_export.api_caption_lookup ******
Table of-scheduler-proj:layer_07_export.api_caption_lookup

                                     Query                                     
 ----------------------------------------------------------------------------- 
  WITH caption_metrics AS (                                                    
    -- Get latest performance metrics                                          
    SELECT                                                                     
      caption_id,                                                              
      MAX(temporal_features.last_used_timestamp) AS last_used,                 
      AVG(performance_features.rps_smoothed) AS avg_rps,                       
      AVG(performance_features.confidence_score) AS avg_confidence,            
      MIN(cooldown_features.is_eligible) AS is_available                       
    FROM `of-scheduler-proj.layer_05_ml.feature_store`                         
    WHERE computed_date = CURRENT_DATE()                                       
    GROUP BY caption_id                                                        
  )                                                                            
                                                                               
  SELECT                                                                       
    -- Caption identifiers                                                     
    dc.caption_id,                                                             
    dc.caption_hash,                                                           
                                                                               
    -- Caption content                                                         
    dc.caption_text,                                                           
    dc.caption_category,                                                       
    dc.caption_length,                                                         
                                                                               
    -- Creator info                                                            
    dc.creator_username,                                                       
    dc.creator_page_type,                                                      
    dc.username_page,                                                          
                                                                               
    -- Performance tier                                                        
    CASE                                                                       
      WHEN cm.avg_rps >= 1.0 THEN 'top'                                        
      WHEN cm.avg_rps >= 0.5 THEN 'good'                                       
      WHEN cm.avg_rps >= 0.2 THEN 'average'                                    
      WHEN cm.avg_rps IS NULL THEN 'new'                                       
      ELSE 'explore'                                                           
    END AS performance_tier,                                                   
                                                                               
    -- Availability                                                            
    COALESCE(cm.is_available, TRUE) AS is_available,                           
    cm.last_used AS last_used_timestamp,                                       
    TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), cm.last_used, DAY) AS days_since_use,  
                                                                               
    -- Metrics                                                                 
    ROUND(COALESCE(cm.avg_rps, 0), 2) AS expected_rps,                         
    ROUND(COALESCE(cm.avg_confidence, 0), 2) AS confidence_score,              
                                                                               
    -- Status                                                                  
    dc.is_active AS is_active                                                  
                                                                               
  FROM `of-scheduler-proj.layer_03_foundation.dim_caption` dc                  
  LEFT JOIN caption_metrics cm                                                 
    ON dc.caption_id = cm.caption_id                                           
  WHERE dc.is_active = TRUE                                                    


------------------ ROUTINES ------------------
Listing routines (definitions not extracted):
          Id                Routine Type        Language    Creation Time    Last Modified Time   Is Remote  
 --------------------- ----------------------- ---------- ----------------- -------------------- ----------- 
  tvf_weekly_template   TABLE_VALUED_FUNCTION   SQL        12 Sep 07:09:05   12 Sep 07:09:05      No         

==============================================================
DATASET: mart
==============================================================

------------------ TABLES ------------------
****** Table: mart.caption_rank_next24_v3_tbl ******
[{"name":"username_page","type":"STRING"},{"name":"slot_dt_local","type":"DATETIME"},{"name":"dow","type":"INTEGER"},{"name":"hod","type":"INTEGER"},{"name":"caption_id","type":"STRING"},{"name":"caption_hash","type":"STRING"},{"name":"caption_text","type":"STRING"},{"name":"p_buy_eb","type":"FLOAT"},{"name":"rps_eb_price","type":"FLOAT"},{"name":"se_bonus","type":"FLOAT"},{"name":"style_score","type":"FLOAT"},{"name":"is_cooldown_ok","type":"BOOLEAN"},{"name":"score_final","type":"FLOAT"},{"name":"rn","type":"INTEGER"}]

****** Table: mart.caption_scores_7d ******
[{"name":"username_page","type":"STRING"},{"name":"date_local","type":"DATE"},{"name":"hod_local","type":"INTEGER"},{"name":"caption_id","type":"STRING"},{"name":"caption_text","type":"STRING"},{"name":"theme_tags","type":"STRING"},{"name":"confidence_score","type":"FLOAT"},{"name":"rnk","type":"INTEGER"}]

****** Table: mart.daily_quota_policy_legacy_snapshot_v3 ******
[{"name":"username_std","type":"STRING"},{"name":"assigned_scheduler","type":"STRING"},{"name":"tz","type":"STRING"},{"name":"dow","type":"INTEGER"},{"name":"ppv_quota","type":"INTEGER"},{"name":"hour_pool","type":"INTEGER"},{"name":"is_burst_dow","type":"INTEGER"}]

****** Table: mart.daily_quota_policy_legacy_snapshot_v3_backup_20250909 ******
[{"name":"username_std","type":"STRING"},{"name":"assigned_scheduler","type":"STRING"},{"name":"tz","type":"STRING"},{"name":"dow","type":"INTEGER"},{"name":"ppv_quota","type":"INTEGER"},{"name":"hour_pool","type":"INTEGER"},{"name":"is_burst_dow","type":"INTEGER"}]

****** Table: mart.gmail_messages_v1 ******
[{"name":"message_uid","type":"STRING"},{"name":"sending_ts","type":"TIMESTAMP"},{"name":"Sender","type":"STRING"},{"name":"Status","type":"STRING"},{"name":"Price","type":"STRING"},{"name":"Sent","type":"INTEGER"},{"name":"Viewed","type":"INTEGER"},{"name":"Purchased","type":"INTEGER"},{"name":"Earnings","type":"FLOAT"},{"name":"Withdrawn_by","type":"STRING"},{"name":"message_id","type":"STRING"},{"name":"loaded_at","type":"TIMESTAMP"},{"name":"source_file","type":"STRING"}]

****** Table: mart.page_type_authority_snap ******
[{"name":"username_std","type":"STRING"},{"name":"page_type","type":"STRING"},{"name":"decided_as_of","type":"DATE"}]

****** Table: mart.weekly_plan ******
[{"name":"week_start","type":"DATE"},{"name":"username_std","type":"STRING"},{"name":"scheduler_name","type":"STRING"},{"name":"tz","type":"STRING"},{"name":"date_local","type":"DATE"},{"name":"slot_rank","type":"INTEGER"},{"name":"hod_local","type":"INTEGER"},{"name":"price_usd","type":"FLOAT"},{"name":"planned_local_datetime","type":"DATETIME"},{"name":"scheduled_datetime_utc","type":"TIMESTAMP"},{"name":"created_at","type":"TIMESTAMP"}]

****** Table: mart.weekly_plan_v2 ******
[{"name":"week_start","type":"DATE"},{"name":"username_std","type":"STRING"},{"name":"scheduler_name","type":"STRING"},{"name":"tz","type":"STRING"},{"name":"date_local","type":"DATE"},{"name":"slot_rank","type":"INTEGER"},{"name":"hod_local","type":"INTEGER"},{"name":"price_usd","type":"FLOAT"},{"name":"planned_local_datetime","type":"DATETIME"},{"name":"scheduled_datetime_utc","type":"TIMESTAMP"},{"name":"created_at","type":"TIMESTAMP"}]

------------------ VIEWS ------------------
****** View: mart.caption_features_vNext ******
Table of-scheduler-proj:mart.caption_features_vNext

                                                          Query                                                           
 ------------------------------------------------------------------------------------------------------------------------ 
  WITH                                                                                                                    
  -- First, create the proper mapping between message_facts and captions                                                  
  message_caption_facts AS (                                                                                              
    SELECT                                                                                                                
      mf.caption_hash,                                                                                                    
      mf.username_std,                                                                                                    
      -- Create username_page field using page_type_authority                                                             
      CONCAT(mf.username_std, '__', COALESCE(pta.page_type, 'main')) AS username_page,                                    
      mf.sending_ts,                                                                                                      
      mf.price_usd,                                                                                                       
      mf.earnings_usd,                                                                                                    
      mf.sent,                                                                                                            
      mf.viewed,                                                                                                          
      mf.purchased,                                                                                                       
      -- Get caption details from caption_dim                                                                             
      cd.caption_id,                                                                                                      
      cd.caption_text,                                                                                                    
      COALESCE(cd.caption_type, 'general') AS category,                                                                   
      COALESCE(cd.explicitness, 'medium') AS explicitness                                                                 
    FROM `of-scheduler-proj.core.message_facts` mf                                                                        
    LEFT JOIN `of-scheduler-proj.core.page_type_authority` pta                                                            
      ON mf.username_std = pta.username_std                                                                               
    LEFT JOIN `of-scheduler-proj.core.caption_dim` cd                                                                     
      ON mf.caption_hash = cd.caption_hash                                                                                
      AND mf.username_std = cd.username_std                                                                               
    WHERE mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY)                                            
      AND mf.sent > 0                                                                                                     
      AND mf.caption_hash IS NOT NULL                                                                                     
  ),                                                                                                                      
                                                                                                                          
  -- Global priors for Bayesian smoothing                                                                                 
  global_priors AS (                                                                                                      
    SELECT                                                                                                                
      AVG(SAFE_DIVIDE(purchased, NULLIF(sent, 0))) AS global_conversion_rate,                                             
      AVG(SAFE_DIVIDE(earnings_usd, NULLIF(sent, 0))) AS global_rps,                                                      
      AVG(SAFE_DIVIDE(viewed, NULLIF(sent, 0))) AS global_open_rate,                                                      
      STDDEV(SAFE_DIVIDE(purchased, NULLIF(sent, 0))) AS global_conversion_std,                                           
      COUNT(DISTINCT caption_hash) AS total_captions,                                                                     
      COUNT(*) AS total_observations                                                                                      
    FROM message_caption_facts                                                                                            
  ),                                                                                                                      
                                                                                                                          
  -- Page-level priors                                                                                                    
  page_priors AS (                                                                                                        
    SELECT                                                                                                                
      username_page,                                                                                                      
      AVG(SAFE_DIVIDE(purchased, NULLIF(sent, 0))) AS page_conversion_rate,                                               
      AVG(SAFE_DIVIDE(earnings_usd, NULLIF(sent, 0))) AS page_rps,                                                        
      AVG(SAFE_DIVIDE(viewed, NULLIF(sent, 0))) AS page_open_rate,                                                        
      COUNT(*) AS page_observations                                                                                       
    FROM message_caption_facts                                                                                            
    GROUP BY username_page                                                                                                
  ),                                                                                                                      
                                                                                                                          
  -- Caption performance with time decay                                                                                  
  caption_performance AS (                                                                                                
    SELECT                                                                                                                
      mcf.caption_hash,                                                                                                   
      mcf.caption_id,                                                                                                     
      mcf.caption_text,                                                                                                   
      mcf.category,                                                                                                       
      mcf.explicitness,                                                                                                   
      mcf.username_page,                                                                                                  
                                                                                                                          
      -- Raw metrics                                                                                                      
      SUM(mcf.sent) AS total_sent,                                                                                        
      SUM(mcf.viewed) AS total_viewed,                                                                                    
      SUM(mcf.purchased) AS total_purchased,                                                                              
      SUM(mcf.earnings_usd) AS total_revenue,                                                                             
                                                                                                                          
      -- Time-weighted metrics (recent performance matters more)                                                          
      SUM(mcf.sent * POW(0.95, DATE_DIFF(CURRENT_DATE(), DATE(mcf.sending_ts), DAY))) AS weighted_sent,                   
      SUM(mcf.viewed * POW(0.95, DATE_DIFF(CURRENT_DATE(), DATE(mcf.sending_ts), DAY))) AS weighted_viewed,               
      SUM(mcf.purchased * POW(0.95, DATE_DIFF(CURRENT_DATE(), DATE(mcf.sending_ts), DAY))) AS weighted_purchased,         
      SUM(mcf.earnings_usd * POW(0.95, DATE_DIFF(CURRENT_DATE(), DATE(mcf.sending_ts), DAY))) AS weighted_revenue,        
                                                                                                                          
      -- Recency signals                                                                                                  
      MAX(mcf.sending_ts) AS last_used_ts,                                                                                
      COUNT(DISTINCT DATE(mcf.sending_ts)) AS days_used,                                                                  
      COUNT(DISTINCT mcf.price_usd) AS price_points_tested,                                                               
                                                                                                                          
      -- Variance measures for UCB                                                                                        
      STDDEV(SAFE_DIVIDE(mcf.purchased, NULLIF(mcf.sent, 0))) AS conversion_variance,                                     
      STDDEV(SAFE_DIVIDE(mcf.earnings_usd, NULLIF(mcf.sent, 0))) AS rps_variance                                          
                                                                                                                          
    FROM message_caption_facts mcf                                                                                        
    WHERE mcf.caption_id IS NOT NULL  -- Only include captions we can identify                                            
    GROUP BY                                                                                                              
      mcf.caption_hash,                                                                                                   
      mcf.caption_id,                                                                                                     
      mcf.caption_text,                                                                                                   
      mcf.category,                                                                                                       
      mcf.explicitness,                                                                                                   
      mcf.username_page                                                                                                   
  ),                                                                                                                      
                                                                                                                          
  -- Apply Bayesian smoothing                                                                                             
  smoothed_metrics AS (                                                                                                   
    SELECT                                                                                                                
      cp.*,                                                                                                               
                                                                                                                          
      -- Bayesian smoothed conversion rate                                                                                
      SAFE_DIVIDE(                                                                                                        
        cp.weighted_purchased + gp.global_conversion_rate * LEAST(30, GREATEST(5, 100 - cp.weighted_sent)),               
        cp.weighted_sent + LEAST(30, GREATEST(5, 100 - cp.weighted_sent))                                                 
      ) AS smoothed_conversion_rate,                                                                                      
                                                                                                                          
      -- Bayesian smoothed RPS                                                                                            
      SAFE_DIVIDE(                                                                                                        
        cp.weighted_revenue + gp.global_rps * LEAST(30, GREATEST(5, 100 - cp.weighted_sent)),                             
        cp.weighted_sent + LEAST(30, GREATEST(5, 100 - cp.weighted_sent))                                                 
      ) AS smoothed_rps,                                                                                                  
                                                                                                                          
      -- Bayesian smoothed open rate                                                                                      
      SAFE_DIVIDE(                                                                                                        
        cp.weighted_viewed + gp.global_open_rate * LEAST(30, GREATEST(5, 100 - cp.weighted_sent)),                        
        cp.weighted_sent + LEAST(30, GREATEST(5, 100 - cp.weighted_sent))                                                 
      ) AS smoothed_open_rate,                                                                                            
                                                                                                                          
      -- Raw rates for comparison                                                                                         
      SAFE_DIVIDE(cp.total_purchased, NULLIF(cp.total_sent, 0)) AS raw_conversion_rate,                                   
      SAFE_DIVIDE(cp.total_revenue, NULLIF(cp.total_sent, 0)) AS raw_rps,                                                 
      SAFE_DIVIDE(cp.total_viewed, NULLIF(cp.total_sent, 0)) AS raw_open_rate,                                            
                                                                                                                          
      -- Exploration bonus (UCB-style)                                                                                    
      LEAST(1.0,                                                                                                          
        SQRT(2 * LN(gp.total_observations) / GREATEST(1, cp.weighted_sent)) +                                             
        COALESCE(cp.conversion_variance, 0.1) * 2                                                                         
      ) AS exploration_bonus                                                                                              
                                                                                                                          
    FROM caption_performance cp                                                                                           
    CROSS JOIN global_priors gp                                                                                           
    LEFT JOIN page_priors pp USING (username_page)                                                                        
  ),                                                                                                                      
                                                                                                                          
  -- Calculate novelty/fatigue scores                                                                                     
  novelty_scores AS (                                                                                                     
    SELECT                                                                                                                
      sm.*,                                                                                                               
                                                                                                                          
      -- Days since last use (novelty indicator)                                                                          
      DATE_DIFF(CURRENT_DATE(), DATE(sm.last_used_ts), DAY) AS days_since_used,                                           
                                                                                                                          
      -- Fatigue penalty (exponential decay)                                                                              
      CASE                                                                                                                
        WHEN DATE_DIFF(CURRENT_DATE(), DATE(sm.last_used_ts), DAY) < 7 THEN                                               
          EXP(-0.5 * (7 - DATE_DIFF(CURRENT_DATE(), DATE(sm.last_used_ts), DAY)))                                         
        ELSE 1.0                                                                                                          
      END AS novelty_score,                                                                                               
                                                                                                                          
      -- Usage intensity (penalize overuse)                                                                               
      CASE                                                                                                                
        WHEN sm.days_used > 20 THEN 0.7                                                                                   
        WHEN sm.days_used > 10 THEN 0.85                                                                                  
        ELSE 1.0                                                                                                          
      END AS usage_intensity_factor                                                                                       
                                                                                                                          
    FROM smoothed_metrics sm                                                                                              
  ),                                                                                                                      
                                                                                                                          
  -- Z-score normalization                                                                                                
  normalized_features AS (                                                                                                
    SELECT                                                                                                                
      ns.*,                                                                                                               
                                                                                                                          
      -- Z-score normalization for fair comparison                                                                        
      SAFE_DIVIDE(                                                                                                        
        ns.smoothed_conversion_rate - AVG(ns.smoothed_conversion_rate) OVER (PARTITION BY ns.username_page),              
        NULLIF(STDDEV(ns.smoothed_conversion_rate) OVER (PARTITION BY ns.username_page), 0)                               
      ) AS conversion_z_score,                                                                                            
                                                                                                                          
      SAFE_DIVIDE(                                                                                                        
        ns.smoothed_rps - AVG(ns.smoothed_rps) OVER (PARTITION BY ns.username_page),                                      
        NULLIF(STDDEV(ns.smoothed_rps) OVER (PARTITION BY ns.username_page), 0)                                           
      ) AS rps_z_score,                                                                                                   
                                                                                                                          
      SAFE_DIVIDE(                                                                                                        
        ns.smoothed_open_rate - AVG(ns.smoothed_open_rate) OVER (PARTITION BY ns.username_page),                          
        NULLIF(STDDEV(ns.smoothed_open_rate) OVER (PARTITION BY ns.username_page), 0)                                     
      ) AS open_z_score,                                                                                                  
                                                                                                                          
      -- Percentile ranks for interpretability                                                                            
      PERCENT_RANK() OVER (PARTITION BY ns.username_page ORDER BY ns.smoothed_conversion_rate) AS conversion_percentile,  
      PERCENT_RANK() OVER (PARTITION BY ns.username_page ORDER BY ns.smoothed_rps) AS rps_percentile,                     
      PERCENT_RANK() OVER (PARTITION BY ns.username_page ORDER BY ns.smoothed_open_rate) AS open_percentile               
                                                                                                                          
    FROM novelty_scores ns                                                                                                
  )                                                                                                                       
                                                                                                                          
  -- Final output with all features                                                                                       
  SELECT                                                                                                                  
    nf.caption_id,                                                                                                        
    nf.caption_text,                                                                                                      
    nf.caption_hash,                                                                                                      
    nf.username_page,                                                                                                     
    nf.category,                                                                                                          
    nf.explicitness,                                                                                                      
                                                                                                                          
    -- Core performance metrics (smoothed)                                                                                
    ROUND(nf.smoothed_conversion_rate, 4) AS conversion_rate,                                                             
    ROUND(nf.smoothed_rps, 2) AS rps,                                                                                     
    ROUND(nf.smoothed_open_rate, 4) AS open_rate,                                                                         
                                                                                                                          
    -- Normalized scores for ranking                                                                                      
    ROUND(COALESCE(nf.conversion_z_score, 0), 3) AS conversion_z_score,                                                   
    ROUND(COALESCE(nf.rps_z_score, 0), 3) AS rps_z_score,                                                                 
    ROUND(COALESCE(nf.open_z_score, 0), 3) AS open_z_score,                                                               
                                                                                                                          
    -- Percentile ranks                                                                                                   
    ROUND(nf.conversion_percentile, 3) AS conversion_percentile,                                                          
    ROUND(nf.rps_percentile, 3) AS rps_percentile,                                                                        
    ROUND(nf.open_percentile, 3) AS open_percentile,                                                                      
                                                                                                                          
    -- Novelty and exploration                                                                                            
    ROUND(nf.novelty_score, 3) AS novelty_score,                                                                          
    ROUND(nf.usage_intensity_factor, 3) AS usage_intensity_factor,                                                        
    ROUND(nf.exploration_bonus, 3) AS exploration_bonus,                                                                  
                                                                                                                          
    -- Metadata for debugging                                                                                             
    nf.total_sent,                                                                                                        
    nf.days_used,                                                                                                         
    nf.days_since_used,                                                                                                   
    nf.last_used_ts,                                                                                                      
    nf.price_points_tested,                                                                                               
    ROUND(nf.conversion_variance, 4) AS conversion_variance,                                                              
    ROUND(nf.rps_variance, 2) AS rps_variance,                                                                            
                                                                                                                          
    -- Data quality flags                                                                                                 
    CASE WHEN nf.total_sent < 10 THEN TRUE ELSE FALSE END AS is_cold_start,                                               
    CASE WHEN nf.days_since_used > 28 THEN TRUE ELSE FALSE END AS is_stale,                                               
    CURRENT_TIMESTAMP() AS computation_ts                                                                                 
                                                                                                                          
  FROM normalized_features nf                                                                                             
  WHERE nf.caption_id IS NOT NULL                                                                                         
    AND nf.caption_text IS NOT NULL                                                                                       


****** View: mart.caption_ranker_vNext ******
Table of-scheduler-proj:mart.caption_ranker_vNext

                                                        Query                                                         
 -------------------------------------------------------------------------------------------------------------------- 
  WITH                                                                                                                
  -- FIXED: ML weights with username_std and proper latest selection                                                  
  ml_weights AS (                                                                                                     
    SELECT                                                                                                            
      ps.username_std,                                                                                                
      ps.page_state,                                                                                                  
      w.w_rps, w.w_open, w.w_buy, w.w_dowhod, w.w_price, w.w_novelty, w.w_momentum,                                   
      w.ucb_c, w.epsilon                                                                                              
    FROM `of-scheduler-proj.core.page_state` ps                                                                       
    JOIN (                                                                                                            
      SELECT * EXCEPT(rn)                                                                                             
      FROM (                                                                                                          
        SELECT *,                                                                                                     
               ROW_NUMBER() OVER (PARTITION BY page_state ORDER BY updated_at DESC) AS rn                             
        FROM `of-scheduler-proj.ops.ml_ranking_weights_v1`                                                            
      )                                                                                                               
      WHERE rn = 1                                                                                                    
    ) w USING (page_state)                                                                                            
  ),                                                                                                                  
                                                                                                                      
  -- Get exploration config with proper latest selection                                                              
  explore_config AS (                                                                                                 
    SELECT * EXCEPT(rn)                                                                                               
    FROM (                                                                                                            
      SELECT *,                                                                                                       
             ROW_NUMBER() OVER (PARTITION BY config_key ORDER BY updated_at DESC) AS rn                               
      FROM `of-scheduler-proj.ops.explore_exploit_config_v1`                                                          
    )                                                                                                                 
    WHERE config_key = 'default' AND rn = 1                                                                           
  ),                                                                                                                  
                                                                                                                      
  -- FIXED: Get cooldown config from settings                                                                         
  cooldown_config AS (                                                                                                
    SELECT                                                                                                            
      CAST(MAX(CASE WHEN setting_key = 'min_cooldown_hours' THEN setting_value END) AS INT64) AS min_cooldown_hours,  
      21 * 24 AS max_cooldown_hours,  -- 21 days from max_cooldown_days setting                                       
      3 AS max_weekly_uses  -- Standard max weekly uses                                                               
    FROM `of-scheduler-proj.core.cooldown_settings_v1`                                                                
    WHERE setting_key IN ('min_cooldown_hours', 'max_cooldown_days')                                                  
  ),                                                                                                                  
                                                                                                                      
  -- Get scheduled slots for next 7 days                                                                              
  scheduled_slots AS (                                                                                                
    SELECT                                                                                                            
      username_page,                                                                                                  
      username_std,                                                                                                   
      page_type,                                                                                                      
      date_local AS slot_dt_local,                                                                                    
      hod_local,                                                                                                      
      slot_rank,                                                                                                      
      tracking_hash,                                                                                                  
      MOD(EXTRACT(DAYOFWEEK FROM date_local) + 5, 7) AS dow_local                                                     
    FROM `of-scheduler-proj.core.v_weekly_template_7d_pages_final`                                                    
    WHERE date_local BETWEEN CURRENT_DATE() AND DATE_ADD(CURRENT_DATE(), INTERVAL 7 DAY)                              
  ),                                                                                                                  
                                                                                                                      
  -- Get DOW×HOD performance patterns                                                                                 
  dow_hod_patterns AS (                                                                                               
    SELECT                                                                                                            
      username_std,                                                                                                   
      dow_local,                                                                                                      
      hod_local,                                                                                                      
      score AS dow_hod_score,                                                                                         
      PERCENT_RANK() OVER (PARTITION BY username_std ORDER BY score) AS dow_hod_percentile                            
    FROM `of-scheduler-proj.mart.v_mm_dow_hod_180d_local_v2`                                                          
  ),                                                                                                                  
                                                                                                                      
  -- FIXED: Price elasticity - one row per page with optimal band                                                     
  price_elasticity AS (                                                                                               
    SELECT                                                                                                            
      username_page,                                                                                                  
      ANY_VALUE(optimal_band) AS optimal_band,                                                                        
      MAX_BY(band_rps, band_rps) AS optimal_band_rps                                                                  
    FROM (                                                                                                            
      SELECT                                                                                                          
        username_page,                                                                                                
        price_band,                                                                                                   
        AVG(SAFE_DIVIDE(earnings_usd, NULLIF(sent, 0))) AS band_rps,                                                  
        FIRST_VALUE(price_band) OVER (                                                                                
          PARTITION BY username_page                                                                                  
          ORDER BY AVG(SAFE_DIVIDE(earnings_usd, NULLIF(sent, 0))) DESC                                               
        ) AS optimal_band                                                                                             
      FROM (                                                                                                          
        SELECT                                                                                                        
          CONCAT(mf.username_std, '__', COALESCE(pta.page_type, 'main')) AS username_page,                            
          mf.earnings_usd,                                                                                            
          mf.sent,                                                                                                    
          mf.price_usd,                                                                                               
          CASE                                                                                                        
            WHEN mf.price_usd < 15 THEN 'low'                                                                         
            WHEN mf.price_usd < 30 THEN 'mid'                                                                         
            WHEN mf.price_usd < 45 THEN 'high'                                                                        
            ELSE 'premium'                                                                                            
          END AS price_band                                                                                           
        FROM `of-scheduler-proj.core.message_facts` mf                                                                
        LEFT JOIN `of-scheduler-proj.core.page_type_authority` pta                                                    
          ON mf.username_std = pta.username_std                                                                       
        WHERE mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY)                                    
          AND mf.sent > 0                                                                                             
      )                                                                                                               
      GROUP BY username_page, price_band                                                                              
    )                                                                                                                 
    GROUP BY username_page                                                                                            
  ),                                                                                                                  
                                                                                                                      
  -- FIXED: Cooldown check with TIMESTAMP_DIFF                                                                        
  cooldown_check AS (                                                                                                 
    SELECT                                                                                                            
      cd.caption_id,                                                                                                  
      CONCAT(mf.username_std, '__', COALESCE(pta.page_type, 'main')) AS username_page,                                
      MAX(mf.sending_ts) AS last_sent_ts,                                                                             
      COUNTIF(mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)) AS recent_uses_7d,                 
      COUNT(DISTINCT DATE(mf.sending_ts)) AS unique_days_7d                                                           
    FROM `of-scheduler-proj.core.message_facts` mf                                                                    
    LEFT JOIN `of-scheduler-proj.core.page_type_authority` pta                                                        
      ON mf.username_std = pta.username_std                                                                           
    LEFT JOIN `of-scheduler-proj.core.caption_dim` cd                                                                 
      ON mf.caption_hash = cd.caption_hash                                                                            
      AND mf.username_std = cd.username_std                                                                           
    WHERE mf.caption_hash IS NOT NULL                                                                                 
      AND cd.caption_id IS NOT NULL                                                                                   
    GROUP BY cd.caption_id, username_page                                                                             
  ),                                                                                                                  
                                                                                                                      
  -- Calculate momentum scores                                                                                        
  momentum_scores AS (                                                                                                
    SELECT                                                                                                            
      CONCAT(mf.username_std, '__', COALESCE(pta.page_type, 'main')) AS username_page,                                
      SAFE_DIVIDE(                                                                                                    
        SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)                             
                 THEN mf.earnings_usd END),                                                                           
        NULLIF(SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)                      
                        THEN mf.sent END), 0)                                                                         
      ) AS rps_7d,                                                                                                    
      SAFE_DIVIDE(                                                                                                    
        SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)                            
                 THEN mf.earnings_usd END),                                                                           
        NULLIF(SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)                     
                        THEN mf.sent END), 0)                                                                         
      ) AS rps_30d,                                                                                                   
      SAFE_DIVIDE(                                                                                                    
        SAFE_DIVIDE(                                                                                                  
          SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)                           
                   THEN mf.earnings_usd END),                                                                         
          NULLIF(SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)                    
                          THEN mf.sent END), 0)                                                                       
        ),                                                                                                            
        NULLIF(SAFE_DIVIDE(                                                                                           
          SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)                          
                   THEN mf.earnings_usd END),                                                                         
          NULLIF(SUM(CASE WHEN mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)                   
                          THEN mf.sent END), 0)                                                                       
        ), 0)                                                                                                         
      ) AS momentum_ratio                                                                                             
    FROM `of-scheduler-proj.core.message_facts` mf                                                                    
    LEFT JOIN `of-scheduler-proj.core.page_type_authority` pta                                                        
      ON mf.username_std = pta.username_std                                                                           
    WHERE mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)                                        
      AND mf.sent > 0                                                                                                 
    GROUP BY username_page                                                                                            
  ),                                                                                                                  
                                                                                                                      
  -- FIXED: Combine features with proper JOINs (not CROSS JOIN)                                                       
  scored_captions AS (                                                                                                
    SELECT                                                                                                            
      ss.username_page,                                                                                               
      ss.username_std,                                                                                                
      ss.page_type,                                                                                                   
      ss.slot_dt_local,                                                                                               
      ss.hod_local,                                                                                                   
      ss.dow_local,                                                                                                   
      ss.slot_rank,                                                                                                   
      ss.tracking_hash,                                                                                               
      cf.caption_id,                                                                                                  
      cf.caption_text,                                                                                                
      cf.caption_hash,                                                                                                
      cf.category,                                                                                                    
      cf.explicitness,                                                                                                
                                                                                                                      
      -- Raw features                                                                                                 
      cf.conversion_rate,                                                                                             
      cf.rps,                                                                                                         
      cf.open_rate,                                                                                                   
      COALESCE(dhp.dow_hod_score, 0) AS dow_hod_score,                                                                
      COALESCE(dhp.dow_hod_percentile, 0.5) AS dow_hod_percentile,                                                    
      cf.novelty_score,                                                                                               
      COALESCE(ms.momentum_ratio, 1.0) AS momentum_score,                                                             
                                                                                                                      
      -- Normalized features                                                                                          
      cf.rps_z_score,                                                                                                 
      cf.conversion_z_score,                                                                                          
      cf.open_z_score,                                                                                                
                                                                                                                      
      -- ML weights                                                                                                   
      mw.w_rps,                                                                                                       
      mw.w_open,                                                                                                      
      mw.w_buy,                                                                                                       
      mw.w_dowhod,                                                                                                    
      mw.w_price,                                                                                                     
      mw.w_novelty,                                                                                                   
      mw.w_momentum,                                                                                                  
      mw.ucb_c,                                                                                                       
      mw.epsilon,                                                                                                     
                                                                                                                      
      -- Exploration bonus                                                                                            
      cf.exploration_bonus,                                                                                           
      ec.max_explorer_share,                                                                                          
                                                                                                                      
      -- FIXED: Deterministic epsilon flag using hash                                                                 
      (ABS(FARM_FINGERPRINT(CONCAT(                                                                                   
        cf.caption_id,                                                                                                
        FORMAT_DATE('%Y%m%d', ss.slot_dt_local),                                                                      
        CAST(ss.hod_local AS STRING)                                                                                  
      ))) / 9.22e18) < mw.epsilon AS epsilon_flag,                                                                    
                                                                                                                      
      -- Calculate final score                                                                                        
      (                                                                                                               
        mw.w_rps * COALESCE(cf.rps_z_score, 0) +                                                                      
        mw.w_open * COALESCE(cf.open_z_score, 0) +                                                                    
        mw.w_buy * COALESCE(cf.conversion_z_score, 0) +                                                               
        mw.w_dowhod * COALESCE((dhp.dow_hod_percentile - 0.5) * 2, 0) +                                               
        mw.w_price * CASE                                                                                             
          WHEN pe.optimal_band = 'mid' AND cf.rps > pe.optimal_band_rps THEN 0.2                                      
          WHEN pe.optimal_band = 'high' AND cf.rps > pe.optimal_band_rps THEN 0.1                                     
          ELSE 0                                                                                                      
        END +                                                                                                         
        mw.w_novelty * cf.novelty_score +                                                                             
        mw.w_momentum * LEAST(1.5, GREATEST(0.5, COALESCE(ms.momentum_ratio, 1.0))) +                                 
        -- UCB exploration bonus (deterministic)                                                                      
        CASE                                                                                                          
          WHEN cf.is_cold_start THEN mw.ucb_c * cf.exploration_bonus                                                  
          WHEN (ABS(FARM_FINGERPRINT(CONCAT(                                                                          
            cf.caption_id,                                                                                            
            FORMAT_DATE('%Y%m%d', ss.slot_dt_local),                                                                  
            CAST(ss.hod_local AS STRING)                                                                              
          ))) / 9.22e18) < mw.epsilon THEN 2.0                                                                        
          ELSE 0                                                                                                      
        END                                                                                                           
      ) AS score_final,                                                                                               
                                                                                                                      
      -- FIXED: Compliance flags with config-driven thresholds                                                        
      CASE                                                                                                            
        WHEN cc.recent_uses_7d >= (SELECT max_weekly_uses FROM cooldown_config) THEN FALSE                            
        WHEN cc.unique_days_7d >= 3 THEN FALSE                                                                        
        WHEN cc.last_sent_ts IS NOT NULL                                                                              
          AND TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), cc.last_sent_ts, HOUR) <                                            
              (SELECT min_cooldown_hours FROM cooldown_config) THEN FALSE                                             
        ELSE TRUE                                                                                                     
      END AS cooldown_ok,                                                                                             
                                                                                                                      
      TRUE AS quota_ok,  -- Would join with quota table                                                               
                                                                                                                      
      CASE                                                                                                            
        WHEN cc.recent_uses_7d > 0 THEN FALSE                                                                         
        ELSE TRUE                                                                                                     
      END AS dedupe_ok,                                                                                               
                                                                                                                      
      CASE                                                                                                            
        WHEN cf.is_cold_start THEN TRUE                                                                               
        WHEN (ABS(FARM_FINGERPRINT(CONCAT(                                                                            
          cf.caption_id,                                                                                              
          FORMAT_DATE('%Y%m%d', ss.slot_dt_local),                                                                    
          CAST(ss.hod_local AS STRING)                                                                                
        ))) / 9.22e18) < mw.epsilon THEN TRUE                                                                         
        ELSE FALSE                                                                                                    
      END AS is_explorer,                                                                                             
                                                                                                                      
      -- Metadata                                                                                                     
      cf.total_sent,                                                                                                  
      cf.days_since_used,                                                                                             
      cf.is_cold_start,                                                                                               
      cf.is_stale,                                                                                                    
      cc.recent_uses_7d,                                                                                              
                                                                                                                      
      -- Reason codes                                                                                                 
      CASE                                                                                                            
        WHEN cf.is_cold_start THEN 'cold_start_exploration'                                                           
        WHEN (ABS(FARM_FINGERPRINT(CONCAT(                                                                            
          cf.caption_id,                                                                                              
          FORMAT_DATE('%Y%m%d', ss.slot_dt_local),                                                                    
          CAST(ss.hod_local AS STRING)                                                                                
        ))) / 9.22e18) < mw.epsilon THEN 'epsilon_exploration'                                                        
        WHEN cf.rps_percentile > 0.8 THEN 'high_performer'                                                            
        WHEN dhp.dow_hod_percentile > 0.7 THEN 'optimal_timing'                                                       
        WHEN cf.novelty_score > 0.9 THEN 'fresh_content'                                                              
        ELSE 'balanced_selection'                                                                                     
      END AS selection_reason                                                                                         
                                                                                                                      
    FROM scheduled_slots ss                                                                                           
    -- FIXED: Proper JOIN instead of CROSS JOIN                                                                       
    INNER JOIN `of-scheduler-proj.mart.caption_features_vNext` cf                                                     
      ON cf.username_page = ss.username_page                                                                          
    LEFT JOIN ml_weights mw                                                                                           
      ON ss.username_std = mw.username_std                                                                            
    LEFT JOIN dow_hod_patterns dhp                                                                                    
      ON ss.username_std = dhp.username_std                                                                           
      AND ss.dow_local = dhp.dow_local                                                                                
      AND ss.hod_local = dhp.hod_local                                                                                
    LEFT JOIN price_elasticity pe                                                                                     
      ON ss.username_page = pe.username_page                                                                          
    LEFT JOIN cooldown_check cc                                                                                       
      ON cf.caption_id = cc.caption_id                                                                                
      AND ss.username_page = cc.username_page                                                                         
    LEFT JOIN momentum_scores ms                                                                                      
      ON ss.username_page = ms.username_page                                                                          
    CROSS JOIN explore_config ec                                                                                      
    CROSS JOIN cooldown_config                                                                                        
  ),                                                                                                                  
                                                                                                                      
  -- Rank captions per slot                                                                                           
  ranked_captions AS (                                                                                                
    SELECT                                                                                                            
      *,                                                                                                              
      ROW_NUMBER() OVER (                                                                                             
        PARTITION BY username_page, slot_dt_local, hod_local                                                          
        ORDER BY                                                                                                      
          CASE WHEN cooldown_ok AND quota_ok AND dedupe_ok THEN 0 ELSE 1 END,                                         
          score_final DESC,                                                                                           
          days_since_used DESC                                                                                        
      ) AS rank_in_slot,                                                                                              
                                                                                                                      
      COUNT(DISTINCT category) OVER (                                                                                 
        PARTITION BY username_page, slot_dt_local, hod_local                                                          
      ) AS category_diversity,                                                                                        
                                                                                                                      
      -- FIXED: Normalize score per slot (not per page)                                                               
      100 * (score_final - MIN(score_final) OVER (PARTITION BY username_page, slot_dt_local, hod_local)) /            
      NULLIF(                                                                                                         
        MAX(score_final) OVER (PARTITION BY username_page, slot_dt_local, hod_local) -                                
        MIN(score_final) OVER (PARTITION BY username_page, slot_dt_local, hod_local),                                 
        0                                                                                                             
      ) AS score_normalized                                                                                           
                                                                                                                      
    FROM scored_captions                                                                                              
    WHERE caption_id IS NOT NULL                                                                                      
      AND caption_text IS NOT NULL                                                                                    
  )                                                                                                                   
                                                                                                                      
  -- Final output                                                                                                     
  SELECT                                                                                                              
    username_page,                                                                                                    
    username_std,                                                                                                     
    page_type,                                                                                                        
    slot_dt_local,                                                                                                    
    hod_local,                                                                                                        
    dow_local,                                                                                                        
    slot_rank,                                                                                                        
    tracking_hash,                                                                                                    
    caption_id,                                                                                                       
    caption_text,                                                                                                     
    caption_hash,                                                                                                     
    category,                                                                                                         
    explicitness,                                                                                                     
                                                                                                                      
    ROUND(score_final, 3) AS score_final,                                                                             
    ROUND(score_normalized, 1) AS score_normalized,                                                                   
    rank_in_slot,                                                                                                     
                                                                                                                      
    ROUND(conversion_rate, 4) AS conversion_rate,                                                                     
    ROUND(rps, 2) AS rps,                                                                                             
    ROUND(open_rate, 4) AS open_rate,                                                                                 
                                                                                                                      
    ROUND(dow_hod_score, 2) AS dow_hod_score,                                                                         
    ROUND(dow_hod_percentile, 3) AS dow_hod_percentile,                                                               
                                                                                                                      
    ROUND(novelty_score, 3) AS novelty_score,                                                                         
    ROUND(momentum_score, 3) AS momentum_score,                                                                       
                                                                                                                      
    cooldown_ok,                                                                                                      
    quota_ok,                                                                                                         
    dedupe_ok,                                                                                                        
    is_explorer,                                                                                                      
                                                                                                                      
    total_sent,                                                                                                       
    days_since_used,                                                                                                  
    recent_uses_7d,                                                                                                   
    is_cold_start,                                                                                                    
    is_stale,                                                                                                         
    selection_reason,                                                                                                 
    category_diversity,                                                                                               
                                                                                                                      
    CURRENT_TIMESTAMP() AS ranked_at,                                                                                 
    'v1.0.1-patched' AS model_version                                                                                 
                                                                                                                      
  FROM ranked_captions                                                                                                
  WHERE rank_in_slot <= 20                                                                                            
  QUALIFY ROW_NUMBER() OVER (                                                                                         
    PARTITION BY username_page, slot_dt_local, hod_local, caption_id                                                  
    ORDER BY rank_in_slot                                                                                             
  ) = 1                                                                                                               


****** View: mart.sheet_caption_top10_today ******
Table of-scheduler-proj:mart.sheet_caption_top10_today

                              Query                              
 --------------------------------------------------------------- 
  SELECT                                                         
    username_page, date_local, hod_local,                        
    caption_id, caption_text, theme_tags, confidence_score, rnk  
  FROM `of-scheduler-proj.mart.caption_scores_7d`                
  WHERE date_local = CURRENT_DATE()                              
    AND rnk <= 10                                                
  ORDER BY username_page, hod_local, rnk                         


****** View: mart.sheet_captions_next24_v3 ******
Table of-scheduler-proj:mart.sheet_captions_next24_v3

                                     Query                                     
 ----------------------------------------------------------------------------- 
  SELECT                                                                       
    username_page,                                                             
    FORMAT_DATETIME('%a %b %d, %I:%M %p', slot_dt_local) AS slot_local_human,  
    caption_id,                                                                
    ROUND(p_buy_eb,6)     AS buy_rate_eb,                                      
    ROUND(rps_eb_price,5) AS rps_eb,                                           
    ROUND(se_bonus,5)     AS ucb_bonus,                                        
    ROUND(style_score,4)  AS style,                                            
    is_cooldown_ok,                                                            
    rn AS caption_rank                                                         
  FROM `of-scheduler-proj.mart.caption_rank_next24_v3_tbl`                     
  WHERE rn <= 3                                                                
  ORDER BY username_page, slot_dt_local, caption_rank                          


****** View: mart.sheet_slots_next24_v3 ******
Table of-scheduler-proj:mart.sheet_slots_next24_v3

                                      Query                                      
 ------------------------------------------------------------------------------- 
  SELECT                                                                         
    r.username_page,                                                             
    FORMAT_DATETIME('%a %b %d, %I:%M %p', r.slot_dt_local) AS slot_local_human,  
    r.dow, r.hod,                                                                
    r.reco_dm_type,                                                              
    r.reco_price_usd,                                                            
    ROUND(r.best_ppv_buy_rate, 5) AS est_buy_rate,                               
    ROUND(r.rps_lcb, 5)          AS est_rps_lcb,                                 
    ROUND(r.slot_score_base, 5)  AS slot_score                                   
  FROM `of-scheduler-proj.mart.v_slot_recommendations_next24_v3` r               
  ORDER BY r.username_page, r.slot_dt_local                                      


****** View: mart.v_caption_candidate_pool_v3 ******
Table of-scheduler-proj:mart.v_caption_candidate_pool_v3

                                                             Query                                                              
 ------------------------------------------------------------------------------------------------------------------------------ 
  WITH cd AS (                                                                                                                  
    SELECT CAST(setting_val AS INT64) AS cooldown_days                                                                          
    FROM `of-scheduler-proj.core.settings_modeling`                                                                             
    WHERE setting_key="caption_cooldown_days"                                                                                   
  )                                                                                                                             
  SELECT                                                                                                                        
    f.username_page, f.caption_id, f.caption_hash, f.caption_text,                                                              
    f.len_bin, f.emoji_bin, f.has_cta, f.has_urgency, f.ends_with_question,                                                     
    lu.last_used_ts,                                                                                                            
    CASE                                                                                                                        
      WHEN lu.last_used_ts IS NULL THEN TRUE                                                                                    
      WHEN lu.last_used_ts < TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL (SELECT cooldown_days FROM cd LIMIT 1) DAY) THEN TRUE  
      ELSE FALSE                                                                                                                
    END AS is_cooldown_ok                                                                                                       
  FROM `of-scheduler-proj.core.v_caption_candidates_safe_v1` f  -- ONLY CHANGE                                                  
  LEFT JOIN `of-scheduler-proj.core.v_caption_last_used_v3` lu                                                                  
    USING (username_page, caption_hash)                                                                                         


****** View: mart.v_caption_decayed_stats_60d_v3 ******
Table of-scheduler-proj:mart.v_caption_decayed_stats_60d_v3

                                                             Query                                                              
 ------------------------------------------------------------------------------------------------------------------------------ 
  WITH cfg AS (SELECT 14.0 AS hl_days),                                                                                         
  f AS (                                                                                                                        
    SELECT username_page, caption_hash, sending_ts_utc, purchased, sent, earnings                                               
    FROM `of-scheduler-proj.mart.fn_dm_send_facts`(60)                                                                          
    WHERE dm_type='ppv'                                                                                                         
  )                                                                                                                             
  SELECT                                                                                                                        
    username_page,                                                                                                              
    caption_hash,                                                                                                               
    SUM(purchased * `of-scheduler-proj.util.halflife_weight`(sending_ts_utc, (SELECT hl_days FROM cfg))) AS decayed_purchases,  
    SUM(sent      * `of-scheduler-proj.util.halflife_weight`(sending_ts_utc, (SELECT hl_days FROM cfg))) AS decayed_sent,       
    SUM(earnings  * `of-scheduler-proj.util.halflife_weight`(sending_ts_utc, (SELECT hl_days FROM cfg))) AS decayed_revenue,    
    SAFE_DIVIDE(SUM(earnings), NULLIF(SUM(sent),0)) AS naive_rps_all                                                            
  FROM f                                                                                                                        
  GROUP BY 1,2                                                                                                                  


****** View: mart.v_caption_rank_next24_v3 ******
Table of-scheduler-proj:mart.v_caption_rank_next24_v3

                                                              Query                                                               
 -------------------------------------------------------------------------------------------------------------------------------- 
  WITH params AS (                                                                                                                
    SELECT                                                                                                                        
      CAST(COALESCE(MAX(CASE WHEN setting_key='prior_nu_buy'        THEN setting_val END), '200') AS FLOAT64) AS nu_buy,          
      CAST(COALESCE(MAX(CASE WHEN setting_key='w_style_lift'        THEN setting_val END), '0.10') AS FLOAT64) AS w_style,        
      CAST(COALESCE(MAX(CASE WHEN setting_key='ucb_sigma_min'       THEN setting_val END), '0.15') AS FLOAT64) AS ucb_sigma_min,  
      CAST(COALESCE(MAX(CASE WHEN setting_key='ucb_sigma_max'       THEN setting_val END), '0.60') AS FLOAT64) AS ucb_sigma_max,  
      CAST(COALESCE(MAX(CASE WHEN setting_key='ucb_bonus_cap_mult'  THEN setting_val END), '2.0')  AS FLOAT64) AS ucb_cap_mult    
    FROM `of-scheduler-proj.core.settings_modeling`                                                                               
  ),                                                                                                                              
  slots AS (                                                                                                                      
    SELECT username_page, slot_dt_local, dow, hod, reco_dm_type, reco_price_usd                                                   
    FROM `of-scheduler-proj.mart.v_slot_recommendations_next24_v3`                                                                
  ),                                                                                                                              
  -- candidate pool (force canonical order & types)                                                                               
  cand0_typed AS (                                                                                                                
    SELECT                                                                                                                        
      CAST(username_page AS STRING)         AS username_page,                                                                     
      CAST(caption_id   AS STRING)          AS caption_id,                                                                        
      CAST(caption_hash AS STRING)          AS caption_hash,                                                                      
      CAST(caption_text AS STRING)          AS caption_text,                                                                      
      CAST(len_bin      AS STRING)          AS len_bin,                                                                           
      CAST(emoji_bin    AS STRING)          AS emoji_bin,                                                                         
      CAST(has_cta      AS BOOL)            AS has_cta,                                                                           
      CAST(has_urgency  AS BOOL)            AS has_urgency,                                                                       
      CAST(ends_with_question AS BOOL)      AS ends_with_question,                                                                
      CAST(last_used_ts AS TIMESTAMP)       AS last_used_ts,                                                                      
      CAST(is_cooldown_ok AS BOOL)          AS is_cooldown_ok                                                                     
    FROM `of-scheduler-proj.mart.v_caption_candidate_pool_v3`                                                                     
  ),                                                                                                                              
  pages_in_play AS (SELECT DISTINCT username_page FROM slots),                                                                    
  pages_without_cand AS (                                                                                                         
    SELECT p.username_page                                                                                                        
    FROM pages_in_play p                                                                                                          
    LEFT JOIN (SELECT DISTINCT username_page FROM cand0_typed) c USING (username_page)                                            
    WHERE c.username_page IS NULL                                                                                                 
  ),                                                                                                                              
  -- one synthetic (prior-only) fallback per page                                                                                 
  fallback_cand_typed AS (                                                                                                        
    SELECT                                                                                                                        
      CAST(username_page AS STRING)                                    AS username_page,                                          
      CAST('fallback_default' AS STRING)                                AS caption_id,                                            
      CAST(TO_HEX(SHA256(CONCAT(username_page,'|fallback_default'))) AS STRING) AS caption_hash,                                  
      CAST(NULL AS STRING)                                             AS caption_text,                                           
      CAST('short' AS STRING)                                          AS len_bin,                                                
      CAST('no_emoji' AS STRING)                                       AS emoji_bin,                                              
      CAST(FALSE AS BOOL)                                              AS has_cta,                                                
      CAST(FALSE AS BOOL)                                              AS has_urgency,                                            
      CAST(FALSE AS BOOL)                                              AS ends_with_question,                                     
      CAST(NULL  AS TIMESTAMP)                                         AS last_used_ts,                                           
      CAST(TRUE  AS BOOL)                                              AS is_cooldown_ok                                          
    FROM pages_without_cand                                                                                                       
  ),                                                                                                                              
  cand AS (                                                                                                                       
    SELECT * FROM cand0_typed                                                                                                     
    UNION ALL                                                                                                                     
    SELECT * FROM fallback_cand_typed                                                                                             
  ),                                                                                                                              
  style AS (SELECT * FROM `of-scheduler-proj.mart.v_dm_style_lift_28d_v3`),                                                       
  stats AS (SELECT * FROM `of-scheduler-proj.mart.v_caption_decayed_stats_60d_v3`),                                               
  pri   AS (SELECT username_page, mu_buy_sent FROM `of-scheduler-proj.mart.v_page_priors_l90_v3`),                                
  -- recent volume for adaptive exploration                                                                                       
  slot_vol AS (                                                                                                                   
    SELECT username_page, dow, hod, SUM(sent) AS sent_28d                                                                         
    FROM `of-scheduler-proj.mart.fn_dm_send_facts`(28)                                                                            
    GROUP BY 1,2,3                                                                                                                
  ),                                                                                                                              
  page_vol AS (                                                                                                                   
    SELECT username_page, SUM(decayed_sent) AS decayed_sent_60d                                                                   
    FROM `of-scheduler-proj.mart.v_caption_decayed_stats_60d_v3`                                                                  
    GROUP BY 1                                                                                                                    
  ),                                                                                                                              
  slot_cand AS (                                                                                                                  
    SELECT                                                                                                                        
      s.username_page, s.slot_dt_local, s.dow, s.hod, s.reco_dm_type,                                                             
      GREATEST(s.reco_price_usd,0.0) AS price,                                                                                    
      c.caption_id, c.caption_hash, c.caption_text,                                                                               
      c.len_bin, c.emoji_bin, c.has_cta, c.has_urgency, c.ends_with_question,                                                     
      c.is_cooldown_ok,                                                                                                           
      SUM(CASE WHEN c.is_cooldown_ok THEN 1 ELSE 0 END)                                                                           
        OVER (PARTITION BY s.username_page, s.slot_dt_local) AS ok_cnt_in_slot,                                                   
      COALESCE(TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), c.last_used_ts, DAY), 999999) AS days_since_last_use                           
    FROM slots s                                                                                                                  
    JOIN cand  c USING (username_page)                                                                                            
  ),                                                                                                                              
  styled AS (                                                                                                                     
    SELECT                                                                                                                        
      b.*,                                                                                                                        
      (SELECT w_style FROM params) * COALESCE(sl.lift_vs_slot_smooth_clamped, 0.0) AS style_score                                 
    FROM slot_cand b                                                                                                              
    LEFT JOIN style sl                                                                                                            
      ON sl.username_page=b.username_page AND sl.dow=b.dow AND sl.hod=b.hod                                                       
     AND sl.len_bin=b.len_bin AND sl.emoji_bin=b.emoji_bin                                                                        
     AND sl.has_cta=b.has_cta AND sl.has_urgency=b.has_urgency                                                                    
     AND sl.ends_with_question=b.ends_with_question                                                                               
  ),                                                                                                                              
  eb AS (                                                                                                                         
    SELECT                                                                                                                        
      t.*,                                                                                                                        
      COALESCE(st.decayed_purchases, 0.0) AS x,                                                                                   
      COALESCE(st.decayed_sent,      0.0) AS n,                                                                                   
      COALESCE(pr.mu_buy_sent,0.08)  AS mu_page,                                                                                  
      (SELECT nu_buy FROM params)    AS nu,                                                                                       
      SAFE_DIVIDE(COALESCE(st.decayed_purchases,0.0) + (SELECT nu_buy FROM params) * COALESCE(pr.mu_buy_sent,0.08),               
                  COALESCE(st.decayed_sent,0.0)      + (SELECT nu_buy FROM params)) AS p_buy_eb                                   
    FROM styled t                                                                                                                 
    LEFT JOIN stats st USING (username_page, caption_hash)                                                                        
    LEFT JOIN pri   pr USING (username_page)                                                                                      
  ),                                                                                                                              
  ucb AS (                                                                                                                        
    SELECT                                                                                                                        
      e.*,                                                                                                                        
      GREATEST(e.n + e.nu, 1.0) AS n_eff,                                                                                         
      COALESCE(sv.sent_28d, 0.0)         AS sent_28d,                                                                             
      COALESCE(pv.decayed_sent_60d, 0.0) AS decayed_sent_60d,                                                                     
      (SELECT ucb_sigma_min FROM params) +                                                                                        
      ((SELECT ucb_sigma_max FROM params) - (SELECT ucb_sigma_min FROM params)) *                                                 
      ( 0.5 * (1.0 / (1.0 + LOG10(1.0 + COALESCE(sv.sent_28d,0.0))))                                                              
      + 0.5 * (1.0 / (1.0 + LOG10(1.0 + COALESCE(pv.decayed_sent_60d,0.0)))) ) AS sigma_adapted,                                  
      CASE WHEN e.price > 0 THEN                                                                                                  
        (                                                                                                                         
          ( (SELECT ucb_sigma_min FROM params) +                                                                                  
            ((SELECT ucb_sigma_max FROM params) - (SELECT ucb_sigma_min FROM params)) *                                           
            ( 0.5 * (1.0 / (1.0 + LOG10(1.0 + COALESCE(sv.sent_28d,0.0))))                                                        
            + 0.5 * (1.0 / (1.0 + LOG10(1.0 + COALESCE(pv.decayed_sent_60d,0.0)))) )                                              
          )                                                                                                                       
          * e.price * SQRT( GREATEST(e.p_buy_eb*(1.0-e.p_buy_eb),0.0) / GREATEST(e.n + e.nu,1.0) )                                
        )                                                                                                                         
      ELSE 0.0 END AS se_bonus_raw,                                                                                               
      (e.price * e.p_buy_eb) AS rps_eb_price                                                                                      
    FROM eb e                                                                                                                     
    LEFT JOIN slot_vol sv USING (username_page, dow, hod)                                                                         
    LEFT JOIN page_vol pv USING (username_page)                                                                                   
  ),                                                                                                                              
  -- allow all; tiny penalty only when cooldown had to be relaxed                                                                 
  allowed AS (                                                                                                                    
    SELECT                                                                                                                        
      u.*,                                                                                                                        
      TRUE AS is_allowed,                                                                                                         
      CASE WHEN u.ok_cnt_in_slot > 0 THEN 0.0 ELSE -0.000001 * u.days_since_last_use END AS cooldown_penalty                      
    FROM ucb u                                                                                                                    
  ),                                                                                                                              
  scored AS (                                                                                                                     
    SELECT                                                                                                                        
      a.*,                                                                                                                        
      LEAST(a.se_bonus_raw, (SELECT ucb_cap_mult FROM params) * a.rps_eb_price) AS se_bonus,                                      
      (a.rps_eb_price                                                                                                             
       + LEAST(a.se_bonus_raw, (SELECT ucb_cap_mult FROM params) * a.rps_eb_price)                                                
       + COALESCE(a.style_score,0.0)                                                                                              
       + a.cooldown_penalty) AS score_final                                                                                       
    FROM allowed a                                                                                                                
    WHERE a.is_allowed = TRUE                                                                                                     
  )                                                                                                                               
  SELECT                                                                                                                          
    username_page, slot_dt_local, dow, hod,                                                                                       
    caption_id, caption_text,                                                                                                     
    p_buy_eb, rps_eb_price, se_bonus, style_score, is_cooldown_ok,                                                                
    score_final,                                                                                                                  
    ROW_NUMBER() OVER (PARTITION BY username_page, slot_dt_local ORDER BY score_final DESC, caption_id) AS rn                     
  FROM scored                                                                                                                     


****** View: mart.v_daily_brief_today ******
Table of-scheduler-proj:mart.v_daily_brief_today

                                                 Query                                                  
 ------------------------------------------------------------------------------------------------------ 
  WITH hz AS (                                                                                          
    SELECT                                                                                              
      l.username_std,                                                                                   
      l.hod_local,                                                                                      
      -- time-decay weight: recent messages count more                                                  
      SUM(earnings_usd * EXP(-TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), l.sending_ts, DAY)/60.0)) AS score    
    FROM `of-scheduler-proj.mart.v_messages_local_180d` l                                               
    GROUP BY l.username_std, l.hod_local                                                                
  ),                                                                                                    
  best_hours AS (                                                                                       
    SELECT username_std, ARRAY_AGG(hod_local ORDER BY score DESC LIMIT 5) AS best_hours_local           
    FROM hz                                                                                             
    GROUP BY username_std                                                                               
  ),                                                                                                    
  price_band AS (                                                                                       
    SELECT                                                                                              
      username_std,                                                                                     
      APPROX_QUANTILES(price_usd, 20)[OFFSET(8)]  AS p25,                                               
      APPROX_QUANTILES(price_usd, 20)[OFFSET(10)] AS p50,                                               
      APPROX_QUANTILES(price_usd, 20)[OFFSET(14)] AS p75                                                
    FROM `of-scheduler-proj.core.message_facts`                                                         
    WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 60 DAY)                             
    GROUP BY username_std                                                                               
  ),                                                                                                    
  recent_caption_use AS (                                                                               
    SELECT username_std, caption_hash, MAX(DATE(sending_ts)) AS last_used_date                          
    FROM `of-scheduler-proj.core.message_facts`                                                         
    WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 180 DAY)                            
    GROUP BY username_std, caption_hash                                                                 
  ),                                                                                                    
  caption_perf AS (                                                                                     
    SELECT username_std, caption_hash,                                                                  
           SUM(earnings_usd) AS cap_rev,                                                                
           COUNT(*)          AS cap_msgs                                                                
    FROM `of-scheduler-proj.core.message_facts`                                                         
    WHERE caption_hash IS NOT NULL                                                                      
      AND sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 180 DAY)                            
    GROUP BY username_std, caption_hash                                                                 
  ),                                                                                                    
  candidates AS (                                                                                       
    SELECT                                                                                              
      cd.username_std,                                                                                  
      cd.caption_id,                                                                                    
      cd.caption_hash,                                                                                  
      cd.caption_text,                                                                                  
      cd.caption_type,                                                                                  
      cd.explicitness,                                                                                  
      cd.theme_tags,                                                                                    
      COALESCE(cp.cap_rev, 0) AS hist_revenue,                                                          
      COALESCE(rcu.last_used_date, DATE '1900-01-01') AS last_used_date                                 
    FROM `of-scheduler-proj.core.caption_dim` cd                                                        
    LEFT JOIN caption_perf cp USING (username_std, caption_hash)                                        
    LEFT JOIN recent_caption_use rcu USING (username_std, caption_hash)                                 
  ),                                                                                                    
  top_captions AS (                                                                                     
    SELECT                                                                                              
      username_std,                                                                                     
      ARRAY_AGG(STRUCT(caption_id, caption_text, caption_type, explicitness, theme_tags, hist_revenue)  
                ORDER BY (DATE_DIFF(CURRENT_DATE(), last_used_date, DAY) >= 28) DESC,                   
                         hist_revenue DESC                                                              
                LIMIT 10) AS caption_suggestions                                                        
    FROM candidates                                                                                     
    GROUP BY username_std                                                                               
  ),                                                                                                    
  avoid_last7 AS (                                                                                      
    SELECT username_std, ARRAY_AGG(DISTINCT caption_hash) AS avoid_caption_hashes_7d                    
    FROM `of-scheduler-proj.core.message_facts`                                                         
    WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)                              
    GROUP BY username_std                                                                               
  )                                                                                                     
  SELECT                                                                                                
    p.username_std,                                                                                     
    p.assigned_scheduler,                                                                               
    s.page_state,                                                                                       
    s.state_note,                                                                                       
    COALESCE(bh.best_hours_local, []) AS best_hours_local,                                              
    STRUCT(pb.p25, pb.p50, pb.p75)     AS price_band_suggested,                                         
    COALESCE(tc.caption_suggestions, []) AS caption_suggestions,                                        
    COALESCE(a.avoid_caption_hashes_7d, []) AS avoid_caption_hashes_7d                                  
  FROM `of-scheduler-proj.core.page_dim` p                                                              
  LEFT JOIN best_hours  bh USING (username_std)                                                         
  LEFT JOIN price_band  pb USING (username_std)                                                         
  LEFT JOIN top_captions tc USING (username_std)                                                        
  LEFT JOIN avoid_last7 a  USING (username_std)                                                         
  LEFT JOIN `of-scheduler-proj.core.page_state` s USING (username_std)                                  


****** View: mart.v_daily_quota_policy_final_v1 ******
Table of-scheduler-proj:mart.v_daily_quota_policy_final_v1

uery

  WITH pack AS ( SELECT * FROM `of-scheduler-proj.mart.v_daily_quota_policy_from_pack_v1` ), legacy AS ( SELECT * FROM `of-scheduler-proj.mart.daily_quota_policy_legacy_snapshot_v3` ), base AS ( SELECT COALESCE(p.username_std, l.username_std) AS username_std, COALESCE(p.assigned_scheduler, l.assigned_scheduler) AS assigned_scheduler, COALESCE(p.tz, l.tz) AS tz, COALESCE(p.dow, l.dow) AS dow, COALESCE(p.ppv_quota, l.ppv_quota) AS ppv_quota_raw, COALESCE(p.hour_pool, l.hour_pool) AS hour_pool_raw, COALESCE(p.is_burst_dow, l.is_burst_dow) AS is_burst_dow, p.pack_min_hod, p.pack_max_hod, p.price_mode_default FROM pack p FULL OUTER JOIN legacy l ON l.username_std = p.username_std AND l.dow = p.dow ), manual AS ( SELECT username_std, quota_min, quota_max, hour_pool AS hour_pool_override FROM `of-scheduler-proj.core.page_overrides` ), learned AS ( SELECT username_std, quota_nudge, hour_pool_nudge, price_mode_bias FROM `of-scheduler-proj.core.page_knobs_learned_v1` ), ovr AS ( SELECT COALESCE(m.username_std, l.username_std) AS username_std, m.quota_min, m.quota_max, m.hour_pool_override, l.quota_nudge, l.hour_pool_nudge, l.price_mode_bias FROM manual m FULL OUTER JOIN learned l USING (username_std) ), nudged AS ( SELECT b.username_std, b.assigned_scheduler, b.tz, b.dow, b.is_burst_dow, CAST(b.ppv_quota_raw + COALESCE(o.quota_nudge,0) AS INT64) AS ppv_quota_nudged, CAST(b.hour_pool_raw + COALESCE(o.hour_pool_nudge,0) AS INT64) AS hour_pool_nudged, b.pack_min_hod, b.pack_max_hod, COALESCE(o.price_mode_bias, b.price_mode_default) AS price_mode_eff, o.quota_min, o.quota_max, o.hour_pool_override FROM base b LEFT JOIN ovr o USING (username_std) ) SELECT n.username_std, n.assigned_scheduler, n.tz, n.dow, CAST(LEAST(COALESCE(n.quota_max, 99), GREATEST(COALESCE(n.quota_min, 0), n.ppv_quota_nudged)) AS INT64) AS ppv_quota, CAST(LEAST(24, GREATEST(6, COALESCE(n.hour_pool_override, n.hour_pool_nudged))) AS INT64) AS hour_pool, CAST(COALESCE(n.is_burst_dow,0) AS INT64) AS is_burst_dow, n.pack_min_hod, n.pack_max_hod, n.price_mode_eff FROM nudged n ORDER BY username_std, dow  


****** View: mart.v_daily_quota_policy_from_pack_v1 ******
Table of-scheduler-proj:mart.v_daily_quota_policy_from_pack_v1

                                       Query                                        
 ---------------------------------------------------------------------------------- 
  WITH pages AS (                                                                   
    SELECT d.username_std,                                                          
           d.tz,                                                                    
           d.assigned_scheduler,                                                    
           t.tier_final AS tier,                                                    
           v.page_type                                                              
    FROM `of-scheduler-proj.core.page_dim` d                                        
    LEFT JOIN `of-scheduler-proj.core.v_page_tier_final_v1` t USING (username_std)  
    LEFT JOIN `of-scheduler-proj.core.v_pages` v USING (username_std)               
    WHERE t.tier_final IS NOT NULL                                                  
  ),                                                                                
  map AS (                                                                          
    SELECT tier, page_type, pack_id                                                 
    FROM `of-scheduler-proj.core.starter_pack_by_tier_v1`                           
  ),                                                                                
  policy AS (                                                                       
    SELECT pack_id, dow, ppv_quota,                                                 
           COALESCE(hour_pool, LEAST(24, GREATEST(8, 3*ppv_quota))) AS hour_pool,   
           min_hod, max_hod, price_mode_default, is_burst_dow                       
    FROM `of-scheduler-proj.core.starter_pack_policy_v1`                            
  )                                                                                 
  SELECT                                                                            
    p.username_std, p.assigned_scheduler, p.tz, pol.dow,                            
    pol.ppv_quota, pol.hour_pool, pol.is_burst_dow,                                 
    pol.min_hod AS pack_min_hod, pol.max_hod AS pack_max_hod,                       
    pol.price_mode_default                                                          
  FROM pages p                                                                      
  JOIN map m                                                                        
    ON m.tier = p.tier AND (m.page_type IS NULL OR m.page_type = p.page_type)       
  JOIN policy pol USING (pack_id)                                                   


****** View: mart.v_daily_quota_policy_v3 ******
Table of-scheduler-proj:mart.v_daily_quota_policy_v3

                                         Query                                          
 -------------------------------------------------------------------------------------- 
  SELECT username_std, assigned_scheduler, tz, dow, ppv_quota, hour_pool, is_burst_dow  
  FROM `of-scheduler-proj.mart.v_daily_quota_policy_final_v1`                           


****** View: mart.v_dm_send_facts_v3 ******
Table of-scheduler-proj:mart.v_dm_send_facts_v3

                             Query                             
 ------------------------------------------------------------- 
  SELECT * FROM `of-scheduler-proj.mart.fn_dm_send_facts`(90)  


****** View: mart.v_dm_slot_eb_28d_v3 ******
Table of-scheduler-proj:mart.v_dm_slot_eb_28d_v3

                                               Query                                               
 ------------------------------------------------------------------------------------------------- 
  WITH base AS (                                                                                   
    SELECT username_page, dow, hod, price_usd, sent, viewed, purchased, earnings                   
    FROM `of-scheduler-proj.mart.fn_dm_send_facts`(28)                                             
  ),                                                                                               
  slot AS (                                                                                        
    SELECT                                                                                         
      username_page, dow, hod,                                                                     
      CASE                                                                                         
        WHEN price_usd IS NULL OR price_usd = 0 THEN 'free'                                        
        WHEN price_usd < 10 THEN 'p1'                                                              
        WHEN price_usd < 20 THEN 'p2'                                                              
        ELSE 'p3'                                                                                  
      END AS price_band,                                                                           
      COUNT(*)      AS msg_cnt,                                                                    
      SUM(sent)     AS sent_sum,                                                                   
      SUM(viewed)   AS viewed_sum,                                                                 
      SUM(purchased) AS purchased_sum,                                                             
      SUM(earnings) AS earnings_sum                                                                
    FROM base                                                                                      
    GROUP BY 1,2,3,4                                                                               
  )                                                                                                
  SELECT                                                                                           
    s.username_page, s.dow, s.hod, s.price_band, s.msg_cnt,                                        
    s.sent_sum, s.viewed_sum, s.purchased_sum, s.earnings_sum,                                     
    SAFE_DIVIDE(s.viewed_sum    + 200 * p.mu_open,     s.sent_sum + 200) AS open_rate_eb,          
    SAFE_DIVIDE(s.purchased_sum + 200 * p.mu_buy_sent, s.sent_sum + 200) AS buy_rate_sent_eb,      
    SAFE_DIVIDE(s.earnings_sum, NULLIF(s.sent_sum,0))                    AS rps_raw,               
    SAFE_DIVIDE(s.sent_sum, s.sent_sum + 400) * SAFE_DIVIDE(s.earnings_sum, NULLIF(s.sent_sum,0))  
      + SAFE_DIVIDE(400, s.sent_sum + 400) * p.mu_rps                    AS rps_eb                 
  FROM slot s                                                                                      
  JOIN `of-scheduler-proj.mart.v_page_priors_l90_v3` p USING (username_page)                       


****** View: mart.v_dm_style_lift_28d_v3 ******
Table of-scheduler-proj:mart.v_dm_style_lift_28d_v3

                                                          Query                                                          
 ----------------------------------------------------------------------------------------------------------------------- 
  WITH cfg AS (                                                                                                          
    SELECT                                                                                                               
      CAST(COALESCE(MAX(CASE WHEN setting_key='half_life_days_rev' THEN setting_val END), '45') AS FLOAT64) AS hl_days,  
      CAST(COALESCE(MAX(CASE WHEN setting_key='prior_k_style'      THEN setting_val END), '30') AS FLOAT64) AS k_style   
    FROM `of-scheduler-proj.core.settings_modeling`                                                                      
  ),                                                                                                                     
  base AS (                                                                                                              
    SELECT                                                                                                               
      f.username_page, f.dow, f.hod, f.caption_hash, f.rps, f.sending_ts_utc,                                            
      `of-scheduler-proj.util.halflife_weight`(f.sending_ts_utc, (SELECT hl_days FROM cfg)) AS w                         
    FROM `of-scheduler-proj.mart.fn_dm_send_facts`(28) f                                                                 
  ),                                                                                                                     
  slot_baseline AS (                                                                                                     
    SELECT                                                                                                               
      username_page, dow, hod,                                                                                           
      SAFE_DIVIDE(SUM(rps*w), NULLIF(SUM(w),0)) AS baseline_rps,                                                         
      SUM(w) AS slot_w                                                                                                   
    FROM base                                                                                                            
    GROUP BY 1,2,3                                                                                                       
  ),                                                                                                                     
  feat AS (                                                                                                              
    SELECT                                                                                                               
      username_page, caption_hash, len_bin, emoji_bin, has_cta, has_urgency, ends_with_question                          
    FROM `of-scheduler-proj.core.v_caption_candidates_features_v3`                                                       
  ),                                                                                                                     
  agg AS (                                                                                                               
    SELECT                                                                                                               
      b.username_page, b.dow, b.hod,                                                                                     
      f.len_bin, f.emoji_bin, f.has_cta, f.has_urgency, f.ends_with_question,                                            
      COUNT(*) AS sends,                                                                                                 
      SUM(b.w) AS eff_w,                                                                                                 
      SAFE_DIVIDE(SUM(b.rps*b.w), NULLIF(SUM(b.w),0)) AS rps_w                                                           
    FROM base b                                                                                                          
    JOIN feat f                                                                                                          
      USING (username_page, caption_hash)                                                                                
    GROUP BY 1,2,3,4,5,6,7,8                                                                                             
  )                                                                                                                      
  SELECT                                                                                                                 
    a.username_page, a.dow, a.hod,                                                                                       
    a.len_bin, a.emoji_bin, a.has_cta, a.has_urgency, a.ends_with_question,                                              
    a.sends, a.eff_w,                                                                                                    
    a.rps_w,                                                                                                             
    sb.baseline_rps,                                                                                                     
    -- raw lift (decayed)                                                                                                
    SAFE_DIVIDE(a.rps_w, NULLIF(sb.baseline_rps,0)) - 1 AS lift_vs_slot,                                                 
    -- smoothed lift: shrink towards slot baseline with k_style pseudo-weight                                            
    SAFE_DIVIDE(                                                                                                         
      (a.eff_w * a.rps_w + (SELECT k_style FROM cfg) * sb.baseline_rps),                                                 
      NULLIF(a.eff_w + (SELECT k_style FROM cfg), 0)                                                                     
    ) / NULLIF(sb.baseline_rps,0) - 1 AS lift_vs_slot_smooth,                                                            
    -- clamped (safe) lift to avoid extreme effects                                                                      
    GREATEST(-0.50, LEAST(0.50,                                                                                          
      SAFE_DIVIDE(                                                                                                       
        (a.eff_w * a.rps_w + (SELECT k_style FROM cfg) * sb.baseline_rps),                                               
        NULLIF(a.eff_w + (SELECT k_style FROM cfg), 0)                                                                   
      ) / NULLIF(sb.baseline_rps,0) - 1                                                                                  
    )) AS lift_vs_slot_smooth_clamped                                                                                    
  FROM agg a                                                                                                             
  JOIN slot_baseline sb                                                                                                  
    USING (username_page, dow, hod)                                                                                      


****** View: mart.v_hod_heat_180d_local ******
Table of-scheduler-proj:mart.v_hod_heat_180d_local

                                 Query                                 
 --------------------------------------------------------------------- 
  SELECT                                                               
    username_std,                                                      
    hod_local,                                                         
    COUNT(*) AS msg_count,                                             
    SUM(sent) AS w_sent,                                               
    SUM(viewed) AS w_viewed,                                           
    SUM(purchased) AS w_purchased,                                     
    SUM(earnings_usd) AS revenue,                                      
    SAFE_DIVIDE(SUM(viewed),   NULLIF(SUM(sent),0)) AS view_rate,      
    SAFE_DIVIDE(SUM(purchased),NULLIF(SUM(sent),0)) AS buy_rate,       
    SAFE_DIVIDE(SUM(earnings_usd), NULLIF(COUNT(*),0)) AS rev_per_msg  
  FROM `of-scheduler-proj.mart.v_messages_local_180d`                  
  GROUP BY username_std, hod_local                                     


****** View: mart.v_learning_signals_28d_v1 ******
Table of-scheduler-proj:mart.v_learning_signals_28d_v1

                                          Query                                          
 --------------------------------------------------------------------------------------- 
  WITH mf AS (                                                                           
    SELECT                                                                               
      username_std,                                                                      
      DATE(TIMESTAMP_TRUNC(sending_ts, DAY)) AS d,                                       
      SAFE_CAST(price_usd    AS NUMERIC) AS price_usd,                                   
      SAFE_CAST(earnings_usd AS NUMERIC) AS earnings_usd                                 
    FROM `of-scheduler-proj.core.message_facts`                                          
    WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 28 DAY)              
  ),                                                                                     
  by_page AS (                                                                           
    SELECT                                                                               
      username_std,                                                                      
      COUNT(*) AS sends_28d,                                                             
      SUM(earnings_usd) AS earnings_28d,                                                 
      SAFE_DIVIDE(SUM(earnings_usd), COUNT(*)) AS rps_28d,                               
      APPROX_QUANTILES(price_usd, 101)[OFFSET(50)] AS p50_price,                         
      COUNTIF(earnings_usd > 0) / COUNT(*) AS sell_rate                                  
    FROM mf                                                                              
    GROUP BY username_std                                                                
  ),                                                                                     
  trend AS (                                                                             
    SELECT                                                                               
      a.username_std,                                                                    
      SAFE_DIVIDE(a.earnings, GREATEST(a.sends,1)) AS rps_recent,                        
      SAFE_DIVIDE(b.earnings, GREATEST(b.sends,1)) AS rps_prev,                          
      SAFE_DIVIDE(a.earnings - b.earnings, NULLIF(b.earnings,0)) AS earnings_lift_ratio  
    FROM (                                                                               
      SELECT username_std, COUNT(*) AS sends, SUM(earnings_usd) AS earnings              
      FROM mf                                                                            
      WHERE d >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)                               
      GROUP BY username_std                                                              
    ) a                                                                                  
    FULL JOIN (                                                                          
      SELECT username_std, COUNT(*) AS sends, SUM(earnings_usd) AS earnings              
      FROM mf                                                                            
      WHERE d < DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)                                
        AND d >= DATE_SUB(CURRENT_DATE(), INTERVAL 28 DAY)                               
      GROUP BY username_std                                                              
    ) b USING (username_std)                                                             
  )                                                                                      
  SELECT                                                                                 
    p.username_std, p.sends_28d, p.earnings_28d, p.rps_28d, p.p50_price, p.sell_rate,    
    t.rps_recent, t.rps_prev, t.earnings_lift_ratio                                      
  FROM by_page p                                                                         
  LEFT JOIN trend t USING (username_std)                                                 


****** View: mart.v_messages_active_180d ******
Table of-scheduler-proj:mart.v_messages_active_180d

                                    Query                                     
 ---------------------------------------------------------------------------- 
  SELECT m.*                                                                  
  FROM `of-scheduler-proj.core.message_facts` m                               
  JOIN `of-scheduler-proj.core.page_dim` p USING (username_std)               
  WHERE m.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 180 DAY)  


****** View: mart.v_messages_local_180d ******
Table of-scheduler-proj:mart.v_messages_local_180d

                                               Query                                                
 -------------------------------------------------------------------------------------------------- 
  SELECT                                                                                            
    m.*,                                                                                            
    DATETIME(m.sending_ts, p.tz) AS dt_local,                                                       
    EXTRACT(HOUR FROM DATETIME(m.sending_ts, p.tz)) AS hod_local,                                   
    MOD(EXTRACT(DAYOFWEEK FROM DATETIME(m.sending_ts, p.tz)) + 5, 7) AS dow_local  -- Mon=0..Sun=6  
  FROM `of-scheduler-proj.core.message_facts` m                                                     
  JOIN `of-scheduler-proj.core.page_dim` p USING (username_std)                                     
  WHERE m.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 180 DAY)                        


****** View: mart.v_mm_base_180d ******
Table of-scheduler-proj:mart.v_mm_base_180d

                                              Query                                              
 ----------------------------------------------------------------------------------------------- 
  SELECT                                                                                         
    LOWER(TRIM(m.username_std)) AS username_std,                                                 
    m.sending_ts,                                                                                
    DATETIME(m.sending_ts, p.tz) AS sending_dt_local,                                            
    DATE(m.sending_ts, p.tz)     AS date_local,                                                  
    EXTRACT(HOUR FROM DATETIME(m.sending_ts, p.tz)) AS hod_local,                                
    MOD(EXTRACT(DAYOFWEEK FROM DATE(m.sending_ts, p.tz)) + 5, 7) AS dow_local,  -- Mon=0..Sun=6  
    SAFE_CAST(m.price_usd    AS FLOAT64) AS price_usd,                                           
    SAFE_CAST(m.earnings_usd AS FLOAT64) AS earnings_usd,                                        
    SAFE_CAST(m.sent         AS INT64)   AS sent,                                                
    SAFE_CAST(m.viewed       AS INT64)   AS viewed,                                              
    SAFE_CAST(m.purchased    AS INT64)   AS purchased,                                           
    CASE WHEN m.price_usd IS NOT NULL AND m.price_usd > 0 THEN 1 ELSE 0 END AS is_ppv            
  FROM `of-scheduler-proj.core.message_facts` m                                                  
  JOIN `of-scheduler-proj.core.page_dim` p USING (username_std)                                  
  WHERE m.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 180 DAY)                     


****** View: mart.v_mm_dow_hod_180d_local_v2 ******
Table of-scheduler-proj:mart.v_mm_dow_hod_180d_local_v2

                                                       Query                                                        
 ------------------------------------------------------------------------------------------------------------------ 
  WITH b AS (                                                                                                       
    SELECT                                                                                                          
      username_std,                                                                                                 
      sending_ts,                                                                                                   
      date_local,                                                                                                   
      dow_local,                                                                                                    
      hod_local,                                                                                                    
      price_usd,                                                                                                    
      earnings_usd,                                                                                                 
      sent,                                                                                                         
      viewed,                                                                                                       
      purchased,                                                                                                    
      is_ppv                                                                                                        
    FROM `of-scheduler-proj.mart.v_mm_base_180d`                                                                    
  ),                                                                                                                
  by_slot AS (                                                                                                      
    SELECT                                                                                                          
      username_std,                                                                                                 
      dow_local,                                                                                                    
      hod_local,                                                                                                    
      COUNT(*)                                                AS message_events,     -- count of MM sends (events)  
      SUM(sent)                                               AS sent,               -- total recipients            
      SUM(viewed)                                             AS viewed,                                            
      SUM(purchased)                                          AS purchased,                                         
      SUM(earnings_usd)                                       AS revenue,                                           
      SAFE_DIVIDE(SUM(viewed),    NULLIF(SUM(sent), 0))       AS view_rate,                                         
      SAFE_DIVIDE(SUM(purchased), NULLIF(SUM(sent), 0))       AS purchase_rate,                                     
      SAFE_DIVIDE(SUM(earnings_usd), NULLIF(SUM(sent), 0))    AS rev_per_recipient,  -- $ per delivered recipient   
      SAFE_DIVIDE(SUM(earnings_usd), NULLIF(COUNT(*), 0))     AS rev_per_send,       -- $ per MM event              
      -- 45-day half-life recency decay on revenue                                                                  
      SUM(earnings_usd * EXP(-TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), sending_ts, DAY)/45.0)) AS score                  
    FROM b                                                                                                          
    GROUP BY username_std, dow_local, hod_local                                                                     
  ),                                                                                                                
  stability AS (                                                                                                    
    -- how many distinct days contributed to this slot (useful for filtering thin data)                             
    SELECT                                                                                                          
      username_std,                                                                                                 
      dow_local,                                                                                                    
      hod_local,                                                                                                    
      COUNT(*) AS days_covered                                                                                      
    FROM (                                                                                                          
      SELECT DISTINCT username_std, dow_local, hod_local, date_local                                                
      FROM b                                                                                                        
    )                                                                                                               
    GROUP BY username_std, dow_local, hod_local                                                                     
  )                                                                                                                 
  SELECT                                                                                                            
    s.username_std,                                                                                                 
    s.dow_local,                                                                                                    
    s.hod_local,                                                                                                    
    s.message_events,                                                                                               
    s.sent,                                                                                                         
    s.viewed,                                                                                                       
    s.purchased,                                                                                                    
    s.revenue,                                                                                                      
    s.view_rate,                                                                                                    
    s.purchase_rate,                                                                                                
    s.rev_per_recipient,                                                                                            
    s.rev_per_send,                                                                                                 
    s.score,                                                                                                        
    st.days_covered                                                                                                 
  FROM by_slot s                                                                                                    
  LEFT JOIN stability st                                                                                            
    ON st.username_std = s.username_std                                                                             
   AND st.dow_local    = s.dow_local                                                                                
   AND st.hod_local    = s.hod_local                                                                                


****** View: mart.v_mm_price_profile_90d_v2 ******
Table of-scheduler-proj:mart.v_mm_price_profile_90d_v2

                                    Query                                    
 --------------------------------------------------------------------------- 
  WITH f AS (                                                                
    SELECT                                                                   
      username_std,                                                          
      price_usd,                                                             
      earnings_usd                                                           
    FROM `of-scheduler-proj.mart.v_mm_base_180d`                             
    WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY)  
      AND price_usd IS NOT NULL                                              
  ),                                                                         
  agg AS (                                                                   
    SELECT                                                                   
      username_std,                                                          
      APPROX_QUANTILES(price_usd, 20)[OFFSET(6)]  AS p35,                    
      APPROX_QUANTILES(price_usd, 20)[OFFSET(10)] AS p50,                    
      APPROX_QUANTILES(price_usd, 20)[OFFSET(12)] AS p60,                    
      APPROX_QUANTILES(price_usd, 20)[OFFSET(15)] AS p80,                    
      APPROX_QUANTILES(price_usd, 20)[OFFSET(17)] AS p90,                    
      CORR(price_usd, earnings_usd)               AS corr                    
    FROM f                                                                   
    GROUP BY username_std                                                    
  )                                                                          
  SELECT                                                                     
    username_std,                                                            
    p35, p50, p60, p80, p90,                                                 
    corr AS corr_price_rev,                                                  
    CASE                                                                     
      WHEN corr >=  0.25 THEN 'premium'                                      
      WHEN corr <= -0.15 THEN 'value'                                        
      ELSE 'balanced'                                                        
    END AS price_mode                                                        
  FROM agg                                                                   


****** View: mart.v_non_dm_windows_7d_v1 ******
Table of-scheduler-proj:mart.v_non_dm_windows_7d_v1

                                                Query                                                
 --------------------------------------------------------------------------------------------------- 
  WITH cfg AS (                                                                                      
    SELECT                                                                                           
      -- CSVs from settings                                                                          
      (SELECT setting_val FROM `of-scheduler-proj.core.settings_modeling`                            
       WHERE setting_key='drip_slots_csv'        LIMIT 1) AS drip_csv,                               
      (SELECT setting_val FROM `of-scheduler-proj.core.settings_modeling`                            
       WHERE setting_key='renewal_times_csv'     LIMIT 1) AS renew_csv,                              
      (SELECT setting_val FROM `of-scheduler-proj.core.settings_modeling`                            
       WHERE setting_key='link_drop_times_csv'   LIMIT 1) AS link_csv,                               
      CAST((SELECT setting_val FROM `of-scheduler-proj.core.settings_modeling`                       
            WHERE setting_key='randomize_offset_minutes' LIMIT 1) AS INT64) AS rand_off              
  ),                                                                                                 
  pages AS (                                                                                         
    SELECT username_std, COALESCE(tz,'UTC') AS tz                                                    
    FROM `of-scheduler-proj.core.page_dim`                                                           
    WHERE COALESCE(LOWER(CAST(is_active AS STRING)) IN ('true','t','1','yes','y'), TRUE)             
  ),                                                                                                 
  days AS (                                                                                          
    SELECT p.username_std, p.tz,                                                                     
           DATE_ADD(CURRENT_DATE(p.tz), INTERVAL d DAY) AS d,                                        
           d AS day_idx                                                                              
    FROM pages p                                                                                     
    CROSS JOIN UNNEST(GENERATE_ARRAY(0,6)) AS d                                                      
  ),                                                                                                 
  -- mark paid (renewals only for these)                                                             
  paid AS (                                                                                          
    SELECT username_std, COALESCE(renew_on_pct,0) > 0 AS is_paid                                     
    FROM `of-scheduler-proj.staging.creator_stats_latest`                                            
  ),                                                                                                 
                                                                                                     
  /* -------- DripSet: "HH:MM|TYPE" where TYPE in {MM, Wall} -------- */                             
  drip_tokens AS (                                                                                   
    SELECT                                                                                           
      dt.username_std, dt.tz, dt.d, dt.day_idx,                                                      
      SPLIT(tok, '|')[OFFSET(0)] AS hhmm,                                                            
      SPLIT(tok, '|')[OFFSET(1)] AS ch   -- 'MM' or 'Wall'                                           
    FROM days dt, cfg, UNNEST(SPLIT(cfg.drip_csv, ',')) AS tok                                       
  ),                                                                                                 
  drip AS (                                                                                          
    SELECT                                                                                           
      username_std,                                                                                  
      -- local DATETIME (no tz arg)                                                                  
      DATETIME(d, PARSE_TIME('%H:%M', hhmm)) AS base_dt_local,                                       
      ch AS channel,  -- 'MM' or 'Wall'                                                              
      -- deterministic jitter in [-rand_off, +rand_off]                                              
      CAST(                                                                                          
        MOD(ABS(FARM_FINGERPRINT(CONCAT(username_std,'|',CAST(d AS STRING),'|DRIP|',hhmm,'|',ch))),  
            2*(SELECT rand_off FROM cfg)+1                                                           
        ) - (SELECT rand_off FROM cfg)                                                               
        AS INT64                                                                                     
      ) AS minute_jitter,                                                                            
      tz                                                                                             
    FROM drip_tokens                                                                                 
  ),                                                                                                 
                                                                                                     
  /* -------- Renewals: paid pages only, times listed in renew_csv -------- */                       
  renew_tokens AS (                                                                                  
    SELECT dt.username_std, dt.tz, dt.d, dt.day_idx, tok AS hhmm                                     
    FROM days dt, cfg, UNNEST(SPLIT(cfg.renew_csv, ',')) AS tok                                      
    JOIN paid p USING (username_std)                                                                 
    WHERE p.is_paid = TRUE                                                                           
  ),                                                                                                 
  renew AS (                                                                                         
    SELECT                                                                                           
      username_std,                                                                                  
      DATETIME(d, PARSE_TIME('%H:%M', hhmm)) AS base_dt_local,                                       
      'Renewal' AS channel,                                                                          
      CAST(                                                                                          
        MOD(ABS(FARM_FINGERPRINT(CONCAT(username_std,'|',CAST(d AS STRING),'|RENEW|',hhmm))),        
            2*(SELECT rand_off FROM cfg)+1                                                           
        ) - (SELECT rand_off FROM cfg)                                                               
        AS INT64                                                                                     
      ) AS minute_jitter,                                                                            
      tz                                                                                             
    FROM renew_tokens                                                                                
  ),                                                                                                 
                                                                                                     
  /* -------- Link drops: windows like "HH:MM-HH:MM" → pick a minute inside -------- */              
  link_tokens AS (                                                                                   
    SELECT                                                                                           
      dt.username_std, dt.tz, dt.d, dt.day_idx,                                                      
      SPLIT(tok, '-')[OFFSET(0)] AS hhmm_start,                                                      
      SPLIT(tok, '-')[OFFSET(1)] AS hhmm_end                                                         
    FROM days dt, cfg, UNNEST(SPLIT(cfg.link_csv, ',')) AS tok                                       
  ),                                                                                                 
  link_picked AS (                                                                                   
    SELECT                                                                                           
      lt.username_std,                                                                               
      -- local window start/end as DATETIME (no tz)                                                  
      DATETIME(lt.d, PARSE_TIME('%H:%M', lt.hhmm_start)) AS win_start_dt,                            
      DATETIME(lt.d, PARSE_TIME('%H:%M', lt.hhmm_end))   AS win_end_dt,                              
      'LinkDrop' AS channel,                                                                         
      lt.tz                                                                                          
    FROM link_tokens lt                                                                              
  ),                                                                                                 
  link_final AS (                                                                                    
    SELECT                                                                                           
      username_std,                                                                                  
      DATETIME_ADD(win_start_dt,                                                                     
        INTERVAL CAST(MOD(                                                                           
          ABS(FARM_FINGERPRINT(CONCAT(username_std,'|',CAST(win_start_dt AS STRING),'|link'))),      
          GREATEST(DATETIME_DIFF(win_end_dt, win_start_dt, MINUTE), 1)                               
        ) AS INT64) MINUTE                                                                           
      ) AS base_dt_local,                                                                            
      'LinkDrop' AS channel,                                                                         
      0 AS minute_jitter,                                                                            
      tz                                                                                             
    FROM link_picked                                                                                 
  ),                                                                                                 
                                                                                                     
  /* -------- Union + compute outputs -------- */                                                    
  unioned AS (                                                                                       
    SELECT * FROM drip                                                                               
    UNION ALL SELECT * FROM renew                                                                    
    UNION ALL SELECT * FROM link_final                                                               
  ),                                                                                                 
  with_dt AS (                                                                                       
    SELECT                                                                                           
      u.username_std,                                                                                
      -- final local datetime                                                                        
      DATETIME_ADD(u.base_dt_local, INTERVAL u.minute_jitter MINUTE) AS planned_local_datetime,      
      u.channel,                                                                                     
      u.tz                                                                                           
    FROM unioned u                                                                                   
  )                                                                                                  
  SELECT                                                                                             
    w.username_std,                                                                                  
    DATE(w.planned_local_datetime) AS date_local,                                                    
    EXTRACT(HOUR FROM w.planned_local_datetime) AS hod_local,                                        
    -- map channel to a normalized kind for ops                                                      
    CASE                                                                                             
      WHEN w.channel='MM'    THEN 'drip_mm'                                                          
      WHEN w.channel='Wall'  THEN 'drip_wall'                                                        
      WHEN w.channel='Renewal' THEN 'renewal'                                                        
      ELSE 'link_drop'                                                                               
    END AS slot_kind,                                                                                
    w.channel,                                                                                       
    w.planned_local_datetime,                                                                        
    -- if you need UTC for automation, compute it here                                               
    TIMESTAMP(w.planned_local_datetime, w.tz) AS scheduled_datetime_utc                              
  FROM with_dt w                                                                                     
  ORDER BY username_std, planned_local_datetime, slot_kind                                           


****** View: mart.v_page_priors_l90_v3 ******
Table of-scheduler-proj:mart.v_page_priors_l90_v3

                                Query                                 
 -------------------------------------------------------------------- 
  SELECT                                                              
    username_page,                                                    
    SUM(viewed)    AS viewed_sum,                                     
    SUM(sent)      AS sent_sum,                                       
    SUM(purchased) AS purchased_sum,                                  
    SAFE_DIVIDE(SUM(viewed),    NULLIF(SUM(sent),0)) AS mu_open,      
    SAFE_DIVIDE(SUM(purchased), NULLIF(SUM(sent),0)) AS mu_buy_sent,  
    SAFE_DIVIDE(SUM(earnings),  NULLIF(SUM(sent),0)) AS mu_rps        
  FROM `of-scheduler-proj.mart.fn_dm_send_facts`(90)                  
  GROUP BY 1                                                          


****** View: mart.v_page_volume_profile_28d ******
Table of-scheduler-proj:mart.v_page_volume_profile_28d

                                                         Query                                                         
 --------------------------------------------------------------------------------------------------------------------- 
  WITH daily AS (                                                                                                      
    SELECT mf.username_std,                                                                                            
           DATE(mf.sending_ts, pd.tz) AS date_local,                                                                   
           COUNTIF(mf.price_usd > 0) AS ppv_cnt,                                                                       
           SUM(CASE WHEN mf.price_usd > 0 THEN mf.earnings_usd ELSE 0 END) AS rev_ppv                                  
    FROM `of-scheduler-proj.core.message_facts` mf                                                                     
    JOIN `of-scheduler-proj.core.page_dim` pd USING (username_std)                                                     
    WHERE mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 28 DAY)                                         
    GROUP BY mf.username_std, date_local                                                                               
  ),                                                                                                                   
  elastic AS (                                                                                                         
    SELECT                                                                                                             
      username_std,                                                                                                    
      AVG(ppv_cnt) AS avg_ppv_per_day,                                                                                 
      APPROX_QUANTILES(ppv_cnt, 20)[OFFSET(18)] AS q90_ppv_per_day,                                                    
      CORR(ppv_cnt, rev_ppv) AS corr_vol_rev,                                                                          
      CASE WHEN VAR_POP(ppv_cnt)=0 THEN 0                                                                              
           ELSE COVAR_POP(ppv_cnt, rev_ppv)/VAR_POP(ppv_cnt) END AS slope_rev_per_ppv                                  
    FROM daily GROUP BY username_std                                                                                   
  ),                                                                                                                   
  sends AS (                                                                                                           
    SELECT mf.username_std,                                                                                            
           DATE(mf.sending_ts, pd.tz) AS date_local,                                                                   
           ROW_NUMBER() OVER (PARTITION BY mf.username_std, DATE(mf.sending_ts, pd.tz) ORDER BY mf.sending_ts) AS rn,  
           COUNT(*) OVER  (PARTITION BY mf.username_std, DATE(mf.sending_ts, pd.tz)) AS n_sends,                       
           CASE WHEN mf.price_usd > 0 THEN mf.earnings_usd ELSE 0 END AS rev                                           
    FROM `of-scheduler-proj.core.message_facts` mf                                                                     
    JOIN `of-scheduler-proj.core.page_dim` pd USING (username_std)                                                     
    WHERE mf.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 28 DAY)                                         
      AND mf.price_usd > 0                                                                                             
  ),                                                                                                                   
  fatigue AS (                                                                                                         
    SELECT username_std,                                                                                               
           SAFE_DIVIDE(AVG(CASE WHEN rn=n_sends THEN rev END),                                                         
                       NULLIF(AVG(CASE WHEN rn=1 THEN rev END),0)) AS fatigue_ratio                                    
    FROM sends WHERE n_sends >= 2 GROUP BY username_std                                                                
  )                                                                                                                    
  SELECT                                                                                                               
    e.username_std,                                                                                                    
    e.avg_ppv_per_day,                                                                                                 
    e.q90_ppv_per_day,                                                                                                 
    e.corr_vol_rev,                                                                                                    
    e.slope_rev_per_ppv,                                                                                               
    COALESCE(f.fatigue_ratio,1.0) AS fatigue_ratio,                                                                    
    CASE                                                                                                               
      WHEN e.slope_rev_per_ppv >= 12 AND COALESCE(f.fatigue_ratio,1.0) >= 0.70 THEN 1.50                               
      WHEN e.slope_rev_per_ppv >=  8 AND COALESCE(f.fatigue_ratio,1.0) >= 0.65 THEN 1.30                               
      WHEN e.slope_rev_per_ppv >=  4                                    THEN 1.15                                      
      WHEN e.slope_rev_per_ppv <=  1 OR COALESCE(f.fatigue_ratio,1.0) < 0.50 THEN 0.90                                 
      ELSE 1.00                                                                                                        
    END AS volume_boost                                                                                                
  FROM elastic e LEFT JOIN fatigue f USING (username_std)                                                              


****** View: mart.v_page_volume_profile_28d_v2 ******
Table of-scheduler-proj:mart.v_page_volume_profile_28d_v2

                                               Query                                                
 -------------------------------------------------------------------------------------------------- 
  WITH daily AS (                                                                                   
    SELECT                                                                                          
      username_std,                                                                                 
      date_local,                                                                                   
      COUNT(*)                          AS sends,                                                   
      SUM(is_ppv)                       AS ppv_attempts,                                            
      SUM(sent)                         AS sent,                                                    
      SUM(purchased)                    AS purchased,                                               
      SUM(earnings_usd)                 AS revenue                                                  
    FROM `of-scheduler-proj.mart.v_mm_base_180d`                                                    
    WHERE date_local >= DATE_SUB(CURRENT_DATE(), INTERVAL 28 DAY)                                   
    GROUP BY username_std, date_local                                                               
  ),                                                                                                
  agg AS (                                                                                          
    SELECT                                                                                          
      username_std,                                                                                 
      COUNT(*)                                        AS days_active_28d,                           
      SUM(sends)                                      AS sends_28d,                                 
      SUM(ppv_attempts)                               AS ppv_attempts_28d,                          
      SUM(sent)                                       AS sent_28d,                                  
      SUM(purchased)                                  AS purchased_28d,                             
      SUM(revenue)                                    AS earnings_28d,                              
      AVG(ppv_attempts)                               AS avg_ppv_per_day,                           
      APPROX_QUANTILES(ppv_attempts, 100)[OFFSET(90)] AS q90_ppv_per_day,                           
      SAFE_DIVIDE(SUM(purchased), NULLIF(SUM(ppv_attempts),0)) AS buy_rate_ppv_28d,                 
      SAFE_DIVIDE(SUM(revenue),   NULLIF(SUM(sends),0))        AS rev_per_send_28d                  
    FROM daily                                                                                      
    GROUP BY username_std                                                                           
  ),                                                                                                
  globals AS (                                                                                      
    SELECT                                                                                          
      APPROX_QUANTILES(avg_ppv_per_day, 100)[OFFSET(80)] AS p80_avg_ppv                             
    FROM agg                                                                                        
  )                                                                                                 
  SELECT                                                                                            
    a.*,                                                                                            
    -- normalized multiplier around peer p80 (clamped)                                              
    LEAST(1.4, GREATEST(0.8,                                                                        
      1.0 + (SAFE_DIVIDE(a.avg_ppv_per_day, NULLIF(g.p80_avg_ppv,0)) - 1.0) * 0.5                   
    )) AS volume_boost,                                                                             
    -- suggested quota bounds used downstream (still clamped again there)                           
    GREATEST(1, CAST(ROUND(a.avg_ppv_per_day + 1) AS INT64))                      AS qmin_suggest,  
    LEAST(6, GREATEST(3, CAST(ROUND(a.q90_ppv_per_day + 1) AS INT64)))            AS qmax_suggest   
  FROM agg a                                                                                        
  CROSS JOIN globals g                                                                              


****** View: mart.v_plan_export_next_7d ******
Table of-scheduler-proj:mart.v_plan_export_next_7d

                                           Query                                            
 ------------------------------------------------------------------------------------------ 
  SELECT                                                                                    
    username_std,                                                                           
    scheduler_name,                                                                         
    tz,                                                                                     
    date_local,                                                                             
    slot_rank,                                                                              
    hod_local,                                                                              
    price_usd,                                                                              
    planned_local_datetime,                                                                 
    scheduled_datetime_utc,                                                                 
    FORMAT_TIMESTAMP('%Y-%m-%d %H:%M:%S %Z', scheduled_datetime_utc) AS scheduled_utc_str,  
    FORMAT_DATETIME('%Y-%m-%d %H:%M', planned_local_datetime)        AS local_str           
  FROM `of-scheduler-proj.mart.weekly_template_7d_latest`                                   
  ORDER BY username_std, date_local, slot_rank                                              


****** View: mart.v_ppv_followup_bumps_v1 ******
Table of-scheduler-proj:mart.v_ppv_followup_bumps_v1

                                                         Query                                                          
 ---------------------------------------------------------------------------------------------------------------------- 
  WITH cfg AS (                                                                                                         
    SELECT                                                                                                              
      CAST(COALESCE(MAX(IF(setting_key = 'randomize_offset_minutes', setting_val, NULL)), '45') AS INT64) AS jitter_m   
    FROM `of-scheduler-proj.core.settings_modeling`                                                                     
  ),                                                                                                                    
  ppv AS (                                                                                                              
    SELECT t.username_std, t.tz, t.date_local, t.slot_rank, t.hod_local, t.price_usd                                    
    FROM `of-scheduler-proj.mart.weekly_template_7d_latest` t                                                           
    WHERE t.price_usd > 0                                                                                               
  ),                                                                                                                    
  level AS (                                                                                                            
    SELECT                                                                                                              
      p.*,                                                                                                              
      CASE                                                                                                              
        WHEN p.price_usd >= COALESCE(pr.p90, p.price_usd) THEN 'premium'                                                
        WHEN p.price_usd >= COALESCE(pr.p50, p.price_usd) THEN 'mid'                                                    
        ELSE 'teaser'                                                                                                   
      END AS ppv_level                                                                                                  
    FROM ppv p                                                                                                          
    LEFT JOIN `of-scheduler-proj.mart.v_mm_price_profile_90d_v2` pr USING (username_std)                                
  ),                                                                                                                    
  rules AS (                                                                                                            
    -- order_i = 0 are "pre" bumps; positive order_i are follow-ups                                                     
    SELECT 'teaser'   AS lvl, 0 AS order_i, -9999 AS min_off, -9999 AS max_off, FALSE AS is_real  -- no pre for teaser  
    UNION ALL SELECT 'teaser', 1,  20,  45, TRUE                                                                        
    UNION ALL SELECT 'mid',    0, -20, -15, TRUE                                                                        
    UNION ALL SELECT 'mid',    1,  15,  20, TRUE                                                                        
    UNION ALL SELECT 'mid',    2,  45,  45, TRUE                                                                        
    UNION ALL SELECT 'premium',0, -20, -15, TRUE                                                                        
    UNION ALL SELECT 'premium',1,  20,  30, TRUE                                                                        
    UNION ALL SELECT 'premium',2,  40,  55, TRUE                                                                        
  ),                                                                                                                    
  base AS (                                                                                                             
    SELECT                                                                                                              
      l.username_std,                                                                                                   
      l.tz,                                                                                                             
      l.date_local,                                                                                                     
      l.slot_rank,                                                                                                      
      l.hod_local,                                                                                                      
      l.ppv_level,                                                                                                      
      r.order_i,                                                                                                        
      r.is_real,                                                                                                        
      DATETIME(l.date_local, TIME(l.hod_local, 0, 0)) AS base_slot_dt_local,                                            
                                                                                                                        
      -- Deterministic pick in [min_off, max_off] using a stable key                                                    
      CAST(ROUND(                                                                                                       
        r.min_off + MOD(                                                                                                
          ABS(FARM_FINGERPRINT(CONCAT(                                                                                  
            CAST(l.username_std AS STRING),'|',                                                                         
            CAST(l.date_local   AS STRING),'|',                                                                         
            CAST(l.slot_rank    AS STRING),'|',                                                                         
            CAST(r.order_i      AS STRING)                                                                              
          ))),                                                                                                          
          (r.max_off - r.min_off + 1)                                                                                   
        )                                                                                                               
      ) AS INT64) AS picked_min                                                                                         
    FROM level l                                                                                                        
    JOIN rules r ON r.lvl = l.ppv_level                                                                                 
    WHERE r.is_real = TRUE                                                                                              
  ),                                                                                                                    
  expanded AS (                                                                                                         
    SELECT                                                                                                              
      b.*,                                                                                                              
      DATETIME_ADD(b.base_slot_dt_local, INTERVAL b.picked_min MINUTE) AS planned_dt_local                              
    FROM base b                                                                                                         
  ),                                                                                                                    
  jittered AS (                                                                                                         
    SELECT                                                                                                              
      e.*,                                                                                                              
      -- Deterministic jitter in [-jitter_m, +jitter_m] using a separate key namespace ("|J")                           
      DATETIME_ADD(                                                                                                     
        e.planned_dt_local,                                                                                             
        INTERVAL CAST(                                                                                                  
          MOD(                                                                                                          
            ABS(FARM_FINGERPRINT(CONCAT(                                                                                
              CAST(e.username_std AS STRING),'|',                                                                       
              CAST(e.date_local   AS STRING),'|',                                                                       
              CAST(e.slot_rank    AS STRING),'|',                                                                       
              CAST(e.order_i      AS STRING),'|','J'                                                                    
            ))),                                                                                                        
            (2 * (SELECT jitter_m FROM cfg) + 1)                                                                        
          ) - (SELECT jitter_m FROM cfg) AS INT64                                                                       
        ) MINUTE                                                                                                        
      ) AS planned_dt_local_j                                                                                           
    FROM expanded e                                                                                                     
  )                                                                                                                     
  SELECT                                                                                                                
    j.username_std,                                                                                                     
    j.date_local,                                                                                                       
    j.slot_rank,                                                                                                        
    j.ppv_level AS ppv_level,                                                                                           
    CASE WHEN j.order_i = 0 AND j.ppv_level IN ('mid','premium') THEN 'ppv_pre_teaser'                                  
         ELSE 'ppv_followup' END AS activity_type,                                                                      
    EXTRACT(HOUR   FROM j.planned_dt_local_j) AS hod_local,                                                             
    EXTRACT(MINUTE FROM j.planned_dt_local_j) AS minute_local,                                                          
    j.planned_dt_local_j AS planned_local_datetime,                                                                     
    TIMESTAMP(j.planned_dt_local_j, pd.tz)    AS scheduled_datetime_utc                                                 
  FROM jittered j                                                                                                       
  JOIN `of-scheduler-proj.core.page_dim` pd USING (username_std)                                                        


****** View: mart.v_ppv_price_curve_28d_v3 ******
Table of-scheduler-proj:mart.v_ppv_price_curve_28d_v3

                                 Query                                  
 ---------------------------------------------------------------------- 
  WITH ppv AS (                                                         
    SELECT * FROM `of-scheduler-proj.mart.fn_dm_send_facts`(28)         
    WHERE price_usd > 0                                                 
  )                                                                     
  SELECT                                                                
    username_page, dow, hod,                                            
    ROUND(price_usd) AS price_q,                                        
    SUM(sent)        AS sent_sum,                                       
    SUM(purchased)   AS purchased_sum,                                  
    SUM(earnings)    AS earnings_sum,                                   
    SAFE_DIVIDE(SUM(purchased), NULLIF(SUM(sent),0)) AS buy_rate_sent,  
    SAFE_DIVIDE(SUM(earnings),  NULLIF(SUM(sent),0)) AS rps             
  FROM ppv                                                              
  GROUP BY 1,2,3,4                                                      


****** View: mart.v_ppv_price_reco_lcb_28d_v3 ******
Table of-scheduler-proj:mart.v_ppv_price_reco_lcb_28d_v3

                                     Query                                      
 ------------------------------------------------------------------------------ 
  WITH eb AS (                                                                  
    SELECT                                                                      
      c.username_page, c.dow, c.hod, c.price_q,                                 
      c.sent_sum AS n, c.purchased_sum AS x,                                    
      SAFE_DIVIDE(c.purchased_sum + 200 * p.mu_buy_sent,                        
                  c.sent_sum      + 200) AS p_buy_eb                            
    FROM `of-scheduler-proj.mart.v_ppv_price_curve_28d_v3` c                    
    JOIN `of-scheduler-proj.mart.v_page_priors_l90_v3` p USING (username_page)  
  ),                                                                            
  lcb AS (                                                                      
    SELECT                                                                      
      e.*,                                                                      
      1.6448536269514722 AS z,                                                  
      GREATEST(e.n, 1)   AS n_eff,                                              
      (                                                                         
        (e.p_buy_eb + (POW(1.6448536269514722,2)/(2*GREATEST(e.n,1))) )         
        - 1.6448536269514722 * SQRT(                                            
            SAFE_DIVIDE(e.p_buy_eb*(1-e.p_buy_eb), GREATEST(e.n,1))             
            + POW(1.6448536269514722,2)/(4*POW(GREATEST(e.n,1),2))              
          )                                                                     
      ) / (1 + POW(1.6448536269514722,2)/GREATEST(e.n,1)) AS p_buy_lcb          
    FROM eb e                                                                   
  ),                                                                            
  scored AS (                                                                   
    SELECT                                                                      
      username_page, dow, hod, price_q,                                         
      p_buy_eb,                                                                 
      p_buy_lcb,                                                                
      price_q * p_buy_eb  AS rps_eb,                                            
      price_q * p_buy_lcb AS rps_lcb                                            
    FROM lcb                                                                    
  ),                                                                            
  ranked AS (                                                                   
    SELECT                                                                      
      s.*,                                                                      
      ROW_NUMBER() OVER (                                                       
        PARTITION BY username_page, dow, hod                                    
        ORDER BY rps_lcb DESC, price_q                                          
      ) AS rn                                                                   
    FROM scored s                                                               
  )                                                                             
  SELECT * EXCEPT(rn)                                                           
  FROM ranked                                                                   
  WHERE rn = 1                                                                  


****** View: mart.v_scheduler_kpis_7d_28d ******
Table of-scheduler-proj:mart.v_scheduler_kpis_7d_28d

                                                     Query                                                     
 ------------------------------------------------------------------------------------------------------------- 
  WITH m AS (                                                                                                  
    SELECT username_std, sending_ts, earnings_usd                                                              
    FROM `of-scheduler-proj.core.message_facts`                                                                
    WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 28 DAY)                                    
  ),                                                                                                           
  assign AS (                                                                                                  
    SELECT username_std, assigned_scheduler                                                                    
    FROM `of-scheduler-proj.core.page_dim`                                                                     
  )                                                                                                            
  SELECT                                                                                                       
    assign.assigned_scheduler AS scheduler,                                                                    
    SUM(IF(m.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY), m.earnings_usd, 0)) AS rev_7d,  
    SUM(m.earnings_usd) AS rev_28d,                                                                            
    COUNTIF(m.sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)) AS msgs_7d,                    
    COUNT(*) AS msgs_28d                                                                                       
  FROM m                                                                                                       
  JOIN assign USING (username_std)                                                                             
  GROUP BY scheduler                                                                                           
  ORDER BY rev_28d DESC                                                                                        


****** View: mart.v_send_to_perf_link_180d ******
Table of-scheduler-proj:mart.v_send_to_perf_link_180d

                                                    Query                                                    
 ----------------------------------------------------------------------------------------------------------- 
  WITH ss AS (                                                                                               
    SELECT * FROM `of-scheduler-proj.core.scheduled_send_facts`                                              
  ),                                                                                                         
  mm AS (                                                                                                    
    SELECT username_std, sending_ts, caption_hash, price_usd, earnings_usd, sent, viewed, purchased, sender  
    FROM `of-scheduler-proj.core.message_facts`                                                              
    WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 180 DAY)                                 
  ),                                                                                                         
  cl AS (                                                                                                    
    SELECT username_std, caption_id, caption_hash                                                            
    FROM `of-scheduler-proj.core.caption_dim`                                                                
  ),                                                                                                         
  cand AS (                                                                                                  
    SELECT                                                                                                   
      ss.username_std, ss.logged_ts, ss.scheduler_name, ss.caption_id, ss.was_modified,                      
      ss.price_usd_scheduled, ss.tracking_hash,                                                              
      mm.sending_ts, mm.caption_hash AS hash_msg,                                                            
      mm.price_usd, mm.earnings_usd, mm.sent, mm.viewed, mm.purchased, mm.sender,                            
      CASE                                                                                                   
        WHEN ss.tracking_hash IS NOT NULL AND ss.tracking_hash = mm.caption_hash THEN 3                      
        WHEN ss.caption_id IS NOT NULL AND EXISTS (                                                          
          SELECT 1 FROM cl                                                                                   
          WHERE cl.username_std = ss.username_std                                                            
            AND cl.caption_id   = ss.caption_id                                                              
            AND cl.caption_hash = mm.caption_hash                                                            
        ) THEN 2                                                                                             
        WHEN ss.price_usd_scheduled IS NOT NULL                                                              
             AND ABS(ss.price_usd_scheduled - mm.price_usd) < 0.01                                           
             AND mm.sending_ts BETWEEN TIMESTAMP_SUB(ss.logged_ts, INTERVAL 1 DAY)                           
                                   AND TIMESTAMP_ADD(ss.logged_ts, INTERVAL 14 DAY) THEN 1                   
        ELSE 0                                                                                               
      END AS match_score,                                                                                    
      ABS(TIMESTAMP_DIFF(mm.sending_ts, ss.logged_ts, MINUTE)) AS dt_min                                     
    FROM ss                                                                                                  
    JOIN mm USING (username_std)                                                                             
    WHERE (ss.tracking_hash IS NOT NULL AND ss.tracking_hash = mm.caption_hash)                              
       OR (ss.caption_id IS NOT NULL AND EXISTS (                                                            
             SELECT 1 FROM cl                                                                                
             WHERE cl.username_std = ss.username_std                                                         
               AND cl.caption_id   = ss.caption_id                                                           
               AND cl.caption_hash = mm.caption_hash))                                                       
       OR (ss.price_usd_scheduled IS NOT NULL                                                                
           AND ABS(ss.price_usd_scheduled - mm.price_usd) < 0.01                                             
           AND mm.sending_ts BETWEEN TIMESTAMP_SUB(ss.logged_ts, INTERVAL 1 DAY)                             
                                 AND TIMESTAMP_ADD(ss.logged_ts, INTERVAL 14 DAY))                           
  )                                                                                                          
  SELECT                                                                                                     
    username_std,                                                                                            
    DATE(sending_ts) AS sent_date,                                                                           
    scheduler_name,                                                                                          
    sender,                                                                                                  
    logged_ts,                                                                                               
    caption_id,                                                                                              
    was_modified,                                                                                            
    price_usd_scheduled,                                                                                     
    sending_ts,                                                                                              
    hash_msg,                                                                                                
    price_usd,                                                                                               
    earnings_usd,                                                                                            
    sent,                                                                                                    
    viewed,                                                                                                  
    purchased,                                                                                               
    CASE match_score WHEN 3 THEN 'hash' WHEN 2 THEN 'caption_id' ELSE 'time_price' END AS matched_by         
  FROM cand                                                                                                  
  QUALIFY ROW_NUMBER() OVER (                                                                                
    PARTITION BY username_std, logged_ts, caption_id                                                         
    ORDER BY match_score DESC, dt_min ASC                                                                    
  ) = 1                                                                                                      


****** View: mart.v_slot_momentum_v3 ******
Table of-scheduler-proj:mart.v_slot_momentum_v3

                                  Query                                  
 ----------------------------------------------------------------------- 
  WITH a7 AS (                                                           
    SELECT username_page, dow, hod, AVG(rps) AS rps_l7                   
    FROM `of-scheduler-proj.mart.fn_dm_send_facts`(7)                    
    GROUP BY 1,2,3                                                       
  ),                                                                     
  a28 AS (                                                               
    SELECT username_page, dow, hod, AVG(rps) AS rps_l28                  
    FROM `of-scheduler-proj.mart.fn_dm_send_facts`(28)                   
    GROUP BY 1,2,3                                                       
  )                                                                      
  SELECT                                                                 
    COALESCE(a28.username_page, a7.username_page) AS username_page,      
    COALESCE(a28.dow, a7.dow) AS dow,                                    
    COALESCE(a28.hod, a7.hod) AS hod,                                    
    a7.rps_l7,                                                           
    a28.rps_l28,                                                         
    SAFE_DIVIDE(a7.rps_l7, NULLIF(a28.rps_l28, 0)) - 1 AS momentum_lift  
  FROM a7                                                                
  FULL OUTER JOIN a28                                                    
  USING (username_page, dow, hod)                                        


****** View: mart.v_slot_recommendations_next24_gated_v1 ******
Table of-scheduler-proj:mart.v_slot_recommendations_next24_gated_v1

                                      Query                                      
 ------------------------------------------------------------------------------- 
  WITH base AS (                                                                 
    SELECT username_page, slot_dt_local                                          
    FROM `of-scheduler-proj.mart.v_slot_recommendations_next24_v3`               
  ),                                                                             
  dh AS (                                                                        
    SELECT                                                                       
      b.username_page,                                                           
      b.slot_dt_local,                                                           
      MOD(EXTRACT(DAYOFWEEK FROM b.slot_dt_local) + 5, 7) AS dow,                
      CAST(FORMAT_DATETIME('%H', b.slot_dt_local) AS INT64) AS hod               
    FROM base b                                                                  
  ),                                                                             
  price AS (                                                                     
    SELECT s.username_page, s.dow, s.hod, p.price_q AS reco_price_usd            
    FROM `of-scheduler-proj.mart.v_slot_scorecard_v3` s                          
    LEFT JOIN `of-scheduler-proj.mart.v_ppv_price_reco_lcb_28d_v3` p             
      ON p.username_page = s.username_page                                       
     AND p.dow = s.dow                                                           
     AND p.hod = s.hod                                                           
  ),                                                                             
  paid AS (                                                                      
    SELECT username_page, is_paid                                                
    FROM `of-scheduler-proj.core.v_page_paid_final_v1`                           
  )                                                                              
  SELECT                                                                         
    dh.username_page,                                                            
    dh.slot_dt_local,                                                            
    dh.dow, dh.hod,                                                              
    CASE WHEN pr.reco_price_usd > 0 THEN 'ppv' ELSE 'free' END AS reco_dm_type,  
    IFNULL(pr.reco_price_usd, 0) AS reco_price_usd                               
  FROM dh                                                                        
  LEFT JOIN price pr USING (username_page, dow, hod)                             
  LEFT JOIN paid  p  USING (username_page)                                       
  WHERE NOT (p.is_paid = FALSE AND pr.reco_price_usd > 0)                        


****** View: mart.v_slot_recommendations_next24_v3 ******
Table of-scheduler-proj:mart.v_slot_recommendations_next24_v3

                                                   Query                                                   
 --------------------------------------------------------------------------------------------------------- 
  WITH pages AS (                                                                                          
    SELECT v.username_page, v.username_std, COALESCE(pd.tz,'UTC') AS tz                                    
    FROM `of-scheduler-proj.core.v_pages` v                                                                
    LEFT JOIN `of-scheduler-proj.core.page_dim` pd USING (username_std)                                    
  ),                                                                                                       
  nowz AS (                                                                                                
    SELECT username_page, username_std, tz, DATETIME(CURRENT_TIMESTAMP(), tz) AS now_local                 
    FROM pages                                                                                             
  ),                                                                                                       
  grid AS (                                                                                                
    SELECT n.username_page, n.username_std, n.tz,                                                          
           DATETIME_TRUNC(n.now_local, HOUR) + INTERVAL h HOUR AS slot_dt_local                            
    FROM nowz n, UNNEST(GENERATE_ARRAY(0,23)) AS h                                                         
  ),                                                                                                       
  feat AS (                                                                                                
    SELECT                                                                                                 
      g.username_page, g.username_std, g.tz,                                                               
      MOD(EXTRACT(DAYOFWEEK FROM g.slot_dt_local) + 5, 7) AS dow,                                          
      CAST(FORMAT_DATETIME('%H', g.slot_dt_local) AS INT64) AS hod,                                        
      g.slot_dt_local                                                                                      
    FROM grid g                                                                                            
  ),                                                                                                       
  best_price AS (                                                                                          
    SELECT s.username_page, s.dow, s.hod, s.slot_score_base,                                               
           p.price_q AS best_ppv_price,                                                                    
           p.p_buy_eb, p.rps_eb, p.rps_lcb                                                                 
    FROM `of-scheduler-proj.mart.v_slot_scorecard_v3` s                                                    
    LEFT JOIN `of-scheduler-proj.mart.v_ppv_price_reco_lcb_28d_v3` p                                       
      ON p.username_page=s.username_page AND p.dow=s.dow AND p.hod=s.hod                                   
  ),                                                                                                       
  quota AS (                                                                                               
    SELECT username_std, dow, ppv_quota AS max_sends_today                                                 
    FROM `of-scheduler-proj.mart.v_daily_quota_policy_v3`                                                  
  )                                                                                                        
  SELECT                                                                                                   
    f.username_page,                                                                                       
    f.slot_dt_local,                                                                                       
    f.dow, f.hod,                                                                                          
    b.slot_score_base,                                                                                     
    b.p_buy_eb  AS best_ppv_buy_rate,                                                                      
    b.rps_eb,                                                                                              
    b.rps_lcb,                                                                                             
    -- paid/free gate                                                                                      
    CASE                                                                                                   
      WHEN NOT COALESCE(pp.is_paid, FALSE) THEN 'free'                                                     
      WHEN b.rps_lcb IS NOT NULL AND b.rps_lcb >= COALESCE(sc.rps_free,0) THEN 'ppv'                       
      ELSE 'free'                                                                                          
    END AS reco_dm_type,                                                                                   
    CASE                                                                                                   
      WHEN NOT COALESCE(pp.is_paid, FALSE) THEN 0                                                          
      WHEN b.rps_lcb IS NOT NULL AND b.rps_lcb >= COALESCE(sc.rps_free,0) THEN IFNULL(b.best_ppv_price,0)  
      ELSE 0                                                                                               
    END AS reco_price_usd                                                                                  
  FROM feat f                                                                                              
  LEFT JOIN best_price b USING (username_page, dow, hod)                                                   
  LEFT JOIN `of-scheduler-proj.mart.v_slot_scorecard_v3` sc USING (username_page, dow, hod)                
  LEFT JOIN quota q                                                                                        
    ON q.username_std=f.username_std AND q.dow=f.dow                                                       
  LEFT JOIN `of-scheduler-proj.core.v_page_paid_final_v1` pp USING (username_page)                         
  QUALIFY ROW_NUMBER() OVER (                                                                              
    PARTITION BY f.username_page, DATE(f.slot_dt_local)                                                    
    ORDER BY b.slot_score_base DESC, f.slot_dt_local                                                       
  ) <= COALESCE(q.max_sends_today, 4)                                                                      


****** View: mart.v_slot_scorecard_v3 ******
Table of-scheduler-proj:mart.v_slot_scorecard_v3

                                              Query                                              
 ----------------------------------------------------------------------------------------------- 
  WITH base AS (                                                                                 
    SELECT                                                                                       
      username_page, dow, hod,                                                                   
      MAX(IF(price_band='p3',  rps_eb, NULL)) AS rps_p3,                                         
      MAX(IF(price_band='p2',  rps_eb, NULL)) AS rps_p2,                                         
      MAX(IF(price_band='p1',  rps_eb, NULL)) AS rps_p1,                                         
      MAX(IF(price_band='free',rps_eb, NULL)) AS rps_free                                        
    FROM `of-scheduler-proj.mart.v_dm_slot_eb_28d_v3`                                            
    GROUP BY 1,2,3                                                                               
  )                                                                                              
  SELECT                                                                                         
    b.username_page, b.dow, b.hod,                                                               
    b.rps_p3, b.rps_p2, b.rps_p1, b.rps_free,                                                    
    COALESCE(m.momentum_lift, 0) AS momentum_lift,                                               
    GREATEST(                                                                                    
      COALESCE(b.rps_p3,0), COALESCE(b.rps_p2,0),                                                
      COALESCE(b.rps_p1,0), COALESCE(b.rps_free,0)                                               
    ) AS rps_base,                                                                               
    -- momentum scaled by RPS; clamp lift to [-1, 1] using GREATEST/LEAST                        
    GREATEST(                                                                                    
      COALESCE(b.rps_p3,0), COALESCE(b.rps_p2,0),                                                
      COALESCE(b.rps_p1,0), COALESCE(b.rps_free,0)                                               
    ) * (1 + 0.25 * GREATEST(-1.0, LEAST(1.0, COALESCE(m.momentum_lift,0)))) AS slot_score_base  
  FROM base b                                                                                    
  LEFT JOIN `of-scheduler-proj.mart.v_slot_momentum_v3` m                                        
    USING (username_page, dow, hod)                                                              


****** View: mart.v_weekly_feasibility_alerts ******
Table of-scheduler-proj:mart.v_weekly_feasibility_alerts

                                                     Query                                                     
 ------------------------------------------------------------------------------------------------------------- 
  WITH days_to_check AS (           -- the page-days we actually plan                                          
    SELECT DISTINCT username_std, date_local                                                                   
    FROM `of-scheduler-proj.mart.weekly_template_7d_latest`                                                    
  ),                                                                                                           
                                                                                                               
  -- clamp + swap windows once, using the same rules as the planner                                            
  pd0 AS (                                                                                                     
    SELECT                                                                                                     
      username_std,                                                                                            
      CASE WHEN min_hod IS NULL AND max_hod IS NULL THEN 0                                                     
           WHEN min_hod IS NULL THEN 0                                                                         
           ELSE GREATEST(0, LEAST(23, CAST(min_hod AS INT64))) END AS min0,                                    
      CASE WHEN min_hod IS NULL AND max_hod IS NULL THEN 23                                                    
           WHEN max_hod IS NULL THEN 23                                                                        
           ELSE GREATEST(0, LEAST(23, CAST(max_hod AS INT64))) END AS max0                                     
    FROM `of-scheduler-proj.core.page_dim`                                                                     
    WHERE COALESCE(LOWER(CAST(is_active AS STRING)) IN ('true','t','1','yes','y'), TRUE)                       
  ),                                                                                                           
  pd AS (                                                                                                      
    SELECT                                                                                                     
      username_std,                                                                                            
      CASE WHEN min0 IS NOT NULL AND max0 IS NOT NULL AND min0 > max0 THEN max0 ELSE min0 END AS min_hod_eff,  
      CASE WHEN min0 IS NOT NULL AND max0 IS NOT NULL AND min0 > max0 THEN min0 ELSE max0 END AS max_hod_eff   
    FROM pd0                                                                                                   
  ),                                                                                                           
                                                                                                               
  -- policy quota by DOW (0=Mon..6=Sun like the planner)                                                       
  policy AS (                                                                                                  
    SELECT username_std, dow, ppv_quota                                                                        
    FROM `of-scheduler-proj.mart.v_daily_quota_policy_v3`                                                      
  ),                                                                                                           
                                                                                                               
  base AS (                                                                                                    
    SELECT                                                                                                     
      d.username_std,                                                                                          
      d.date_local,                                                                                            
      p.min_hod_eff AS min_h,                                                                                  
      p.max_hod_eff AS max_h,                                                                                  
      q.ppv_quota   AS quota,                                                                                  
      MOD(EXTRACT(DAYOFWEEK FROM d.date_local) + 5, 7) AS dow                                                  
    FROM days_to_check d                                                                                       
    JOIN pd p USING (username_std)                                                                             
    LEFT JOIN policy q                                                                                         
      ON q.username_std = d.username_std                                                                       
     AND q.dow         = MOD(EXTRACT(DAYOFWEEK FROM d.date_local) + 5, 7)                                      
  ),                                                                                                           
                                                                                                               
  calc AS (                                                                                                    
    SELECT                                                                                                     
      username_std,                                                                                            
      date_local,                                                                                              
      dow,                                                                                                     
      quota,                                                                                                   
      min_h,                                                                                                   
      max_h,                                                                                                   
      (max_h - min_h) AS window_width,                                                                         
      GREATEST(0, 2 * (COALESCE(quota, 0) - 1)) AS width_needed_2h                                             
    FROM base                                                                                                  
  )                                                                                                            
                                                                                                               
  SELECT *                                                                                                     
  FROM calc                                                                                                    
  WHERE quota IS NOT NULL                                                                                      
    AND window_width < width_needed_2h   -- impossible to satisfy ≥2h with this quota/window                   
  ORDER BY username_std, date_local                                                                            


****** View: mart.v_weekly_template_7d_pages ******
Table of-scheduler-proj:mart.v_weekly_template_7d_pages

                                                 Query                                                  
 ------------------------------------------------------------------------------------------------------ 
  WITH base AS (                                                                                        
    SELECT * FROM `of-scheduler-proj.mart.weekly_template_7d_latest`                                    
  ),                                                                                                    
  types AS (                                                                                            
    SELECT username_std, page_type FROM `of-scheduler-proj.core.v_pages`                                
  ),                                                                                                    
  assign AS (                                                                                           
    SELECT username_std, ANY_VALUE(assigned_scheduler) AS assigned_scheduler                            
    FROM `of-scheduler-proj.core.page_dim`                                                              
    WHERE COALESCE(is_active, TRUE)                                                                     
    GROUP BY username_std                                                                               
  )                                                                                                     
  SELECT                                                                                                
    b.username_std,                                                                                     
    t.page_type,                                                                                        
    CONCAT(b.username_std,'__',t.page_type) AS username_page,                                           
    COALESCE(a.assigned_scheduler, b.scheduler_name, 'unassigned') AS scheduler_name,                   
    b.tz, b.date_local, b.slot_rank, b.hod_local, b.price_usd,                                          
    b.planned_local_datetime, b.scheduled_datetime_utc,                                                 
    TO_BASE64(SHA256(CONCAT(                                                                            
      b.username_std,'__',t.page_type,'|',CAST(b.date_local AS STRING),'|',CAST(b.hod_local AS STRING)  
    ))) AS tracking_hash                                                                                
  FROM base b                                                                                           
  JOIN types t USING (username_std)                                                                     
  LEFT JOIN assign a USING (username_std)                                                               


****** View: mart.v_weekly_template_7d_pages_final ******
Table of-scheduler-proj:mart.v_weekly_template_7d_pages_final

                              Query                               
 ---------------------------------------------------------------- 
  SELECT *                                                        
  FROM `of-scheduler-proj.core.v_weekly_template_7d_pages_final`  


****** View: mart.v_weekly_template_7d_pages_overrides ******
Table of-scheduler-proj:mart.v_weekly_template_7d_pages_overrides

                                                  Query                                                   
 -------------------------------------------------------------------------------------------------------- 
  WITH base AS (                                                                                          
    SELECT                                                                                                
      b.username_std, b.page_type, b.username_page, b.scheduler_name,                                     
      b.tz, b.date_local, b.slot_rank, b.hod_local, b.price_usd,                                          
      b.planned_local_datetime, b.scheduled_datetime_utc, b.tracking_hash                                 
    FROM `of-scheduler-proj.mart.v_weekly_template_7d_pages` b                                            
  ),                                                                                                      
  r AS (                                                                                                  
    SELECT alias_norm, resolved_username_std                                                              
    FROM `of-scheduler-proj.core.v_username_resolver`                                                     
  )                                                                                                       
  SELECT                                                                                                  
    COALESCE(r.resolved_username_std, base.username_std) AS username_std,                                 
    base.page_type,                                                                                       
    CONCAT(COALESCE(r.resolved_username_std, base.username_std), '__', base.page_type) AS username_page,  
    COALESCE(o.assigned_scheduler, base.scheduler_name, 'unassigned') AS scheduler_name,                  
    base.tz, base.date_local, base.slot_rank, base.hod_local, base.price_usd,                             
    base.planned_local_datetime, base.scheduled_datetime_utc, base.tracking_hash                          
  FROM base                                                                                               
  LEFT JOIN r                                                                                             
    ON r.alias_norm = `of-scheduler-proj.util.norm_username`(base.username_std)                           
  LEFT JOIN `of-scheduler-proj.core.page_scheduler_overrides` o                                           
    ON o.username_std = COALESCE(r.resolved_username_std, base.username_std)                              


****** View: mart.v_weekly_template_7d_v7 ******
Table of-scheduler-proj:mart.v_weekly_template_7d_v7

                                                                                Query                                                                                 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
  WITH quota AS (                                                                                                                                                     
    SELECT username_std, assigned_scheduler, tz, dow, ppv_quota, hour_pool, is_burst_dow                                                                              
    FROM `of-scheduler-proj.mart.v_daily_quota_policy_v3`                                                                                                             
  ),                                                                                                                                                                  
  pd0 AS (                                                                                                                                                            
    SELECT                                                                                                                                                            
      username_std,                                                                                                                                                   
      CASE WHEN min_hod IS NULL AND max_hod IS NULL THEN NULL                                                                                                         
           WHEN min_hod IS NULL THEN 0                                                                                                                                
           ELSE GREATEST(0, LEAST(23, CAST(min_hod AS INT64))) END AS min0,                                                                                           
      CASE WHEN min_hod IS NULL AND max_hod IS NULL THEN NULL                                                                                                         
           WHEN max_hod IS NULL THEN 23                                                                                                                               
           ELSE GREATEST(0, LEAST(23, CAST(max_hod AS INT64))) END AS max0                                                                                            
    FROM `of-scheduler-proj.core.page_dim`                                                                                                                            
    WHERE COALESCE(LOWER(CAST(is_active AS STRING)) IN ('true','t','1','yes','y'), TRUE)                                                                              
  ),                                                                                                                                                                  
  pd AS (                                                                                                                                                             
    SELECT                                                                                                                                                            
      username_std,                                                                                                                                                   
      CASE WHEN min0 IS NOT NULL AND max0 IS NOT NULL AND min0 > max0 THEN max0 ELSE min0 END AS min_hod_eff,                                                         
      CASE WHEN min0 IS NOT NULL AND max0 IS NOT NULL AND min0 > max0 THEN min0 ELSE max0 END AS max_hod_eff                                                          
    FROM pd0                                                                                                                                                          
  ),                                                                                                                                                                  
  weights AS (                                                                                                                                                        
    SELECT username_std,                                                                                                                                              
           COALESCE(weight_price,     1.00) AS w_price,                                                                                                               
           COALESCE(exploration_rate, 0.15) AS explore_rate                                                                                                           
    FROM `of-scheduler-proj.core.page_personalization_weights`                                                                                                        
  ),                                                                                                                                                                  
  state AS (                                                                                                                                                          
    SELECT username_std, COALESCE(page_state,'balance') AS page_state                                                                                                 
    FROM `of-scheduler-proj.core.page_state`                                                                                                                          
  ),                                                                                                                                                                  
  dow_hod AS (  -- weekday×hour perf                                                                                                                                  
    SELECT username_std, dow_local AS dow, hod_local AS hod, score                                                                                                    
    FROM `of-scheduler-proj.mart.v_mm_dow_hod_180d_local_v2`                                                                                                          
  ),                                                                                                                                                                  
  dow_pref AS (  -- pre-agg                                                                                                                                           
    SELECT username_std, dow, hod, SUM(score) AS s                                                                                                                    
    FROM dow_hod                                                                                                                                                      
    GROUP BY username_std, dow, hod                                                                                                                                   
  ),                                                                                                                                                                  
  best_global AS (  -- global fallback                                                                                                                                
    SELECT username_std, hod_local AS hod, SUM(score) AS s_g                                                                                                          
    FROM `of-scheduler-proj.mart.v_mm_dow_hod_180d_local_v2`                                                                                                          
    GROUP BY username_std, hod_local                                                                                                                                  
  ),                                                                                                                                                                  
  price_prof AS (                                                                                                                                                     
    SELECT username_std, p35, p50, p60, p80, p90, price_mode                                                                                                          
    FROM `of-scheduler-proj.mart.v_mm_price_profile_90d_v2`                                                                                                           
  ),                                                                                                                                                                  
  defaults AS ( SELECT ARRAY<INT64>[21,20,18,15,12,22,19,16,13,10,23,14,17,9,8,11] AS default_hours ),                                                                
                                                                                                                                                                      
  /* ---------- 7 calendar days per page ---------- */                                                                                                                
  days AS (                                                                                                                                                           
    SELECT                                                                                                                                                            
      q.username_std, q.assigned_scheduler, q.tz,                                                                                                                     
      p.min_hod_eff, p.max_hod_eff,                                                                                                                                   
      DATE_ADD(CURRENT_DATE(q.tz), INTERVAL d DAY) AS date_local,                                                                                                     
      MOD(EXTRACT(DAYOFWEEK FROM DATE_ADD(CURRENT_DATE(q.tz), INTERVAL d DAY)) + 5, 7) AS dow_local,                                                                  
      q.ppv_quota AS quota, q.hour_pool AS hour_pool, q.is_burst_dow,                                                                                                 
      ABS(FARM_FINGERPRINT(CONCAT(q.username_std, CAST(DATE_ADD(CURRENT_DATE(q.tz), INTERVAL d DAY) AS STRING)))) AS seed_day                                         
    FROM quota q                                                                                                                                                      
    JOIN pd p USING (username_std)                                                                                                                                    
    CROSS JOIN UNNEST(GENERATE_ARRAY(0,6)) AS d                                                                                                                       
    WHERE MOD(EXTRACT(DAYOFWEEK FROM DATE_ADD(CURRENT_DATE(q.tz), INTERVAL d DAY)) + 5, 7) = q.dow                                                                    
      AND q.ppv_quota > 0                                                                                                                                             
  ),                                                                                                                                                                  
                                                                                                                                                                      
  /* ---------- Candidate hours via JOINs ---------- */                                                                                                               
  cand_union AS (                                                                                                                                                     
    -- DOW-specific                                                                                                                                                   
    SELECT d.*, dp.hod AS h, dp.s AS s, 1 AS src                                                                                                                      
    FROM days d                                                                                                                                                       
    JOIN dow_pref dp                                                                                                                                                  
      ON dp.username_std = d.username_std                                                                                                                             
     AND dp.dow         = d.dow_local                                                                                                                                 
    UNION ALL                                                                                                                                                         
    -- global fallback                                                                                                                                                
    SELECT d.*, g.hod AS h, g.s_g AS s, 2 AS src                                                                                                                      
    FROM days d                                                                                                                                                       
    JOIN best_global g                                                                                                                                                
      ON g.username_std = d.username_std                                                                                                                              
    UNION ALL                                                                                                                                                         
    -- default last resort                                                                                                                                            
    SELECT d.*, h AS h, 0 AS s, 3 AS src                                                                                                                              
    FROM days d                                                                                                                                                       
    CROSS JOIN UNNEST((SELECT default_hours FROM defaults)) AS h                                                                                                      
  ),                                                                                                                                                                  
  cand_filtered AS (                                                                                                                                                  
    SELECT * FROM cand_union                                                                                                                                          
    WHERE h BETWEEN COALESCE(min_hod_eff,0) AND COALESCE(max_hod_eff,23)                                                                                              
  ),                                                                                                                                                                  
  cand_dedup AS (                                                                                                                                                     
    SELECT *,                                                                                                                                                         
           ROW_NUMBER() OVER (                                                                                                                                        
             PARTITION BY username_std, date_local, h                                                                                                                 
             ORDER BY src, s DESC, h                                                                                                                                  
           ) AS rn_h                                                                                                                                                  
    FROM cand_filtered                                                                                                                                                
  ),                                                                                                                                                                  
  cand_ranked AS ( SELECT * FROM cand_dedup WHERE rn_h = 1 ),                                                                                                         
  pool AS (                                                                                                                                                           
    SELECT                                                                                                                                                            
      username_std, assigned_scheduler, tz, date_local, dow_local,                                                                                                    
      quota, hour_pool, is_burst_dow, seed_day,                                                                                                                       
      COALESCE(min_hod_eff,0)  AS min_h,                                                                                                                              
      COALESCE(max_hod_eff,23) AS max_h,                                                                                                                              
      ARRAY_AGG(h ORDER BY src, s DESC, h LIMIT 24) AS hours_ranked                                                                                                   
    FROM cand_ranked                                                                                                                                                  
    GROUP BY username_std, assigned_scheduler, tz, date_local, dow_local,                                                                                             
             quota, hour_pool, is_burst_dow, seed_day, min_hod_eff, max_hod_eff                                                                                       
  ),                                                                                                                                                                  
                                                                                                                                                                      
  /* ---------- Segment + anchors ---------- */                                                                                                                       
  segments AS (                                                                                                                                                       
    SELECT                                                                                                                                                            
      p.*,                                                                                                                                                            
      IF(ARRAY_LENGTH(p.hours_ranked) > 0, p.hours_ranked[OFFSET(0)],                               COALESCE(p.min_h, 9))  AS span_start,                             
      IF(ARRAY_LENGTH(p.hours_ranked) > 0, p.hours_ranked[OFFSET(ARRAY_LENGTH(p.hours_ranked)-1)], COALESCE(p.max_h, 21)) AS span_end                                 
    FROM pool p                                                                                                                                                       
  ),                                                                                                                                                                  
  anchors AS (                                                                                                                                                        
    SELECT                                                                                                                                                            
      s.username_std, s.assigned_scheduler, s.tz, s.date_local, s.dow_local,                                                                                          
      s.quota, s.hour_pool, s.is_burst_dow, s.seed_day,                                                                                                               
      s.hours_ranked, s.min_h, s.max_h,                                                                                                                               
      LEAST(s.max_h, GREATEST(s.min_h, s.span_start)) AS a_start,                                                                                                     
      GREATEST(s.min_h, LEAST(s.max_h, s.span_end))   AS a_end                                                                                                        
    FROM segments s                                                                                                                                                   
  ),                                                                                                                                                                  
  anchor_grid AS (                                                                                                                                                    
    SELECT                                                                                                                                                            
      a.*,                                                                                                                                                            
      (a.a_end - a.a_start) AS span_len,                                                                                                                              
      LEAST(6, GREATEST(2,                                                                                                                                            
        CAST(ROUND(SAFE_DIVIDE(GREATEST(a.a_end - a.a_start, 2), GREATEST(a.quota-1, 1))) AS INT64)                                                                   
      )) AS seg_w                                                                                                                                                     
    FROM anchors a                                                                                                                                                    
  ),                                                                                                                                                                  
  anchor_rows AS (                                                                                                                                                    
    SELECT                                                                                                                                                            
      g.username_std, g.assigned_scheduler, g.tz, g.date_local, g.dow_local,                                                                                          
      g.hour_pool, g.is_burst_dow, g.seed_day, g.hours_ranked,                                                                                                        
      g.min_h, g.max_h, g.span_len, g.seg_w, g.quota,                                                                                                                 
      pos AS slot_rank,                                                                                                                                               
      CAST(ROUND(g.a_start + pos * g.seg_w + MOD(g.seed_day + pos, 3) - 1) AS INT64) AS anchor_h,                                                                     
      CASE WHEN g.quota = 1 THEN CAST(ROUND((g.a_start + g.a_end)/2.0) AS INT64) ELSE NULL END AS anchor_h_center                                                     
    FROM anchor_grid g                                                                                                                                                
    CROSS JOIN UNNEST(GENERATE_ARRAY(0, LEAST(g.quota-1, 9))) AS pos                                                                                                  
  ),                                                                                                                                                                  
                                                                                                                                                                      
  /* ---------- Pick nearest candidate hour (effective pool avoids collisions) ---------- */                                                                          
  nearest_pick AS (                                                                                                                                                   
    SELECT                                                                                                                                                            
      r.* EXCEPT(hours_ranked),                                                                                                                                       
      cand AS hod_cand,                                                                                                                                               
      off  AS cand_rank,                                                                                                                                              
      ROW_NUMBER() OVER (                                                                                                                                             
        PARTITION BY r.username_std, r.date_local, r.slot_rank                                                                                                        
        ORDER BY ABS(cand - COALESCE(r.anchor_h_center, r.anchor_h)), off, cand                                                                                       
      ) AS rn                                                                                                                                                         
    FROM anchor_rows r                                                                                                                                                
    CROSS JOIN UNNEST(r.hours_ranked) AS cand WITH OFFSET off                                                                                                         
    WHERE cand BETWEEN r.min_h AND r.max_h                                                                                                                            
      AND off < GREATEST(r.hour_pool, LEAST(ARRAY_LENGTH(r.hours_ranked), r.quota * 3))                                                                               
  ),                                                                                                                                                                  
  picked0 AS (                                                                                                                                                        
    SELECT                                                                                                                                                            
      username_std, assigned_scheduler, tz, date_local, dow_local,                                                                                                    
      slot_rank, is_burst_dow, seed_day,                                                                                                                              
      hod_cand AS hod_local                                                                                                                                           
    FROM nearest_pick                                                                                                                                                 
    WHERE rn = 1                                                                                                                                                      
  ),                                                                                                                                                                  
                                                                                                                                                                      
  /* ---------- Closed-form spacing: enforce ≥2h and ≤6h inside [min_h, max_h] ---------- */                                                                          
  day_bounds AS (                                                                                                                                                     
    SELECT username_std, date_local, MIN(min_h) AS min_h, MAX(max_h) AS max_h                                                                                         
    FROM pool                                                                                                                                                         
    GROUP BY username_std, date_local                                                                                                                                 
  ),                                                                                                                                                                  
  ordered AS (                                                                                                                                                        
    SELECT                                                                                                                                                            
      p.*,                                                                                                                                                            
      ROW_NUMBER() OVER (PARTITION BY p.username_std, p.date_local ORDER BY p.hod_local) AS idx,                                                                      
      COUNT(*)    OVER (PARTITION BY p.username_std, p.date_local)                         AS n_slots                                                                 
    FROM picked0 p                                                                                                                                                    
  ),                                                                                                                                                                  
  with_bounds AS (                                                                                                                                                    
    SELECT o.*, b.min_h, b.max_h                                                                                                                                      
    FROM ordered o                                                                                                                                                    
    JOIN day_bounds b USING (username_std, date_local)                                                                                                                
  ),                                                                                                                                                                  
  lower_env AS (  -- ensure ≥2h and start bound                                                                                                                       
    SELECT                                                                                                                                                            
      *,                                                                                                                                                              
      -- closed-form lower envelope: 2*idx + prefix_max(hod_local - 2*idx)                                                                                            
      (2*idx                                                                                                                                                          
        + MAX(hod_local - 2*idx) OVER (                                                                                                                               
            PARTITION BY username_std, date_local                                                                                                                     
            ORDER BY idx                                                                                                                                              
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW                                                                                                          
          )                                                                                                                                                           
      )                                                          AS env2,                                                                                             
      -- minimal feasible hour for idx given min_h and ≥2h                                                                                                            
      (min_h + 2*(idx-1))                                       AS start2                                                                                             
    FROM with_bounds                                                                                                                                                  
  ),                                                                                                                                                                  
  y AS (                                                                                                                                                              
    SELECT                                                                                                                                                            
      *,                                                                                                                                                              
      GREATEST(hod_local, env2, start2) AS y_lower  -- apply the ≥2h lower envelope                                                                                   
    FROM lower_env                                                                                                                                                    
  ),                                                                                                                                                                  
  upper_env AS (  -- cap by ≤6h and room to finish by max_h                                                                                                           
    SELECT                                                                                                                                                            
      *,                                                                                                                                                              
      -- ≤6h forward cap in closed form: 6*idx + prefix_min(y_lower - 6*idx)                                                                                          
      (6*idx                                                                                                                                                          
        + MIN(y_lower - 6*idx) OVER (                                                                                                                                 
            PARTITION BY username_std, date_local                                                                                                                     
            ORDER BY idx                                                                                                                                              
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW                                                                                                          
          )                                                                                                                                                           
      )                                                         AS cap6,                                                                                              
      -- leave room for remaining slots with ≥2h up to max_h                                                                                                          
      (max_h - 2*(n_slots - idx))                               AS cap2_end                                                                                           
    FROM y                                                                                                                                                            
  ),                                                                                                                                                                  
  spaced AS (                                                                                                                                                         
    SELECT                                                                                                                                                            
      username_std, assigned_scheduler, tz, date_local, dow_local,                                                                                                    
      slot_rank, is_burst_dow, seed_day,                                                                                                                              
      -- final hour: inside all caps and window                                                                                                                       
      CAST(                                                                                                                                                           
        LEAST(                                                                                                                                                        
          GREATEST(y_lower, min_h),      -- not below lower bound/window                                                                                              
          cap6,                          -- ≤6h                                                                                                                       
          cap2_end,                      -- room to finish with ≥2h                                                                                                   
          max_h                          -- window top                                                                                                                
        ) AS INT64                                                                                                                                                    
      ) AS hod_final                                                                                                                                                  
    FROM upper_env                                                                                                                                                    
  ),                                                                                                                                                                  
                                                                                                                                                                      
  /* ---------- Price ladder ---------- */                                                                                                                            
  ladder AS (                                                                                                                                                         
    SELECT                                                                                                                                                            
      s.username_std, s.assigned_scheduler, s.tz, s.date_local, s.dow_local,                                                                                          
      s.slot_rank, s.hod_final AS hod_local, s.is_burst_dow,                                                                                                          
      pp.p35, pp.p50, pp.p60, pp.p80, pp.p90,                                                                                                                         
      COALESCE(st.page_state,'balance') AS page_state,                                                                                                                
      COALESCE(w.w_price, 1.00) AS w_price,                                                                                                                           
      CASE                                                                                                                                                            
        WHEN COALESCE(w.w_price, 1.00) >= 1.10 THEN 'premium'                                                                                                         
        WHEN COALESCE(w.w_price, 1.00) <= 0.95 THEN 'value'                                                                                                           
        ELSE COALESCE(pp.price_mode,'balanced')                                                                                                                       
      END AS price_mode_eff                                                                                                                                           
    FROM spaced s                                                                                                                                                     
    LEFT JOIN price_prof pp USING (username_std)                                                                                                                      
    LEFT JOIN state      st USING (username_std)                                                                                                                      
    LEFT JOIN weights    w  USING (username_std)                                                                                                                      
  ),                                                                                                                                                                  
  priced_base AS (                                                                                                                                                    
    SELECT                                                                                                                                                            
      l.*,                                                                                                                                                            
      CAST(                                                                                                                                                           
        CASE                                                                                                                                                          
          WHEN l.price_mode_eff = 'premium' OR l.is_burst_dow = 1 THEN                                                                                                
            CASE l.page_state                                                                                                                                         
              WHEN 'grow'   THEN COALESCE(l.p60,l.p50,l.p35,6)                                                                                                        
              WHEN 'retain' THEN COALESCE(l.p80,l.p60,l.p50,8)                                                                                                        
              ELSE               COALESCE(l.p90,l.p80,l.p60,9)                                                                                                        
            END                                                                                                                                                       
          WHEN l.price_mode_eff = 'value' THEN                                                                                                                        
            CASE l.page_state                                                                                                                                         
              WHEN 'grow'   THEN COALESCE(l.p35,l.p50,5)                                                                                                              
              WHEN 'retain' THEN coalesce(l.p50,l.p60,6)                                                                                                              
              ELSE               COALESCE(l.p60,l.p50,7)                                                                                                              
            END                                                                                                                                                       
          ELSE                                                                                                                                                        
            CASE l.page_state                                                                                                                                         
              WHEN 'grow'   THEN COALESCE(l.p50,l.p35,5)                                                                                                              
              WHEN 'retain' THEN COALESCE(l.p60,l.p50,6)                                                                                                              
              ELSE               COALESCE(l.p80,l.p60,8)                                                                                                              
            END                                                                                                                                                       
        END AS FLOAT64                                                                                                                                                
      ) AS price1                                                                                                                                                     
    FROM ladder l                                                                                                                                                     
  ),                                                                                                                                                                  
  b1 AS ( SELECT *, price1 + (ROW_NUMBER() OVER (PARTITION BY username_std, date_local, CAST(price1 AS INT64) ORDER BY slot_rank) - 1) AS price2 FROM priced_base ),  
  b2 AS ( SELECT *, price2 + (ROW_NUMBER() OVER (PARTITION BY username_std, date_local, CAST(price2 AS INT64) ORDER BY slot_rank) - 1) AS price3 FROM b1 ),           
  b3 AS ( SELECT *, price3 + (ROW_NUMBER() OVER (PARTITION BY username_std, date_local, CAST(price3 AS INT64) ORDER BY slot_rank) - 1) AS price4 FROM b2 )            
  SELECT                                                                                                                                                              
    username_std,                                                                                                                                                     
    assigned_scheduler AS scheduler_name,                                                                                                                             
    tz,                                                                                                                                                               
    date_local,                                                                                                                                                       
    slot_rank,                                                                                                                                                        
    CAST(LEAST(23, GREATEST(0, hod_local)) AS INT64) AS hod_local,                                                                                                    
    CAST(price4 AS FLOAT64) AS price_usd,                                                                                                                             
    DATETIME(date_local, TIME(CAST(LEAST(23, GREATEST(0, hod_local)) AS INT64),0,0)) AS planned_local_datetime,                                                       
    TIMESTAMP(DATETIME(date_local, TIME(CAST(LEAST(23, GREATEST(0, hod_local)) AS INT64),0,0)), tz) AS scheduled_datetime_utc                                         
  FROM b3                                                                                                                                                             
  ORDER BY username_std, date_local, slot_rank                                                                                                                        


****** View: mart.v_weekly_template_audit ******
Table of-scheduler-proj:mart.v_weekly_template_audit

                                              Query                                               
 ------------------------------------------------------------------------------------------------ 
  WITH q AS (                                                                                     
    SELECT * FROM `of-scheduler-proj.mart.v_daily_quota_policy_v3`                                
  ),                                                                                              
  w AS (                                                                                          
    SELECT username_std, weight_volume, weight_price, weight_hours, exploration_rate, updated_at  
    FROM `of-scheduler-proj.core.page_personalization_weights`                                    
  ),                                                                                              
  dow AS (  -- total DOW score for context                                                        
    SELECT username_std, dow_local AS dow, SUM(score) AS dow_score                                
    FROM `of-scheduler-proj.mart.v_mm_dow_hod_180d_local_v2`                                      
    GROUP BY username_std, dow_local                                                              
  ),                                                                                              
  pp AS (                                                                                         
    SELECT username_std, p35, p50, p60, p80, p90, price_mode, corr_price_rev                      
    FROM `of-scheduler-proj.mart.v_mm_price_profile_90d_v2`                                       
  )                                                                                               
  SELECT                                                                                          
    t.username_std,                                                                               
    t.scheduler_name,                                                                             
    t.date_local,                                                                                 
    MOD(EXTRACT(DAYOFWEEK FROM t.date_local) + 5, 7) AS dow,  -- 0=Mon..6=Sun                     
    q.ppv_quota,                                                                                  
    q.hour_pool,                                                                                  
    q.is_burst_dow,                                                                               
    w.weight_volume, w.weight_hours, w.weight_price, w.exploration_rate,                          
    pp.p35, pp.p50, pp.p60, pp.p80, pp.p90, pp.price_mode, pp.corr_price_rev,                     
    d.dow_score,                                                                                  
    t.slot_rank,                                                                                  
    t.hod_local,                                                                                  
    t.price_usd,                                                                                  
    t.planned_local_datetime,                                                                     
    t.scheduled_datetime_utc                                                                      
  FROM `of-scheduler-proj.mart.weekly_template_7d_latest` t                                       
  LEFT JOIN q  ON q.username_std = t.username_std                                                 
              AND q.dow = MOD(EXTRACT(DAYOFWEEK FROM t.date_local) + 5, 7)                        
  LEFT JOIN w  ON w.username_std = t.username_std                                                 
  LEFT JOIN pp ON pp.username_std = t.username_std                                                
  LEFT JOIN dow d ON d.username_std = t.username_std                                              
                 AND d.dow = MOD(EXTRACT(DAYOFWEEK FROM t.date_local) + 5, 7)                     
  ORDER BY t.username_std, t.date_local, t.slot_rank                                              


------------------ ROUTINES ------------------
Listing routines (definitions not extracted):
         Id              Routine Type        Language    Creation Time    Last Modified Time   Is Remote  
 ------------------ ----------------------- ---------- ----------------- -------------------- ----------- 
  fn_dm_send_facts   TABLE_VALUED_FUNCTION   SQL        06 Sep 13:18:34   06 Sep 13:18:34      No         

==============================================================
DATASET: ops
==============================================================

------------------ TABLES ------------------
****** Table: ops.caption_ingestion_log ******
[{"name":"run_id","type":"STRING"},{"name":"run_ts","type":"TIMESTAMP"},{"name":"source_rows","type":"INTEGER"},{"name":"new_captions_inserted","type":"INTEGER"},{"name":"missing_text","type":"INTEGER"},{"name":"duplicates_detected","type":"INTEGER"},{"name":"window_scanned_days","type":"INTEGER"},{"name":"error_count","type":"INTEGER"},{"name":"error_sample","type":"STRING"}]

****** Table: ops.caption_ingestion_log_v1_backup_20250909 ******
[{"name":"run_id","type":"STRING"},{"name":"run_ts","type":"TIMESTAMP"},{"name":"source_rows","type":"INTEGER"},{"name":"new_captions_inserted","type":"INTEGER"},{"name":"missing_text","type":"INTEGER"},{"name":"duplicates_detected","type":"INTEGER"},{"name":"window_scanned_days","type":"INTEGER"},{"name":"error_count","type":"INTEGER"},{"name":"error_sample","type":"STRING"}]

****** Table: ops.caption_overrides ******
[{"name":"override_timestamp","type":"TIMESTAMP","mode":"REQUIRED"},{"name":"scheduler_email","type":"STRING","mode":"REQUIRED"},{"name":"username_page","type":"STRING","mode":"REQUIRED"},{"name":"slot_time","type":"STRING"},{"name":"original_caption_id","type":"STRING"},{"name":"override_caption_id","type":"STRING","mode":"REQUIRED"},{"name":"override_reason","type":"STRING"},{"name":"slot_price","type":"FLOAT"},{"name":"performance_tracked","type":"BOOLEAN","defaultValueExpression":"FALSE"}]

****** Table: ops.explore_exploit_config_v1 ******
[{"name":"config_key","type":"STRING"},{"name":"min_obs_for_exploit","type":"INTEGER"},{"name":"max_explorer_share","type":"FLOAT"},{"name":"cold_start_days","type":"INTEGER"},{"name":"thompson_sampling_enabled","type":"BOOLEAN"},{"name":"ucb_enabled","type":"BOOLEAN"},{"name":"decay_factor","type":"FLOAT"},{"name":"updated_at","type":"TIMESTAMP"}]

****** Table: ops.fallback_config_v1 ******
[{"name":"page_type","type":"STRING"},{"name":"fallback_caption_id","type":"STRING"},{"name":"fallback_caption_text","type":"STRING"},{"name":"fallback_price","type":"FLOAT"},{"name":"reason_code","type":"STRING"},{"name":"updated_at","type":"TIMESTAMP"}]

****** Table: ops.learning_changelog ******
[{"name":"username_std","type":"STRING"},{"name":"knob","type":"STRING"},{"name":"old_value","type":"STRING"},{"name":"new_value","type":"STRING"},{"name":"confidence","type":"FLOAT"},{"name":"reason","type":"STRING"},{"name":"computed_at","type":"TIMESTAMP"},{"name":"applied_at","type":"TIMESTAMP"}]

****** Table: ops.learning_changelog_v1_backup_20250909 ******
[{"name":"username_std","type":"STRING"},{"name":"knob","type":"STRING"},{"name":"old_value","type":"STRING"},{"name":"new_value","type":"STRING"},{"name":"confidence","type":"FLOAT"},{"name":"reason","type":"STRING"},{"name":"computed_at","type":"TIMESTAMP"},{"name":"applied_at","type":"TIMESTAMP"}]

****** Table: ops.ml_ranking_weights_v1 ******
[{"name":"page_state","type":"STRING"},{"name":"w_rps","type":"FLOAT"},{"name":"w_open","type":"FLOAT"},{"name":"w_buy","type":"FLOAT"},{"name":"w_dowhod","type":"FLOAT"},{"name":"w_price","type":"FLOAT"},{"name":"w_novelty","type":"FLOAT"},{"name":"w_momentum","type":"FLOAT"},{"name":"ucb_c","type":"FLOAT"},{"name":"epsilon","type":"FLOAT"},{"name":"updated_at","type":"TIMESTAMP"},{"name":"updated_by","type":"STRING"}]

****** Table: ops.ml_training_signals ******
[{"name":"signal_timestamp","type":"TIMESTAMP","mode":"REQUIRED"},{"name":"signal_type","type":"STRING"},{"name":"username_page","type":"STRING"},{"name":"slot_context","type":"RECORD","fields":[{"name":"hour_of_day","type":"INTEGER"},{"name":"day_of_week","type":"INTEGER"},{"name":"price_point","type":"FLOAT"},{"name":"page_type","type":"STRING"}]},{"name":"original_caption_features","type":"RECORD","fields":[{"name":"caption_id","type":"STRING"},{"name":"predicted_revenue","type":"FLOAT"},{"name":"predicted_open_rate","type":"FLOAT"}]},{"name":"override_caption_features","type":"RECORD","fields":[{"name":"caption_id","type":"STRING"},{"name":"actual_revenue","type":"FLOAT"},{"name":"actual_open_rate","type":"FLOAT"}]},{"name":"performance_delta","type":"RECORD","fields":[{"name":"revenue_impact","type":"FLOAT"},{"name":"open_rate_impact","type":"FLOAT"}]},{"name":"scheduler_context","type":"RECORD","fields":[{"name":"email","type":"STRING"},{"name":"experience_days","type":"INTEGER"},{"name":"historical_accuracy","type":"FLOAT"}]}]

****** Table: ops.onboarding_changelog ******
[{"name":"username_std","type":"STRING"},{"name":"username_raw","type":"STRING"},{"name":"assigned_scheduler","type":"STRING"},{"name":"tz","type":"STRING"},{"name":"tier_initial","type":"STRING"},{"name":"new_until","type":"DATE"},{"name":"created_at","type":"TIMESTAMP"},{"name":"notes","type":"STRING"}]

****** Table: ops.onboarding_changelog_v1_backup_20250909 ******
[{"name":"username_std","type":"STRING"},{"name":"username_raw","type":"STRING"},{"name":"assigned_scheduler","type":"STRING"},{"name":"tz","type":"STRING"},{"name":"tier_initial","type":"STRING"},{"name":"new_until","type":"DATE"},{"name":"created_at","type":"TIMESTAMP"},{"name":"notes","type":"STRING"}]

****** Table: ops.override_feedback ******
[{"name":"feedback_timestamp","type":"TIMESTAMP","mode":"REQUIRED"},{"name":"scheduler_email","type":"STRING","mode":"REQUIRED"},{"name":"username_page","type":"STRING","mode":"REQUIRED"},{"name":"override_result","type":"STRING"},{"name":"feedback_message","type":"STRING"},{"name":"revenue_delta","type":"FLOAT"},{"name":"open_rate_delta","type":"FLOAT"},{"name":"ml_training_completed","type":"BOOLEAN","defaultValueExpression":"FALSE"}]

****** Table: ops.personalization_weights_changelog ******
[{"name":"username_std","type":"STRING"},{"name":"old_weight_volume","type":"FLOAT"},{"name":"new_weight_volume","type":"FLOAT"},{"name":"old_weight_price","type":"FLOAT"},{"name":"new_weight_price","type":"FLOAT"},{"name":"old_weight_hours","type":"FLOAT"},{"name":"new_weight_hours","type":"FLOAT"},{"name":"old_exploration_rate","type":"FLOAT"},{"name":"new_exploration_rate","type":"FLOAT"},{"name":"features","type":"RECORD","fields":[{"name":"rev7","type":"FLOAT"},{"name":"revp","type":"FLOAT"},{"name":"slope_pct_7d","type":"FLOAT"},{"name":"hour_peak_ratio","type":"FLOAT"},{"name":"corr_final","type":"FLOAT"},{"name":"volume_boost","type":"FLOAT"},{"name":"buy_rate_ppv_28d","type":"FLOAT"}]},{"name":"computed_at","type":"TIMESTAMP"},{"name":"applied_at","type":"TIMESTAMP"}]

****** Table: ops.personalization_weights_changelog_v1_backup_20250909 ******
[{"name":"username_std","type":"STRING"},{"name":"old_weight_volume","type":"FLOAT"},{"name":"new_weight_volume","type":"FLOAT"},{"name":"old_weight_price","type":"FLOAT"},{"name":"new_weight_price","type":"FLOAT"},{"name":"old_weight_hours","type":"FLOAT"},{"name":"new_weight_hours","type":"FLOAT"},{"name":"old_exploration_rate","type":"FLOAT"},{"name":"new_exploration_rate","type":"FLOAT"},{"name":"features","type":"RECORD","fields":[{"name":"rev7","type":"FLOAT"},{"name":"revp","type":"FLOAT"},{"name":"slope_pct_7d","type":"FLOAT"},{"name":"hour_peak_ratio","type":"FLOAT"},{"name":"corr_final","type":"FLOAT"},{"name":"volume_boost","type":"FLOAT"},{"name":"buy_rate_ppv_28d","type":"FLOAT"}]},{"name":"computed_at","type":"TIMESTAMP"},{"name":"applied_at","type":"TIMESTAMP"}]

****** Table: ops.price_bands_v1 ******
[{"name":"tier","type":"STRING"},{"name":"page_type","type":"STRING"},{"name":"min_price","type":"FLOAT"},{"name":"max_price","type":"FLOAT"},{"name":"optimal_price","type":"FLOAT"},{"name":"ladder_steps","type":"INTEGER"},{"name":"ladder_increment","type":"FLOAT"},{"name":"updated_at","type":"TIMESTAMP"}]

****** Table: ops.quality_thresholds_v1 ******
[{"name":"metric_name","type":"STRING"},{"name":"min_threshold","type":"FLOAT"},{"name":"max_threshold","type":"FLOAT"},{"name":"alert_enabled","type":"BOOLEAN"},{"name":"auto_rollback_enabled","type":"BOOLEAN"},{"name":"updated_at","type":"TIMESTAMP"}]

****** Table: ops.quarantine_gmail ******
[{"name":"ingestion_run_id","type":"STRING"},{"name":"ingested_at","type":"TIMESTAMP"},{"name":"quarantine_reason","type":"STRING"},{"name":"raw_message_id","type":"STRING"},{"name":"raw_source_file","type":"STRING"},{"name":"raw_data","type":"STRING"},{"name":"error_details","type":"STRING"},{"name":"quarantined_at","type":"TIMESTAMP"}]

****** Table: ops.scheduler_assignments_v1 ******
[{"name":"username_std","type":"STRING"},{"name":"username_page","type":"STRING"},{"name":"scheduler_name","type":"STRING"},{"name":"scheduler_email","type":"STRING"},{"name":"is_active","type":"BOOLEAN"},{"name":"updated_at","type":"TIMESTAMP"}]

****** Table: ops.send_log ******
[{"name":"action_ts","type":"TIMESTAMP","mode":"REQUIRED"},{"name":"action_date","type":"DATE","mode":"REQUIRED"},{"name":"tracking_hash","type":"STRING"},{"name":"username_std","type":"STRING"},{"name":"page_type","type":"STRING"},{"name":"username_page","type":"STRING"},{"name":"scheduler_code","type":"STRING"},{"name":"scheduler_email","type":"STRING"},{"name":"date_local","type":"DATE"},{"name":"hod_local","type":"INTEGER"},{"name":"price_usd","type":"NUMERIC"},{"name":"caption_id","type":"STRING"},{"name":"status","type":"STRING"},{"name":"action","type":"STRING"},{"name":"source","type":"STRING"}]

------------------ VIEWS ------------------
****** View: ops.v_caption_ingestion_monitor ******
Table of-scheduler-proj:ops.v_caption_ingestion_monitor

                                      Query                                       
 -------------------------------------------------------------------------------- 
  SELECT                                                                          
    DATE(run_ts) as run_date,                                                     
    COUNT(*) as runs,                                                             
    SUM(new_captions_inserted) as total_inserted,                                 
    AVG(new_captions_inserted) as avg_inserted,                                   
    MAX(new_captions_inserted) as max_inserted,                                   
    SUM(duplicates_detected) as total_duplicates,                                 
    SUM(error_count) as total_errors,                                             
    STRING_AGG(error_sample LIMIT 3) as recent_errors,                            
    -- Performance metrics                                                        
    AVG(source_rows) as avg_source_rows,                                          
    SAFE_DIVIDE(SUM(new_captions_inserted), SUM(source_rows)) as insertion_rate,  
    SAFE_DIVIDE(SUM(duplicates_detected), SUM(source_rows)) as duplicate_rate     
  FROM `of-scheduler-proj.ops.caption_ingestion_log`                              
  WHERE run_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)             
  GROUP BY 1                                                                      
  ORDER BY 1 DESC                                                                 


****** View: ops.v_learning_freshness ******
Table of-scheduler-proj:ops.v_learning_freshness

                                            Query                                            
 ------------------------------------------------------------------------------------------- 
  SELECT MAX(applied_at) AS last_applied_at,                                                 
         TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(applied_at), MINUTE) AS minutes_since_last  
  FROM `of-scheduler-proj.ops.learning_changelog`                                            


****** View: ops.v_message_facts_freshness ******
Table of-scheduler-proj:ops.v_message_facts_freshness

                                            Query                                            
 ------------------------------------------------------------------------------------------- 
  SELECT MAX(sending_ts) AS max_sending_ts,                                                  
         TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(sending_ts), MINUTE) AS minutes_since_last  
  FROM `of-scheduler-proj.core.message_facts`                                                
  WHERE sending_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR)                   


****** View: ops.v_ml_training_overrides ******
Table of-scheduler-proj:ops.v_ml_training_overrides

                                                     Query                                                      
 -------------------------------------------------------------------------------------------------------------- 
  WITH override_performance AS (                                                                                
    SELECT                                                                                                      
      o.*,                                                                                                      
      f.override_result,                                                                                        
      f.revenue_delta,                                                                                          
      f.open_rate_delta,                                                                                        
      -- Calculate scheduler accuracy                                                                           
      COUNT(*) OVER (PARTITION BY o.scheduler_email) as total_overrides,                                        
      COUNTIF(f.override_result LIKE 'SUCCESS%') OVER (PARTITION BY o.scheduler_email) as successful_overrides  
    FROM `of-scheduler-proj.ops.caption_overrides` o                                                            
    LEFT JOIN `of-scheduler-proj.ops.override_feedback` f                                                       
      ON f.scheduler_email = o.scheduler_email                                                                  
      AND f.username_page = o.username_page                                                                     
      AND DATE(f.feedback_timestamp) = DATE(o.override_timestamp)                                               
  )                                                                                                             
  SELECT                                                                                                        
    *,                                                                                                          
    successful_overrides / NULLIF(total_overrides, 0) as scheduler_accuracy,                                    
    CASE                                                                                                        
      WHEN revenue_delta > 10 THEN 'HIGH_VALUE_LEARNING'                                                        
      WHEN revenue_delta < -10 THEN 'HIGH_COST_MISTAKE'                                                         
      ELSE 'STANDARD_SIGNAL'                                                                                    
    END as training_priority                                                                                    
  FROM override_performance                                                                                     
  WHERE override_timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)                               


****** View: ops.v_onboarding_freshness ******
Table of-scheduler-proj:ops.v_onboarding_freshness

                                          Query                                           
 ---------------------------------------------------------------------------------------- 
  WITH recent AS (                                                                        
    SELECT                                                                                
      `of-scheduler-proj.util.norm_username`(                                             
        REGEXP_REPLACE(REGEXP_EXTRACT(source_file, r'([^/]+)$'), r'\.[A-Za-z0-9]+$', '')  
      ) AS username_std,                                                                  
      MAX(message_sent_ts) AS last_seen                                                   
    FROM `of-scheduler-proj.layer_02_staging.gmail_events_staging`                        
    WHERE message_sent_ts >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 48 HOUR)         
    GROUP BY 1                                                                            
  )                                                                                       
  SELECT r.username_std, r.last_seen                                                      
  FROM recent r                                                                           
  LEFT JOIN `of-scheduler-proj.core.page_dim` d USING (username_std)                      
  WHERE d.username_std IS NULL                                                            
    AND TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), r.last_seen, MINUTE) > 120                    


****** View: ops.v_ops_plan_summary ******
Table of-scheduler-proj:ops.v_ops_plan_summary

                           Query                           
 --------------------------------------------------------- 
  SELECT                                                   
    username_std,                                          
    date_local,                                            
    COUNT(*) AS slots,                                     
    MIN(hod_local) AS first_hour,                          
    MAX(hod_local) AS last_hour,                           
    AVG(price_usd) AS avg_price                            
  FROM `of-scheduler-proj.mart.weekly_template_7d_latest`  
  GROUP BY 1,2                                             
  ORDER BY 1,2                                             


****** View: ops.v_plan_export_next_7d ******
Table of-scheduler-proj:ops.v_plan_export_next_7d

                         Query                         
 ----------------------------------------------------- 
  SELECT *                                             
  FROM `of-scheduler-proj.mart.v_plan_export_next_7d`  


****** View: ops.v_scheduler_performance ******
Table of-scheduler-proj:ops.v_scheduler_performance

                                          Query                                           
 ---------------------------------------------------------------------------------------- 
  SELECT                                                                                  
    scheduler_email,                                                                      
    COUNT(*) as total_overrides_30d,                                                      
    COUNTIF(override_result LIKE 'SUCCESS%') as successful_overrides,                     
    COUNTIF(override_result LIKE 'FAILURE%') as failed_overrides,                         
    ROUND(AVG(revenue_delta), 2) as avg_revenue_impact,                                   
    ROUND(SUM(revenue_delta), 2) as total_revenue_impact,                                 
    ROUND(COUNTIF(override_result LIKE 'SUCCESS%') / COUNT(*) * 100, 1) as success_rate,  
    ARRAY_AGG(                                                                            
      STRUCT(                                                                             
        username_page,                                                                    
        override_result,                                                                  
        revenue_delta                                                                     
      )                                                                                   
      ORDER BY ABS(revenue_delta) DESC                                                    
      LIMIT 5                                                                             
    ) as top_impacts                                                                      
  FROM `of-scheduler-proj.ops.override_feedback`                                          
  WHERE feedback_timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)         
  GROUP BY scheduler_email                                                                
  ORDER BY total_revenue_impact DESC                                                      


------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: ops_audit
==============================================================

------------------ TABLES ------------------
------------------ VIEWS ------------------
------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: ops_config
==============================================================

------------------ TABLES ------------------
****** Table: ops_config.feature_flags ******
[{"name":"flag_name","type":"STRING","mode":"REQUIRED"},{"name":"is_enabled","type":"BOOLEAN","mode":"REQUIRED"},{"name":"updated_at","type":"TIMESTAMP","mode":"REQUIRED"}]

****** Table: ops_config.ml_parameters ******
[{"name":"config_id","type":"STRING","mode":"REQUIRED"},{"name":"environment","type":"STRING","mode":"REQUIRED"},{"name":"page_state","type":"STRING"},{"name":"parameters","type":"JSON","mode":"REQUIRED"},{"name":"version_number","type":"INTEGER","mode":"REQUIRED"},{"name":"is_active","type":"BOOLEAN","mode":"REQUIRED"},{"name":"experiment_id","type":"STRING"},{"name":"experiment_allocation","type":"FLOAT"},{"name":"created_by","type":"STRING","mode":"REQUIRED"},{"name":"created_at","type":"TIMESTAMP","mode":"REQUIRED"},{"name":"expires_at","type":"TIMESTAMP"},{"name":"description","type":"STRING"}]

****** Table: ops_config.ml_params_bandit ******
[{"name":"tier","type":"STRING","mode":"REQUIRED"},{"name":"alpha","type":"FLOAT","mode":"REQUIRED"},{"name":"beta","type":"FLOAT","mode":"REQUIRED"},{"name":"epsilon","type":"FLOAT","mode":"REQUIRED"},{"name":"ucb_c","type":"FLOAT","mode":"REQUIRED"},{"name":"base_cooldown_hours","type":"FLOAT","mode":"REQUIRED"},{"name":"use_true_thompson","type":"BOOLEAN","mode":"REQUIRED"},{"name":"updated_at","type":"TIMESTAMP","mode":"REQUIRED"}]

****** Table: ops_config.scam_guardrails ******
[{"name":"guardrail_name","type":"STRING","mode":"REQUIRED"},{"name":"threshold_value","type":"FLOAT","mode":"REQUIRED"},{"name":"action","type":"STRING","mode":"REQUIRED"},{"name":"updated_at","type":"TIMESTAMP","mode":"REQUIRED"}]

****** Table: ops_config.tier_slot_packs ******
[{"name":"tier","type":"STRING","mode":"REQUIRED"},{"name":"anchors_per_day","type":"INTEGER","mode":"REQUIRED"},{"name":"supports_per_day","type":"INTEGER","mode":"REQUIRED"},{"name":"min_spacing_minutes","type":"INTEGER","mode":"REQUIRED"},{"name":"jitter_minutes","type":"INTEGER","mode":"REQUIRED"},{"name":"updated_at","type":"TIMESTAMP","mode":"REQUIRED"}]

------------------ VIEWS ------------------
****** View: ops_config.active_ml_config ******
Table of-scheduler-proj:ops_config.active_ml_config

                                      Query                                       
 -------------------------------------------------------------------------------- 
  SELECT                                                                          
    page_state,                                                                   
    environment,                                                                  
                                                                                  
    -- Extract key parameters for easy access                                     
    JSON_VALUE(parameters, '$.weights.performance') AS w_performance,             
    JSON_VALUE(parameters, '$.weights.exploration') AS w_exploration,             
    JSON_VALUE(parameters, '$.weights.recency') AS w_recency,                     
    JSON_VALUE(parameters, '$.weights.stability') AS w_stability,                 
                                                                                  
    JSON_VALUE(parameters, '$.exploration.epsilon_percent') AS epsilon_percent,   
    JSON_VALUE(parameters, '$.exploration.ucb_c') AS ucb_c,                       
                                                                                  
    JSON_VALUE(parameters, '$.cooldown.min_hours') AS min_cooldown_hours,         
    JSON_VALUE(parameters, '$.cooldown.fatigue_threshold') AS fatigue_threshold,  
                                                                                  
    -- Full JSON for complex logic                                                
    parameters AS full_config,                                                    
                                                                                  
    -- Metadata                                                                   
    version_number,                                                               
    experiment_id,                                                                
    experiment_allocation,                                                        
    created_at,                                                                   
    expires_at                                                                    
                                                                                  
  FROM `of-scheduler-proj.ops_config.ml_parameters`                               
  WHERE is_active = TRUE                                                          
    AND environment = 'prod'                                                      
    AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP())                  


------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: ops_monitor
==============================================================

------------------ TABLES ------------------
****** Table: ops_monitor.pipeline_runs ******
[{"name":"run_timestamp","type":"TIMESTAMP"},{"name":"pipeline_name","type":"STRING"},{"name":"status","type":"STRING"},{"name":"records_processed","type":"INTEGER"},{"name":"duration_seconds","type":"INTEGER"},{"name":"trigger_type","type":"STRING"}]

------------------ VIEWS ------------------
****** View: ops_monitor.dashboard_alerts ******
Table of-scheduler-proj:ops_monitor.dashboard_alerts

                                                             Query                                                              
 ------------------------------------------------------------------------------------------------------------------------------ 
  WITH current_metrics AS (                                                                                                     
    SELECT                                                                                                                      
      COUNT(*) AS feature_count,                                                                                                
      AVG(performance_features.rps_smoothed) AS avg_rps,                                                                        
      AVG(performance_features.confidence_score) AS avg_confidence                                                              
    FROM `of-scheduler-proj.layer_05_ml.feature_store`                                                                          
    WHERE computed_date = CURRENT_DATE()                                                                                        
  ),                                                                                                                            
  historical_metrics AS (                                                                                                       
    SELECT                                                                                                                      
      AVG(cnt) AS avg_feature_count,                                                                                            
      AVG(rps) AS historical_avg_rps,                                                                                           
      STDDEV(rps) AS historical_stddev_rps                                                                                      
    FROM (                                                                                                                      
      SELECT                                                                                                                    
        computed_date,                                                                                                          
        COUNT(*) AS cnt,                                                                                                        
        AVG(performance_features.rps_smoothed) AS rps                                                                           
      FROM `of-scheduler-proj.layer_05_ml.feature_store`                                                                        
      WHERE computed_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)        
      GROUP BY computed_date                                                                                                    
    )                                                                                                                           
  )                                                                                                                             
  SELECT                                                                                                                        
    CURRENT_TIMESTAMP() AS alert_time,                                                                                          
                                                                                                                                
    -- Generate alerts                                                                                                          
    ARRAY_CONCAT(                                                                                                               
      -- Data freshness alert                                                                                                   
      IF(                                                                                                                       
        (SELECT TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(computed_at), HOUR)                                                     
         FROM `of-scheduler-proj.layer_05_ml.feature_store`) > 26,                                                              
        [STRUCT('CRITICAL' AS severity, 'Data Freshness' AS alert_type, 'Feature store not updated in >26 hours' AS message)],  
        []                                                                                                                      
      ),                                                                                                                        
                                                                                                                                
      -- Volume anomaly alert                                                                                                   
      IF(                                                                                                                       
        ABS(cm.feature_count - hm.avg_feature_count) > 3 * SQRT(hm.avg_feature_count),                                          
        [STRUCT('WARNING' AS severity, 'Volume Anomaly' AS alert_type,                                                          
                CONCAT('Feature count (', CAST(cm.feature_count AS STRING), ') deviates from normal') AS message)],             
        []                                                                                                                      
      ),                                                                                                                        
                                                                                                                                
      -- Performance degradation alert                                                                                          
      IF(                                                                                                                       
        cm.avg_rps < hm.historical_avg_rps - 2 * hm.historical_stddev_rps,                                                      
        [STRUCT('WARNING' AS severity, 'Performance Degradation' AS alert_type,                                                 
                CONCAT('Average RPS (', CAST(ROUND(cm.avg_rps, 4) AS STRING), ') below normal range') AS message)],             
        []                                                                                                                      
      ),                                                                                                                        
                                                                                                                                
      -- Low confidence alert                                                                                                   
      IF(                                                                                                                       
        cm.avg_confidence < 0.05,                                                                                               
        [STRUCT('INFO' AS severity, 'Low Confidence' AS alert_type,                                                             
                'Average confidence score below threshold' AS message)],                                                        
        []                                                                                                                      
      )                                                                                                                         
    ) AS alerts                                                                                                                 
                                                                                                                                
  FROM current_metrics cm                                                                                                       
  CROSS JOIN historical_metrics hm                                                                                              


****** View: ops_monitor.dashboard_data_quality ******
Table of-scheduler-proj:ops_monitor.dashboard_data_quality

                                                                          Query                                                                          
 ------------------------------------------------------------------------------------------------------------------------------------------------------- 
  SELECT                                                                                                                                                 
    'Feature Store' AS dataset,                                                                                                                          
    COUNT(*) AS total_records,                                                                                                                           
                                                                                                                                                         
    -- Null checks                                                                                                                                       
    SUM(CASE WHEN caption_id IS NULL THEN 1 ELSE 0 END) AS null_caption_ids,                                                                             
    SUM(CASE WHEN performance_features.rps_smoothed IS NULL THEN 1 ELSE 0 END) AS null_rps,                                                              
                                                                                                                                                         
    -- Range checks                                                                                                                                      
    SUM(CASE WHEN performance_features.confidence_score < 0 OR performance_features.confidence_score > 1 THEN 1 ELSE 0 END) AS confidence_out_of_range,  
    SUM(CASE WHEN cooldown_features.fatigue_score < 0 OR cooldown_features.fatigue_score > 1 THEN 1 ELSE 0 END) AS fatigue_out_of_range,                 
                                                                                                                                                         
    -- Consistency checks                                                                                                                                
    SUM(CASE WHEN performance_features.sends_30d = 0 AND performance_features.rps_30d > 0 THEN 1 ELSE 0 END) AS inconsistent_metrics,                    
                                                                                                                                                         
    -- Overall quality score                                                                                                                             
    ROUND(100.0 * (1 - (                                                                                                                                 
      SUM(CASE WHEN caption_id IS NULL THEN 1 ELSE 0 END) +                                                                                              
      SUM(CASE WHEN performance_features.confidence_score < 0 OR performance_features.confidence_score > 1 THEN 1 ELSE 0 END)                            
    ) / NULLIF(COUNT(*), 0)), 1) AS quality_score_pct                                                                                                    
                                                                                                                                                         
  FROM `of-scheduler-proj.layer_05_ml.feature_store`                                                                                                     
  WHERE computed_date = CURRENT_DATE()                                                                                                                   
                                                                                                                                                         
  UNION ALL                                                                                                                                              
                                                                                                                                                         
  SELECT                                                                                                                                                 
    'Fact Table' AS dataset,                                                                                                                             
    COUNT(*) AS total_records,                                                                                                                           
    SUM(CASE WHEN caption_key = 'UNKNOWN' THEN 1 ELSE 0 END) AS null_caption_ids,                                                                        
    SUM(CASE WHEN revenue_per_send IS NULL THEN 1 ELSE 0 END) AS null_rps,                                                                               
    SUM(CASE WHEN messages_purchased > messages_sent THEN 1 ELSE 0 END) AS confidence_out_of_range,                                                      
    0 AS fatigue_out_of_range,                                                                                                                           
    SUM(CASE WHEN quality_flag != 'valid' THEN 1 ELSE 0 END) AS inconsistent_metrics,                                                                    
    ROUND(100.0 * SUM(CASE WHEN quality_flag = 'valid' THEN 1 ELSE 0 END) / NULLIF(COUNT(*), 0), 1) AS quality_score_pct                                 
  FROM `of-scheduler-proj.layer_03_foundation.fact_message_send`                                                                                         
  WHERE send_date = CURRENT_DATE()                                                                                                                       


****** View: ops_monitor.dashboard_exploration_balance ******
Table of-scheduler-proj:ops_monitor.dashboard_exploration_balance

                                                                Query                                                                 
 ------------------------------------------------------------------------------------------------------------------------------------ 
  WITH exploration_metrics AS (                                                                                                       
    SELECT                                                                                                                            
      username_page,                                                                                                                  
      COUNT(*) AS total_captions,                                                                                                     
                                                                                                                                      
      -- Categorize by exploration status                                                                                             
      SUM(CASE WHEN performance_features.sends_30d < 10 THEN 1 ELSE 0 END) AS new_captions,                                           
      SUM(CASE WHEN performance_features.sends_30d BETWEEN 10 AND 50 THEN 1 ELSE 0 END) AS exploring_captions,                        
      SUM(CASE WHEN performance_features.sends_30d > 50 THEN 1 ELSE 0 END) AS exploiting_captions,                                    
                                                                                                                                      
      -- Average scores by category                                                                                                   
      AVG(CASE WHEN performance_features.sends_30d < 10 THEN exploration_features.novelty_bonus ELSE NULL END) AS avg_novelty_bonus,  
      AVG(exploration_features.ucb_bonus) AS avg_ucb_bonus                                                                            
                                                                                                                                      
    FROM `of-scheduler-proj.layer_05_ml.feature_store`                                                                                
    WHERE computed_date = CURRENT_DATE()                                                                                              
    GROUP BY username_page                                                                                                            
  )                                                                                                                                   
  SELECT                                                                                                                              
    username_page,                                                                                                                    
    total_captions,                                                                                                                   
    new_captions,                                                                                                                     
    exploring_captions,                                                                                                               
    exploiting_captions,                                                                                                              
                                                                                                                                      
    -- Percentages                                                                                                                    
    ROUND(100.0 * new_captions / NULLIF(total_captions, 0), 1) AS new_pct,                                                            
    ROUND(100.0 * exploring_captions / NULLIF(total_captions, 0), 1) AS exploring_pct,                                                
    ROUND(100.0 * exploiting_captions / NULLIF(total_captions, 0), 1) AS exploiting_pct,                                              
                                                                                                                                      
    -- Exploration health                                                                                                             
    CASE                                                                                                                              
      WHEN new_captions > 0.3 * total_captions THEN 'High Exploration'                                                                
      WHEN new_captions > 0.1 * total_captions THEN 'Balanced'                                                                        
      ELSE 'Low Exploration'                                                                                                          
    END AS exploration_status,                                                                                                        
                                                                                                                                      
    ROUND(avg_novelty_bonus, 3) AS avg_novelty_bonus,                                                                                 
    ROUND(avg_ucb_bonus, 3) AS avg_ucb_bonus                                                                                          
                                                                                                                                      
  FROM exploration_metrics                                                                                                            
  ORDER BY total_captions DESC                                                                                                        


****** View: ops_monitor.dashboard_hourly_patterns ******
Table of-scheduler-proj:ops_monitor.dashboard_hourly_patterns

                                                Query                                                 
 ---------------------------------------------------------------------------------------------------- 
  SELECT                                                                                              
    temporal_features.best_hour AS hour_utc,                                                          
    COUNT(*) AS caption_count,                                                                        
    AVG(temporal_features.best_hour_rps) AS avg_best_hour_rps,                                        
    AVG(performance_features.rps_smoothed) AS avg_overall_rps,                                        
                                                                                                      
    -- Performance lift at best hour                                                                  
    ROUND(100.0 * (AVG(temporal_features.best_hour_rps) - AVG(performance_features.rps_smoothed)) /   
          NULLIF(AVG(performance_features.rps_smoothed), 0), 1) AS performance_lift_pct               
                                                                                                      
  FROM `of-scheduler-proj.layer_05_ml.feature_store`                                                  
  WHERE computed_date = CURRENT_DATE()                                                                
  GROUP BY hour_utc                                                                                   
  ORDER BY hour_utc                                                                                   


****** View: ops_monitor.dashboard_ml_performance ******
Table of-scheduler-proj:ops_monitor.dashboard_ml_performance

                                              Query                                               
 ------------------------------------------------------------------------------------------------ 
  WITH daily_metrics AS (                                                                         
    SELECT                                                                                        
      computed_date,                                                                              
      COUNT(*) AS features_computed,                                                              
      AVG(performance_features.rps_smoothed) AS avg_rps,                                          
      AVG(performance_features.confidence_score) AS avg_confidence,                               
      AVG(CASE WHEN cooldown_features.is_eligible THEN 1.0 ELSE 0.0 END) AS eligibility_rate,     
      APPROX_QUANTILES(composite_scores.base_score, 100)[OFFSET(50)] AS median_score,             
      COUNT(DISTINCT username_page) AS active_pages                                               
    FROM `of-scheduler-proj.layer_05_ml.feature_store`                                            
    WHERE computed_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)                              
    GROUP BY computed_date                                                                        
  )                                                                                               
  SELECT                                                                                          
    computed_date,                                                                                
    features_computed,                                                                            
    ROUND(avg_rps, 4) AS avg_rps,                                                                 
    ROUND(avg_confidence, 3) AS avg_confidence,                                                   
    ROUND(eligibility_rate * 100, 1) AS eligibility_rate_pct,                                     
    ROUND(median_score, 3) AS median_score,                                                       
    active_pages,                                                                                 
                                                                                                  
    -- Trend indicators                                                                           
    avg_rps - LAG(avg_rps) OVER (ORDER BY computed_date) AS rps_change,                           
    eligibility_rate - LAG(eligibility_rate) OVER (ORDER BY computed_date) AS eligibility_change  
                                                                                                  
  FROM daily_metrics                                                                              
  ORDER BY computed_date DESC                                                                     


****** View: ops_monitor.dashboard_system_health ******
Table of-scheduler-proj:ops_monitor.dashboard_system_health

                                            Query                                             
 -------------------------------------------------------------------------------------------- 
  SELECT                                                                                      
    CURRENT_TIMESTAMP() AS check_time,                                                        
                                                                                              
    -- Overall health score (0-100)                                                           
    CAST(                                                                                     
      (CASE WHEN freshness.feature_store_age_hours < 26 THEN 25 ELSE 0 END) +                 
      (CASE WHEN quality.eligible_rate > 0.3 THEN 25 ELSE 15 END) +                           
      (CASE WHEN volume.daily_sends > 100 THEN 25 ELSE 15 END) +                              
      (CASE WHEN performance.avg_confidence > 0.05 THEN 25 ELSE 15 END)                       
    AS INT64) AS health_score,                                                                
                                                                                              
    -- Component statuses                                                                     
    freshness.feature_store_age_hours,                                                        
    quality.eligible_rate,                                                                    
    volume.daily_sends,                                                                       
    performance.avg_confidence,                                                               
    performance.avg_rps,                                                                      
                                                                                              
    -- Alert status                                                                           
    CASE                                                                                      
      WHEN freshness.feature_store_age_hours > 48 THEN 'CRITICAL - Stale Data'                
      WHEN quality.eligible_rate < 0.1 THEN 'WARNING - Low Eligibility'                       
      WHEN volume.daily_sends < 10 THEN 'WARNING - Low Volume'                                
      ELSE 'HEALTHY'                                                                          
    END AS alert_status                                                                       
                                                                                              
  FROM (                                                                                      
    -- Data freshness                                                                         
    SELECT                                                                                    
      TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), MAX(computed_at), HOUR) AS feature_store_age_hours  
    FROM `of-scheduler-proj.layer_05_ml.feature_store`                                        
  ) freshness                                                                                 
  CROSS JOIN (                                                                                
    -- Quality metrics                                                                        
    SELECT                                                                                    
      AVG(CASE WHEN cooldown_features.is_eligible THEN 1.0 ELSE 0.0 END) AS eligible_rate     
    FROM `of-scheduler-proj.layer_05_ml.feature_store`                                        
    WHERE computed_date = CURRENT_DATE()                                                      
  ) quality                                                                                   
  CROSS JOIN (                                                                                
    -- Volume metrics                                                                         
    SELECT                                                                                    
      COUNT(*) AS daily_sends                                                                 
    FROM `of-scheduler-proj.layer_03_foundation.fact_message_send`                            
    WHERE send_date = CURRENT_DATE()                                                          
  ) volume                                                                                    
  CROSS JOIN (                                                                                
    -- Performance metrics                                                                    
    SELECT                                                                                    
      AVG(performance_features.confidence_score) AS avg_confidence,                           
      AVG(performance_features.rps_smoothed) AS avg_rps                                       
    FROM `of-scheduler-proj.layer_05_ml.feature_store`                                        
    WHERE computed_date = CURRENT_DATE()                                                      
  ) performance                                                                               


****** View: ops_monitor.dashboard_top_captions ******
Table of-scheduler-proj:ops_monitor.dashboard_top_captions

                                           Query                                           
 ----------------------------------------------------------------------------------------- 
  SELECT                                                                                   
    caption_id,                                                                            
    username_page,                                                                         
    caption_category,                                                                      
                                                                                           
    -- Performance metrics                                                                 
    ROUND(performance_features.rps_smoothed, 4) AS rps,                                    
    ROUND(performance_features.confidence_score, 3) AS confidence,                         
    performance_features.sends_30d AS recent_sends,                                        
                                                                                           
    -- Ranking                                                                             
    RANK() OVER (ORDER BY performance_features.rps_smoothed DESC) AS rps_rank,             
    RANK() OVER (ORDER BY performance_features.confidence_score DESC) AS confidence_rank,  
    RANK() OVER (ORDER BY composite_scores.base_score DESC) AS overall_rank,               
                                                                                           
    -- Status                                                                              
    CASE                                                                                   
      WHEN cooldown_features.is_eligible THEN 'Eligible'                                   
      WHEN cooldown_features.fatigue_score > 0.8 THEN 'Fatigued'                           
      ELSE 'Cooling Down'                                                                  
    END AS status,                                                                         
                                                                                           
    temporal_features.hours_since_use AS hours_since_last_use                              
                                                                                           
  FROM `of-scheduler-proj.layer_05_ml.feature_store`                                       
  WHERE computed_date = CURRENT_DATE()                                                     
  ORDER BY overall_rank                                                                    
  LIMIT 100                                                                                


****** View: ops_monitor.gmail_dedup_check ******
Table of-scheduler-proj:ops_monitor.gmail_dedup_check

                                                             Query                                                              
 ------------------------------------------------------------------------------------------------------------------------------ 
  WITH normalized AS (                                                                                                          
    SELECT *                                                                                                                    
    FROM `of-scheduler-proj.layer_02_staging.fn_gmail_events_normalized`(                                                       
      DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY),                                                                                 
      CURRENT_DATE()                                                                                                            
    )                                                                                                                           
  )                                                                                                                             
  SELECT                                                                                                                        
    ingestion_date,                                                                                                             
    COUNT(*) AS total_rows,                                                                                                     
    COUNT(DISTINCT CONCAT(caption_hash, '|', Sender, '|', CAST(message_sent_date AS STRING))) AS unique_keys,                   
    COUNT(*) - COUNT(DISTINCT CONCAT(caption_hash, '|', Sender, '|', CAST(message_sent_date AS STRING))) AS duplicates_removed  
  FROM normalized                                                                                                               
  GROUP BY 1                                                                                                                    
  ORDER BY 1 DESC                                                                                                               


****** View: ops_monitor.gmail_etl_quality ******
Table of-scheduler-proj:ops_monitor.gmail_etl_quality

                                           Query                                            
 ------------------------------------------------------------------------------------------ 
  WITH normalized AS (                                                                      
    SELECT *                                                                                
    FROM `of-scheduler-proj.layer_02_staging.fn_gmail_events_normalized`(                   
      DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY),                                            
      CURRENT_DATE()                                                                        
    )                                                                                       
  ),                                                                                        
  daily AS (                                                                                
    SELECT                                                                                  
      ingestion_date,                                                                       
      COUNT(*) AS rows_ingested,                                                            
      COUNT(DISTINCT ingestion_run_id) AS unique_runs,                                      
      COUNT(DISTINCT message_id) AS unique_messages,                                        
                                                                                            
      -- ideally 0                                                                          
      COUNTIF(message_id IS NULL)      AS cnt_message_id_null,                              
      COUNTIF(source_file IS NULL)     AS cnt_source_file_null,                             
      COUNTIF(message_sent_ts IS NULL) AS cnt_event_time_null,                              
                                                                                            
      -- sanity                                                                             
      COUNTIF(message_sent_date < DATE '2018-01-01')         AS cnt_date_too_old,           
      COUNTIF(message_sent_date > CURRENT_DATE())            AS cnt_date_future,            
                                                                                            
      -- parsing failures (NOW USING RAW FIELDS)                                            
      COUNTIF(price_raw IS NOT NULL AND price_usd IS NULL)   AS cnt_price_parse_fail,       
      COUNTIF(earnings_raw IS NOT NULL AND revenue_usd IS NULL) AS cnt_revenue_parse_fail,  
                                                                                            
      -- volumes                                                                            
      SUM(sent_count) AS total_messages_sent,                                               
      SUM(revenue_usd) AS total_revenue,                                                    
      AVG(view_rate)   AS avg_view_rate                                                     
    FROM normalized                                                                         
    GROUP BY 1                                                                              
  )                                                                                         
  SELECT                                                                                    
    *,                                                                                      
    CAST(100 * (1 - (                                                                       
      cnt_message_id_null + cnt_source_file_null + cnt_event_time_null +                    
      cnt_price_parse_fail + cnt_revenue_parse_fail                                         
    ) / NULLIF(rows_ingested, 0)) AS INT64) AS quality_score                                
  FROM daily                                                                                
  ORDER BY ingestion_date DESC                                                              


------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: raw
==============================================================

------------------ TABLES ------------------
****** Table: raw.caption_library ******
[{"name":"caption_id","type":"STRING"},{"name":"caption_type","type":"STRING"},{"name":"caption_text","type":"STRING"},{"name":"caption_hash","type":"STRING"},{"name":"theme_tags","type":"STRING"},{"name":"length_cat","type":"STRING"},{"name":"explicitness","type":"STRING"},{"name":"price_last_sent","type":"NUMERIC"},{"name":"last_used_by","type":"STRING"},{"name":"last_used_date","type":"TIMESTAMP"},{"name":"last_used_page","type":"STRING"},{"name":"times_used","type":"INTEGER"},{"name":"created_at","type":"TIMESTAMP"},{"name":"updated_at","type":"TIMESTAMP"},{"name":"caption_hash_v2","type":"STRING"}]

****** Table: raw.model_profiles_enhanced ******
[{"name":"date_range_start","type":"DATE"},{"name":"date_range_end","type":"DATE"},{"name":"original_date_string","type":"STRING"},{"name":"creator","type":"STRING"},{"name":"subscription_net","type":"FLOAT"},{"name":"new_subscriptions_net","type":"FLOAT"},{"name":"recurring_subscriptions_net","type":"FLOAT"},{"name":"tips_net","type":"FLOAT"},{"name":"total_earnings_net","type":"FLOAT"},{"name":"contribution_pct","type":"STRING"},{"name":"of_ranking","type":"STRING"},{"name":"following_count","type":"INTEGER"},{"name":"fans_with_renew_on","type":"INTEGER"},{"name":"renew_on_pct","type":"STRING"},{"name":"new_fans","type":"INTEGER"},{"name":"active_fans","type":"INTEGER"},{"name":"change_in_expired_fan_count","type":"INTEGER"},{"name":"message_net","type":"FLOAT"},{"name":"creator_group","type":"STRING"},{"name":"avg_spend_per_spender_net","type":"FLOAT"},{"name":"avg_spend_per_transaction_net","type":"FLOAT"},{"name":"avg_earnings_per_fan_net","type":"FLOAT"},{"name":"avg_subscription_length","type":"STRING"},{"name":"performance_tier","type":"STRING"},{"name":"engagement_per_fan","type":"FLOAT"},{"name":"lifetime_value_per_fan","type":"FLOAT"},{"name":"net_growth_rate","type":"FLOAT"},{"name":"tips_revenue_ratio","type":"FLOAT"},{"name":"sub_revenue_ratio","type":"FLOAT"},{"name":"message_revenue_ratio","type":"FLOAT"},{"name":"fan_conversion_rate","type":"FLOAT"},{"name":"renewal_rate","type":"FLOAT"},{"name":"activity_level","type":"STRING"},{"name":"content_strategy","type":"STRING"},{"name":"growth_momentum","type":"STRING"},{"name":"lifecycle_stage","type":"STRING"},{"name":"start_date","type":"DATE"},{"name":"end_date","type":"DATE"},{"name":"period_days","type":"INTEGER"},{"name":"daily_revenue_avg","type":"FLOAT"},{"name":"subscription_health_score","type":"FLOAT"},{"name":"assigned_scheduler","type":"STRING"},{"name":"high_volume_ppv_quota","type":"FLOAT"},{"name":"high_volume_bump_quota","type":"FLOAT"},{"name":"low_volume_ppv_quota","type":"FLOAT"},{"name":"low_volume_bump_quota","type":"FLOAT"}]

****** Table: raw.scheduled_sends ******
[{"name":"log_uid","type":"STRING"},{"name":"logged_ts","type":"TIMESTAMP"},{"name":"sent_date","type":"DATE"},{"name":"model_name","type":"STRING"},{"name":"scheduler_name","type":"STRING"},{"name":"caption_id","type":"STRING"},{"name":"caption_type","type":"STRING"},{"name":"caption_preview","type":"STRING"},{"name":"status","type":"STRING"},{"name":"price_usd","type":"NUMERIC"},{"name":"final_caption","type":"STRING"},{"name":"send_time","type":"STRING"},{"name":"scheduled_datetime","type":"DATETIME"},{"name":"was_modified","type":"BOOLEAN"},{"name":"tracking_hash","type":"STRING"},{"name":"created_at","type":"TIMESTAMP"},{"name":"tracking_hash_v2","type":"STRING"}]

****** Table: raw.username_mapping ******
[{"name":"mapping_id","type":"STRING"},{"name":"raw_username","type":"STRING"},{"name":"normalized_username","type":"STRING"},{"name":"base_username","type":"STRING"},{"name":"account_type","type":"STRING"},{"name":"standard_username","type":"STRING"},{"name":"created_at","type":"TIMESTAMP"},{"name":"updated_at","type":"TIMESTAMP"}]

------------------ VIEWS ------------------
------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: sheets
==============================================================

------------------ TABLES ------------------
****** Table: sheets.backup_log_20250909_212308 ******
[{"name":"timestamp","type":"TIMESTAMP","defaultValueExpression":"CURRENT_TIMESTAMP()"},{"name":"view_name","type":"STRING"},{"name":"backup_status","type":"STRING"}]

****** Table: sheets.v_my_day_slots_all_v1__bak_20250909_212308 ******
[{"name":"assigned_scheduler","type":"STRING"},{"name":"username_std","type":"STRING"},{"name":"page_state","type":"STRING"},{"name":"state_note","type":"STRING"},{"name":"price_p25","type":"NUMERIC"},{"name":"price_p50","type":"NUMERIC"},{"name":"price_p75","type":"NUMERIC"},{"name":"hod1","type":"INTEGER"},{"name":"hod2","type":"INTEGER"},{"name":"hod3","type":"INTEGER"},{"name":"hod4","type":"INTEGER"},{"name":"hod5","type":"INTEGER"},{"name":"caption_id","type":"STRING"},{"name":"caption_text","type":"STRING"},{"name":"caption_type","type":"STRING"},{"name":"explicitness","type":"STRING"},{"name":"theme_tags","type":"STRING"},{"name":"hist_revenue","type":"NUMERIC"},{"name":"caption_rank","type":"INTEGER"}]

****** Table: sheets.v_my_day_slots_all_v1__bak_20250909_215137 ******
[{"name":"username_std","type":"STRING"},{"name":"username_page","type":"STRING"},{"name":"slot_kind","type":"STRING"},{"name":"channel","type":"STRING"},{"name":"local_dt","type":"DATETIME"},{"name":"hod","type":"INTEGER"},{"name":"price_usd","type":"FLOAT"},{"name":"slot_rank","type":"INTEGER"},{"name":"slot_local_human","type":"STRING"}]

------------------ VIEWS ------------------
****** View: sheets.v_daily_brief_user_flat ******
Table of-scheduler-proj:sheets.v_daily_brief_user_flat

                                      Query                                      
 ------------------------------------------------------------------------------- 
  WITH me AS (                                                                   
    SELECT scheduler_name, IFNULL(can_view_all, FALSE) AS can_view_all           
    FROM `of-scheduler-proj.core.scheduler_user_map`                             
    WHERE LOWER(email) = LOWER(SESSION_USER())                                   
    LIMIT 1                                                                      
  )                                                                              
  SELECT                                                                         
    d.assigned_scheduler,                                                        
    d.username_std,                                                              
    d.page_state,                                                                
    d.state_note,                                                                
    d.price_band_suggested.p25 AS price_p25,                                     
    d.price_band_suggested.p50 AS price_p50,                                     
    d.price_band_suggested.p75 AS price_p75,                                     
    d.best_hours_local[SAFE_OFFSET(0)] AS hod1,                                  
    d.best_hours_local[SAFE_OFFSET(1)] AS hod2,                                  
    d.best_hours_local[SAFE_OFFSET(2)] AS hod3,                                  
    d.best_hours_local[SAFE_OFFSET(3)] AS hod4,                                  
    d.best_hours_local[SAFE_OFFSET(4)] AS hod5,                                  
    cap.caption_id,                                                              
    cap.caption_text,                                                            
    cap.caption_type,                                                            
    cap.explicitness,                                                            
    cap.theme_tags,                                                              
    cap.hist_revenue,                                                            
    pos + 1 AS caption_rank                                                      
  FROM `of-scheduler-proj.mart.v_daily_brief_today` d                            
  JOIN me ON me.can_view_all = TRUE OR d.assigned_scheduler = me.scheduler_name  
  LEFT JOIN UNNEST(d.caption_suggestions) AS cap WITH OFFSET AS pos              


****** View: sheets.v_my_day_slots_all_v1 ******
Table of-scheduler-proj:sheets.v_my_day_slots_all_v1

                                                        Query                                                         
 -------------------------------------------------------------------------------------------------------------------- 
  WITH tz AS (                                                                                                        
    -- tz per page; page_dim has username_std + tz                                                                    
    SELECT username_std, COALESCE(tz,'UTC') AS tz                                                                     
    FROM `of-scheduler-proj.core.page_dim`                                                                            
  ),                                                                                                                  
  map AS (                                                                                                            
    -- authoritative username_page (if your v_pages exists)                                                           
    SELECT username_std, ANY_VALUE(username_page) AS username_page                                                    
    FROM `of-scheduler-proj.core.v_pages`                                                                             
    GROUP BY username_std                                                                                             
  ),                                                                                                                  
  /* ---------- PPV anchors (today) ---------- */                                                                     
  ppv AS (                                                                                                            
    SELECT                                                                                                            
      t.username_std,                                                                                                 
      COALESCE(m.username_page, CONCAT(LOWER(t.username_std),'__main')) AS username_page,                             
      'ppv' AS slot_kind,                                                                                             
      'MM'  AS channel,  -- DM                                                                                        
      DATETIME(t.date_local, TIME(t.hod_local,0,0)) AS local_dt,                                                      
      CAST(t.price_usd AS FLOAT64) AS price_usd,                                                                      
      t.slot_rank                                                                                                     
    FROM `of-scheduler-proj.mart.v_weekly_template_7d_pages_final` t                                                  
    JOIN tz z ON z.username_std = t.username_std                                                                      
    LEFT JOIN map m ON m.username_std = t.username_std                                                                
    WHERE DATE(DATETIME(t.date_local, TIME(t.hod_local,0,0))) = CURRENT_DATE(z.tz)                                    
  ),                                                                                                                  
  /* ---------- PPV follow-ups (today) ---------- */                                                                  
  fub AS (                                                                                                            
    SELECT                                                                                                            
      f.username_std,                                                                                                 
      COALESCE(m.username_page, CONCAT(LOWER(f.username_std),'__main')) AS username_page,                             
      'ppv_followup' AS slot_kind,                                                                                    
      'MM'           AS channel,      -- DM                                                                           
      f.planned_local_datetime        AS local_dt,                                                                    
      NULL          AS price_usd,                                                                                     
      NULL          AS slot_rank                                                                                      
    FROM `of-scheduler-proj.mart.v_ppv_followup_bumps_v1` f                                                           
    JOIN tz  z ON z.username_std = f.username_std                                                                     
    LEFT JOIN map m ON m.username_std = f.username_std                                                                
    WHERE DATE(f.planned_local_datetime) = CURRENT_DATE(z.tz)                                                         
  ),                                                                                                                  
  /* ---------- Non-DM (today): drip MM/Wall, renewals (paid only), link drops ---------- */                          
  non_dm AS (                                                                                                         
    SELECT                                                                                                            
      n.username_std,                                                                                                 
      COALESCE(m.username_page, CONCAT(LOWER(n.username_std),'__main')) AS username_page,                             
      n.slot_kind,                                              -- 'drip_mm' | 'drip_wall' | 'renewal' | 'link_drop'  
      CASE WHEN n.slot_kind IN ('drip_mm','renewal') THEN 'MM' ELSE 'Wall' END AS channel,                            
      n.planned_local_datetime AS local_dt,                                                                           
      NULL AS price_usd,                                                                                              
      NULL AS slot_rank                                                                                               
    FROM `of-scheduler-proj.mart.v_non_dm_windows_7d_v1` n                                                            
    JOIN tz  z ON z.username_std = n.username_std                                                                     
    LEFT JOIN map m ON m.username_std = n.username_std                                                                
    WHERE DATE(n.planned_local_datetime) = CURRENT_DATE(z.tz)                                                         
  )                                                                                                                   
  /* ---------- Final union in Sheet-friendly shape ---------- */                                                     
  SELECT                                                                                                              
    x.username_std,                                                                                                   
    x.username_page,                                                                                                  
    x.slot_kind,                                                                                                      
    x.channel,                                                                                                        
    x.local_dt,                                                                                                       
    EXTRACT(HOUR FROM x.local_dt) AS hod,                                                                             
    x.price_usd,                                                                                                      
    x.slot_rank,                                                                                                      
    FORMAT_DATETIME('%a %b %d, %I:%M %p', x.local_dt) AS slot_local_human                                             
  FROM (                                                                                                              
    SELECT * FROM ppv                                                                                                 
    UNION ALL SELECT * FROM fub                                                                                       
    UNION ALL SELECT * FROM non_dm                                                                                    
  ) x                                                                                                                 
  ORDER BY x.username_std, x.local_dt, x.slot_kind                                                                    


------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: staging
==============================================================

------------------ TABLES ------------------
****** Table: staging.creator_stats_upload ******
[{"name":"Date_Time America_New_York","type":"STRING","mode":"NULLABLE"},{"name":"Creator","type":"STRING","mode":"NULLABLE"},{"name":"Subscription Net","type":"FLOAT","mode":"NULLABLE"},{"name":"New subscriptions Net","type":"FLOAT","mode":"NULLABLE"},{"name":"Recurring subscriptions Net","type":"FLOAT","mode":"NULLABLE"},{"name":"Tips Net","type":"FLOAT","mode":"NULLABLE"},{"name":"Total earnings Net","type":"FLOAT","mode":"NULLABLE"},{"name":"Contribution %","type":"STRING","mode":"NULLABLE"},{"name":"OF ranking","type":"STRING","mode":"NULLABLE"},{"name":"Following","type":"INTEGER","mode":"NULLABLE"},{"name":"Fans with renew on","type":"INTEGER","mode":"NULLABLE"},{"name":"Renew on %","type":"STRING","mode":"NULLABLE"},{"name":"New fans","type":"INTEGER","mode":"NULLABLE"},{"name":"Active fans","type":"INTEGER","mode":"NULLABLE"},{"name":"Change in expired fan count","type":"INTEGER","mode":"NULLABLE"},{"name":"Posts Net","type":"FLOAT","mode":"NULLABLE"},{"name":"Message Net","type":"FLOAT","mode":"NULLABLE"},{"name":"Streams Net","type":"FLOAT","mode":"NULLABLE"},{"name":"Refund Net","type":"FLOAT","mode":"NULLABLE"},{"name":"Creator group","type":"STRING","mode":"NULLABLE"},{"name":"Avg spend per spender Net","type":"FLOAT","mode":"NULLABLE"},{"name":"Avg spend per transaction Net","type":"FLOAT","mode":"NULLABLE"},{"name":"Avg earnings per fan Net","type":"FLOAT","mode":"NULLABLE"},{"name":"Avg subscription length","type":"STRING","mode":"NULLABLE"}]

****** Table: staging.gmail_etl_daily ******
[{"name":"Message","type":"STRING"},{"name":"Sending_time","type":"STRING"},{"name":"Sender","type":"STRING"},{"name":"Status","type":"STRING"},{"name":"Price","type":"STRING"},{"name":"Sent","type":"INTEGER"},{"name":"Viewed","type":"INTEGER"},{"name":"Purchased","type":"INTEGER"},{"name":"Earnings","type":"FLOAT"},{"name":"Withdrawn_by","type":"STRING"},{"name":"sending_ts","type":"TIMESTAMP"},{"name":"sending_date","type":"DATE"},{"name":"message_id","type":"STRING"},{"name":"source_file","type":"STRING"}]

****** Table: staging.gmail_etl_daily_legacy_20250911 ******
[{"name":"Message","type":"STRING"},{"name":"Sending_time","type":"STRING"},{"name":"Sender","type":"STRING"},{"name":"Status","type":"STRING"},{"name":"Price","type":"STRING"},{"name":"Sent","type":"INTEGER"},{"name":"Viewed","type":"INTEGER"},{"name":"Purchased","type":"INTEGER"},{"name":"Earnings","type":"FLOAT"},{"name":"Withdrawn_by","type":"STRING"},{"name":"sending_ts","type":"TIMESTAMP"},{"name":"sending_date","type":"DATE"},{"name":"message_id","type":"STRING"},{"name":"source_file","type":"STRING"}]

****** Table: staging.historical_message_staging ******
[{"name":"message_text","type":"STRING"},{"name":"username_raw","type":"STRING"},{"name":"sending_time","type":"STRING"},{"name":"price_usd_raw","type":"STRING"},{"name":"earnings_usd","type":"NUMERIC"},{"name":"sent","type":"INTEGER"},{"name":"viewed","type":"INTEGER"},{"name":"purchased","type":"INTEGER"},{"name":"view_ratio","type":"FLOAT"},{"name":"sent_buy_ratio","type":"FLOAT"},{"name":"viewed_buy_ratio","type":"FLOAT"},{"name":"message_type","type":"STRING"},{"name":"loaded_at","type":"TIMESTAMP"},{"name":"sending_ts","type":"TIMESTAMP"},{"name":"sending_date","type":"DATE"}]

------------------ VIEWS ------------------
****** View: staging.creator_stats_latest ******
Table of-scheduler-proj:staging.creator_stats_latest

                                                      Query                                                       
 ---------------------------------------------------------------------------------------------------------------- 
  WITH raw_in AS (                                                                                                
    SELECT                                                                                                        
      LOWER(Creator) AS creator_raw,                                                                              
                                                                                                                  
      -- end of the range like "2025-08-26 - 2025-09-01"                                                          
      COALESCE(                                                                                                   
        SAFE.PARSE_DATE('%Y-%m-%d', SPLIT(CAST(`Date_Time America_New_York` AS STRING), ' - ')[SAFE_OFFSET(1)]),  
        SAFE.PARSE_DATE('%m/%d/%Y', SPLIT(CAST(`Date_Time America_New_York` AS STRING), ' - ')[SAFE_OFFSET(1)]),  
        SAFE.PARSE_DATE('%Y/%m/%d', SPLIT(CAST(`Date_Time America_New_York` AS STRING), ' - ')[SAFE_OFFSET(1)])   
      ) AS end_date,                                                                                              
                                                                                                                  
      SAFE_CAST(`Active fans`            AS INT64)   AS active_fans,                                              
      SAFE_CAST(`New fans`               AS INT64)   AS new_fans,                                                 
      SAFE_CAST(`Total earnings Net`     AS NUMERIC) AS earnings_net,                                             
      SAFE_CAST(REPLACE(`Renew on %`,'%','') AS NUMERIC) / 100.0 AS renew_on_pct,                                 
      SAFE_CAST(REPLACE(`OF ranking`,'#','')  AS INT64)          AS of_rank,                                      
                                                                                                                  
      -- derived ratio from the sheet columns                                                                     
      SAFE_DIVIDE(                                                                                                
        SAFE_CAST(`Message Net`          AS NUMERIC),                                                             
        NULLIF(SAFE_CAST(`Total earnings Net` AS NUMERIC), 0)                                                     
      ) AS msg_rev_ratio                                                                                          
    FROM `of-scheduler-proj.staging.creator_stats_upload`                                                         
    WHERE `Date_Time America_New_York` IS NOT NULL                                                                
  ),                                                                                                              
  norm AS (                                                                                                       
    SELECT                                                                                                        
      `of-scheduler-proj.util.norm_username`(creator_raw) AS username_norm,                                       
      end_date,                                                                                                   
      active_fans,                                                                                                
      GREATEST(IFNULL(new_fans,0), 0) AS new_fans,   -- clamp negatives to 0                                      
      earnings_net,                                                                                               
      renew_on_pct,                                                                                               
      of_rank,                                                                                                    
      msg_rev_ratio                                                                                               
    FROM raw_in                                                                                                   
    WHERE end_date IS NOT NULL                                                                                    
  ),                                                                                                              
  mapped AS (                                                                                                     
    SELECT                                                                                                        
      COALESCE(ud.username_std, n.username_norm) AS username_std,                                                 
      n.end_date,                                                                                                 
      n.active_fans,                                                                                              
      n.new_fans,                                                                                                 
      n.earnings_net,                                                                                             
      n.renew_on_pct,                                                                                             
      n.of_rank,                                                                                                  
      n.msg_rev_ratio                                                                                             
    FROM norm n                                                                                                   
    LEFT JOIN `of-scheduler-proj.core.username_dim` ud                                                            
      ON ud.username_raw = n.username_norm                                                                        
  ),                                                                                                              
  latest AS (                                                                                                     
    SELECT                                                                                                        
      username_std,                                                                                               
      end_date, active_fans, new_fans, earnings_net, renew_on_pct, of_rank, msg_rev_ratio,                        
      ROW_NUMBER() OVER (PARTITION BY username_std ORDER BY end_date DESC) AS rn                                  
    FROM mapped                                                                                                   
  )                                                                                                               
  SELECT                                                                                                          
    username_std, end_date, active_fans, new_fans, earnings_net, renew_on_pct, of_rank, msg_rev_ratio             
  FROM latest                                                                                                     
  WHERE rn = 1                                                                                                    


****** View: staging.creator_stats_norm ******
Table of-scheduler-proj:staging.creator_stats_norm

                                  Query                                   
 ------------------------------------------------------------------------ 
  WITH base AS (                                                          
    SELECT                                                                
      `of-scheduler-proj.util.norm_username`(Creator) AS username_key,    
      CAST(`Date_Time America_New_York` AS STRING) AS dr                  
    FROM `of-scheduler-proj.staging.creator_stats_upload`                 
  ),                                                                      
  rng AS (                                                                
    SELECT                                                                
      b.username_key,                                                     
      COALESCE(                                                           
        SAFE.PARSE_DATE('%Y-%m-%d', SPLIT(b.dr, ' - ')[OFFSET(0)]),       
        SAFE.PARSE_DATE('%m/%d/%Y', SPLIT(b.dr, ' to ')[OFFSET(0)])       
      ) AS start_date,                                                    
      COALESCE(                                                           
        SAFE.PARSE_DATE('%Y-%m-%d', SPLIT(b.dr, ' - ')[SAFE_OFFSET(1)]),  
        SAFE.PARSE_DATE('%m/%d/%Y', SPLIT(b.dr, ' to ')[SAFE_OFFSET(1)])  
      ) AS end_date                                                       
    FROM base b                                                           
  )                                                                       
  SELECT                                                                  
    COALESCE(ud.username_std, rng.username_key) AS username_std,          
    start_date,                                                           
    end_date                                                              
  FROM rng                                                                
  LEFT JOIN `of-scheduler-proj.core.username_dim` ud                      
    ON ud.username_raw = rng.username_key                                 
  WHERE start_date IS NOT NULL OR end_date IS NOT NULL                    


****** View: staging.gmail_etl_normalized ******
Table of-scheduler-proj:staging.gmail_etl_normalized

                                  Query                                  
 ----------------------------------------------------------------------- 
  SELECT *                                                               
  FROM `of-scheduler-proj.layer_02_staging.fn_gmail_events_normalized`(  
    DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY),                           
    CURRENT_DATE()                                                       
  )                                                                      


****** View: staging.v_username_mapping ******
Table of-scheduler-proj:staging.v_username_mapping

                                            Query                                            
 ------------------------------------------------------------------------------------------- 
  SELECT                                                                                     
    historical_name,                                                                         
    current_name,                                                                            
    'exact_match' as match_type                                                              
  FROM UNNEST([                                                                              
    -- Direct matches                                                                        
    STRUCT('itskassielee' as historical_name, 'itskassielee' as current_name),               
    STRUCT('tessatan' as historical_name, 'tessatan' as current_name),                       
    STRUCT('oliviahansley' as historical_name, 'olivia hansley' as current_name),            
    STRUCT('olivia.hansleyyy' as historical_name, 'olivia hansley' as current_name),         
    STRUCT('misslexa' as historical_name, 'miss lexa' as current_name),                      
    STRUCT('corvettemykala' as historical_name, 'corvettemykala' as current_name),           
    STRUCT('chloewildd' as historical_name, 'chloe wildd' as current_name),                  
    STRUCT('sweet.grace' as historical_name, 'grace bennett' as current_name),               
    STRUCT('sweetgracee' as historical_name, 'grace bennett' as current_name),               
    STRUCT('miafosterxx' as historical_name, 'mia foster' as current_name),                  
    STRUCT('miaharperrrrrr' as historical_name, 'mia harper' as current_name),               
    STRUCT('alex.loveee' as historical_name, 'alex love' as current_name),                   
    STRUCT('bellajadeee' as historical_name, 'bella jade' as current_name),                  
    STRUCT('delsbigworld' as historical_name, 'del' as current_name),                        
    STRUCT('adriannarodriguezxo' as historical_name, 'adrianna rodriguez' as current_name),  
    STRUCT('aprilmayxxx' as historical_name, 'april may' as current_name),                   
    STRUCT('calilov3r' as historical_name, 'cali love' as current_name),                     
    STRUCT('carmenxrosse' as historical_name, 'carmen rose' as current_name),                
    STRUCT('scarlettgraceee' as historical_name, 'scarlett grace' as current_name),          
    STRUCT('scarlettmartinn' as historical_name, 'scarlette rose' as current_name),          
    STRUCT('sophiaroseexx' as historical_name, 'sophia grace' as current_name),              
    STRUCT('stellaraeeee' as historical_name, 'stella corbet' as current_name),              
    STRUCT('thestormii' as historical_name, 'stormii' as current_name),                      
    STRUCT('tittytalia' as historical_name, 'titty talia' as current_name),                  
    STRUCT('tori.rae' as historical_name, 'tori rae' as current_name),                       
    STRUCT('jadewilkinsonn' as historical_name, 'jade wilkinson' as current_name),           
    STRUCT('kayclaireee' as historical_name, 'kay claire' as current_name),                  
    STRUCT('kellymedonly' as historical_name, 'kelly love' as current_name),                 
    STRUCT('madisynmaee' as historical_name, 'madison summers' as current_name),             
    STRUCT('neenahbrownn' as historical_name, 'neenah' as current_name),                     
    STRUCT('poutyselena' as historical_name, 'selena' as current_name),                      
    STRUCT('realselenarae' as historical_name, 'selena' as current_name),                    
    STRUCT('winterskyeee' as historical_name, 'skye' as current_name),                       
    STRUCT('itslolariv' as historical_name, 'lola rivers' as current_name),                  
    STRUCT('itsjustclaire' as historical_name, 'caroline mae' as current_name),              
    STRUCT('clairethompson' as historical_name, 'caroline mae' as current_name)              
  ]) as mapping                                                                              


------------------ ROUTINES ------------------
Listing routines (definitions not extracted):

==============================================================
DATASET: util
==============================================================

------------------ TABLES ------------------
------------------ VIEWS ------------------
------------------ ROUTINES ------------------
Listing routines (definitions not extracted):
           Id             Routine Type     Language    Creation Time    Last Modified Time   Is Remote  
 ---------------------- ----------------- ---------- ----------------- -------------------- ----------- 
  canonicalize_caption   SCALAR_FUNCTION   SQL        09 Sep 01:29:08   09 Sep 01:29:08      No         
  caption_hash_v2        SCALAR_FUNCTION   SQL        09 Sep 01:24:23   09 Sep 01:24:23      No         
  clean_html             SCALAR_FUNCTION   SQL        02 Sep 13:39:13   02 Sep 13:39:13      No         
  compute_theme_tags     SCALAR_FUNCTION   SQL        09 Sep 01:24:28   09 Sep 01:24:28      No         
  det_jitter             SCALAR_FUNCTION   SQL        07 Sep 00:16:59   07 Sep 00:16:59      No         
  detect_explicitness    SCALAR_FUNCTION   SQL        09 Sep 01:24:28   09 Sep 01:24:28      No         
  emoji_bin              SCALAR_FUNCTION   SQL        09 Sep 01:29:10   09 Sep 01:29:10      No         
  emoji_count            SCALAR_FUNCTION   SQL        09 Sep 01:29:09   09 Sep 01:29:09      No         
  ends_with_question     SCALAR_FUNCTION   SQL        09 Sep 01:24:27   09 Sep 01:24:27      No         
  file_username          SCALAR_FUNCTION   SQL        07 Sep 08:44:58   07 Sep 08:44:58      No         
  get_page_type          SCALAR_FUNCTION   SQL        04 Sep 22:03:34   04 Sep 22:03:34      No         
  halflife_weight        SCALAR_FUNCTION   SQL        06 Sep 13:27:03   06 Sep 13:27:03      No         
  has_cta                SCALAR_FUNCTION   SQL        09 Sep 01:24:26   09 Sep 01:24:26      No         
  has_urgency            SCALAR_FUNCTION   SQL        09 Sep 01:24:26   09 Sep 01:24:26      No         
  length_bin             SCALAR_FUNCTION   SQL        09 Sep 01:24:24   09 Sep 01:24:24      No         
  msg_row_key            SCALAR_FUNCTION   SQL        02 Sep 13:56:54   02 Sep 13:56:54      No         
  norm_username          SCALAR_FUNCTION   SQL        09 Sep 21:52:38   09 Sep 21:52:38      No         
  parse_date_et          SCALAR_FUNCTION   SQL        02 Sep 17:26:40   02 Sep 17:26:40      No         
  parse_price            SCALAR_FUNCTION   SQL        02 Sep 14:07:25   02 Sep 14:07:25      No         
  parse_ts               SCALAR_FUNCTION   SQL        02 Sep 13:46:50   02 Sep 13:46:50      No         
  stable_hash            SCALAR_FUNCTION   SQL        09 Sep 16:45:53   09 Sep 16:45:53      No         
  strip_html             SCALAR_FUNCTION   SQL        09 Sep 16:45:44   09 Sep 16:45:44      No         
  strip_page_type        SCALAR_FUNCTION   SQL        04 Sep 22:03:34   04 Sep 22:03:34      No         
  word_count             SCALAR_FUNCTION   SQL        06 Sep 13:27:04   06 Sep 13:27:04      No         

