[
  {
    "id": "fn_beta_sample",
    "type": "SCALAR_FUNCTION",
    "language": "SQL",
    "created": "2025-09-12 12:45:58",
    "modified": "2025-09-12 12:45:58",
    "arguments": [
      {
        "name": "alpha",
        "dataType": {
          "typeKind": "FLOAT64"
        }
      },
      {
        "name": "beta",
        "dataType": {
          "typeKind": "FLOAT64"
        }
      },
      {
        "name": "seed",
        "dataType": {
          "typeKind": "STRING"
        }
      }
    ],
    "return_type": {
      "typeKind": "FLOAT64"
    },
    "definition": "-- Deterministic fallback (no true Thompson in PR-1)\n  alpha / (alpha + beta) + 0.01 * `of-scheduler-proj.layer_05_ml.fn_hash_uniform`(seed)"
  },
  {
    "id": "fn_cooldown_end",
    "type": "SCALAR_FUNCTION",
    "language": "SQL",
    "created": "2025-09-12 11:51:11",
    "modified": "2025-09-12 11:51:11",
    "arguments": [
      {
        "name": "last_sent_ts",
        "dataType": {
          "typeKind": "TIMESTAMP"
        }
      },
      {
        "name": "uses_today",
        "dataType": {
          "typeKind": "INT64"
        }
      },
      {
        "name": "base_hours",
        "dataType": {
          "typeKind": "FLOAT64"
        }
      }
    ],
    "return_type": {
      "typeKind": "TIMESTAMP"
    },
    "definition": "TIMESTAMP_ADD(last_sent_ts, INTERVAL CAST(base_hours * POW(1.5, uses_today) * 3600 AS INT64) SECOND)"
  },
  {
    "id": "fn_hash_uniform",
    "type": "SCALAR_FUNCTION",
    "language": "SQL",
    "created": "2025-09-12 12:45:57",
    "modified": "2025-09-12 12:45:57",
    "arguments": [
      {
        "name": "s",
        "dataType": {
          "typeKind": "STRING"
        }
      }
    ],
    "return_type": {
      "typeKind": "FLOAT64"
    },
    "definition": "LEAST(ABS(FARM_FINGERPRINT(s)) / 9223372036854775807.0, 1.0 - 1e-12)"
  },
  {
    "id": "fn_ucb_bonus",
    "type": "SCALAR_FUNCTION",
    "language": "SQL",
    "created": "2025-09-12 11:51:11",
    "modified": "2025-09-12 11:51:11",
    "arguments": [
      {
        "name": "total_trials",
        "dataType": {
          "typeKind": "INT64"
        }
      },
      {
        "name": "item_trials",
        "dataType": {
          "typeKind": "INT64"
        }
      },
      {
        "name": "c",
        "dataType": {
          "typeKind": "FLOAT64"
        }
      }
    ],
    "return_type": {
      "typeKind": "FLOAT64"
    },
    "definition": "c * SQRT(SAFE.LN(GREATEST(total_trials, 1)) * 2.0 / GREATEST(item_trials, 1))"
  },
  {
    "id": "tvf_rank_captions",
    "type": "TABLE_VALUED_FUNCTION",
    "language": "SQL",
    "created": "2025-09-12 13:01:35",
    "modified": "2025-09-12 13:01:35",
    "arguments": [
      {
        "name": "page_key",
        "dataType": {
          "typeKind": "STRING"
        }
      },
      {
        "name": "now_ts",
        "dataType": {
          "typeKind": "TIMESTAMP"
        }
      },
      {
        "name": "k",
        "dataType": {
          "typeKind": "INT64"
        }
      },
      {
        "name": "mode",
        "dataType": {
          "typeKind": "STRING"
        }
      },
      {
        "name": "p_opts",
        "dataType": {
          "typeKind": "STRUCT",
          "structType": {
            "fields": [
              {
                "name": "min_date",
                "type": {
                  "typeKind": "DATE"
                }
              },
              {
                "name": "seed_scope",
                "type": {
                  "typeKind": "STRING"
                }
              }
            ]
          }
        }
      }
    ],
    "return_type": null,
    "definition": "WITH config AS (\n    SELECT\n      ff.is_enabled AS enable_thompson,\n      COALESCE(p_opts.min_date, DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)) AS min_date,\n      COALESCE(p_opts.seed_scope, CONCAT(page_key, ':', FORMAT_TIMESTAMP('%Y-%m-%dT%H', now_ts))) AS seed_scope\n    FROM `of-scheduler-proj.ops_config.feature_flags` ff\n    WHERE ff.flag_name = 'enable_thompson_true'\n  ),\n  base AS (\n    SELECT\n      r.page_key,\n      r.caption_id,\n      r.performance_features.rps_smoothed AS baseline_mean,\n      r.performance_features.sends_30d AS trials,\n      r.performance_features.revenue_30d AS successes,\n      r.temporal_features.last_used_timestamp,\n      r.temporal_features.hours_since_use,\n      r.cooldown_features.is_eligible,\n      r.alpha,\n      r.beta,\n      r.epsilon,\n      r.ucb_c,\n      r.base_cooldown_hours,\n      r.use_true_thompson,\n      r.uses_today,\n      c.enable_thompson,\n      c.seed_scope\n    FROM `of-scheduler-proj.layer_05_ml.v_rank_ready` r\n    CROSS JOIN config c\n    WHERE r.page_key = page_key\n      AND r.computed_date >= c.min_date\n      AND r.cooldown_features.is_eligible = TRUE\n  ),\n  scored AS (\n    SELECT\n      page_key,\n      caption_id,\n      baseline_mean,\n      trials,\n      CASE mode\n        WHEN 'ucb' THEN \n          baseline_mean + `of-scheduler-proj.layer_05_ml.fn_ucb_bonus`(\n            SUM(trials) OVER (), trials, ucb_c\n          )\n        WHEN 'epsilon_greedy' THEN\n          CASE \n            WHEN `of-scheduler-proj.layer_05_ml.fn_hash_uniform`(\n              CONCAT(seed_scope, ':', caption_id)\n            ) < epsilon THEN\n              `of-scheduler-proj.layer_05_ml.fn_hash_uniform`(\n                CONCAT(seed_scope, ':', caption_id, ':explore')\n              )\n            ELSE baseline_mean\n          END\n        WHEN 'thompson' THEN\n          `of-scheduler-proj.layer_05_ml.fn_beta_sample`(\n            alpha + successes,\n            beta + trials - successes,\n            CONCAT(seed_scope, ':', caption_id)\n            -- REMOVED THE 4TH BOOLEAN ARGUMENT\n          )\n        ELSE baseline_mean\n      END AS final_score,\n      `of-scheduler-proj.layer_05_ml.fn_ucb_bonus`(\n        SUM(trials) OVER (), trials, ucb_c\n      ) AS ucb_bonus,\n      0.0 AS cooldown_penalty,\n      0.0 AS novelty,\n      mode AS mode_used\n    FROM base\n  ),\n  ranked AS (\n    SELECT\n      page_key,\n      caption_id,\n      final_score,\n      STRUCT(\n        baseline_mean,\n        ucb_bonus,\n        cooldown_penalty,\n        novelty,\n        mode_used,\n        ARRAY<STRING>[] AS reason_codes\n      ) AS score_card,\n      ROW_NUMBER() OVER (ORDER BY final_score DESC, caption_id) AS rn\n    FROM scored\n  )\n  SELECT\n    page_key,\n    caption_id,\n    final_score,\n    score_card\n  FROM ranked\n  WHERE rn <= k"
  }
]
