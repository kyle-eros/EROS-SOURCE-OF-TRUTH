[
  {
    "id": "v_caption_dim",
    "type": "VIEW",
    "description": "Refactored caption dimension view pointing to the new centralized caption dimension table.",
    "created": "2025-09-13 01:45:30",
    "modified": "2025-09-13 01:45:30",
    "query": "SELECT caption_id, caption_hash, caption_text, caption_category AS caption_type, CASE WHEN explicitness_level = 1 THEN 'mild' WHEN explicitness_level = 2 THEN 'moderate' WHEN explicitness_level = 3 THEN 'explicit' ELSE 'pending_review' END AS explicitness, content_tags AS theme_tags, creator_username AS username_std FROM `of-scheduler-proj.layer_03_foundation.dim_caption` WHERE is_active = TRUE",
    "schema": [
      {
        "name": "caption_id",
        "type": "STRING"
      },
      {
        "name": "caption_hash",
        "type": "STRING"
      },
      {
        "name": "caption_text",
        "type": "STRING"
      },
      {
        "name": "caption_type",
        "type": "STRING"
      },
      {
        "name": "explicitness",
        "type": "STRING"
      },
      {
        "name": "theme_tags",
        "type": "STRING",
        "mode": "REPEATED"
      },
      {
        "name": "username_std",
        "type": "STRING"
      }
    ]
  },
  {
    "id": "v_creator_active_current",
    "type": "VIEW",
    "description": "Refactored view to identify currently active creators based on recent activity in the creator dimension.",
    "created": "2025-09-13 01:47:13",
    "modified": "2025-09-13 01:47:13",
    "query": "SELECT username AS username_std, scheduler_info.scheduler_email AS assigned_scheduler, performance_metrics.performance_segment AS tier, TRUE AS is_active FROM `of-scheduler-proj.layer_03_foundation.dim_creator` WHERE is_current_record = TRUE AND account_status = 'active' AND last_active_date >= DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 21 DAY)",
    "schema": [
      {
        "name": "username_std",
        "type": "STRING"
      },
      {
        "name": "assigned_scheduler",
        "type": "STRING"
      },
      {
        "name": "tier",
        "type": "STRING"
      },
      {
        "name": "is_active",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "id": "v_creator_tier_assignment",
    "type": "VIEW",
    "description": "Calculates 'Intensity Score' and assigns a performance tier using stable, persisted thresholds from ops_config, with a dynamic fallback.",
    "created": "2025-09-13 01:23:35",
    "modified": "2025-09-13 01:23:35",
    "query": "WITH base_health AS (SELECT page_id AS creator_key, LOG10(1 + active_fans_7d) AS log_active_fans, message_net_7d, avg_earn_per_fan_7d, avg_spend_per_txn_7d, total_earnings_7d, renew_on_rate_7d, -expired_change_7d AS neg_expired_change_7d FROM `of-scheduler-proj.layer_04_semantic.v_page_health_7d`), z_scores AS (SELECT creator_key, (log_active_fans - AVG(log_active_fans) OVER()) / NULLIF(STDDEV_SAMP(log_active_fans) OVER(), 0) AS z_active, (message_net_7d - AVG(message_net_7d) OVER()) / NULLIF(STDDEV_SAMP(message_net_7d) OVER(), 0) AS z_msgnet, (avg_earn_per_fan_7d - AVG(avg_earn_per_fan_7d) OVER()) / NULLIF(STDDEV_SAMP(avg_earn_per_fan_7d) OVER(), 0) AS z_apf, (avg_spend_per_txn_7d - AVG(avg_spend_per_txn_7d) OVER()) / NULLIF(STDDEV_SAMP(avg_spend_per_txn_7d) OVER(), 0) AS z_spend, (total_earnings_7d - AVG(total_earnings_7d) OVER()) / NULLIF(STDDEV_SAMP(total_earnings_7d) OVER(), 0) AS z_total, (renew_on_rate_7d - AVG(renew_on_rate_7d) OVER()) / NULLIF(STDDEV_SAMP(renew_on_rate_7d) OVER(), 0) AS z_renew, (neg_expired_change_7d - AVG(neg_expired_change_7d) OVER()) / NULLIF(STDDEV_SAMP(neg_expired_change_7d) OVER(), 0) AS z_churn FROM base_health), intensity_score AS (SELECT creator_key, (0.30 * COALESCE(z_active, 0) + 0.20 * COALESCE(z_msgnet, 0) + 0.15 * COALESCE(z_apf, 0) + 0.10 * COALESCE(z_spend, 0) + 0.15 * COALESCE(z_total, 0) + 0.05 * COALESCE(z_renew, 0) + 0.05 * COALESCE(z_churn, 0)) AS intensity FROM z_scores), thresholds_config AS (SELECT * FROM `of-scheduler-proj.ops_config.tier_thresholds` WHERE computed_date = (SELECT MAX(computed_date) FROM `of-scheduler-proj.ops_config.tier_thresholds`)), thresholds_dynamic AS ( SELECT CURRENT_DATE('UTC') AS computed_date, COUNT(s.creator_key) AS population_count, APPROX_QUANTILES(s.intensity, 100)[OFFSET(40)] AS q40, APPROX_QUANTILES(s.intensity, 100)[OFFSET(60)] AS q60, APPROX_QUANTILES(s.intensity, 100)[OFFSET(90)] AS q90, APPROX_QUANTILES(h.active_fans_7d, 100)[OFFSET(70)] AS af_p70, APPROX_QUANTILES(h.message_net_7d, 100)[OFFSET(60)] AS msg_p60, APPROX_QUANTILES(h.message_net_7d, 100)[OFFSET(70)] AS msg_p70, APPROX_QUANTILES(h.total_earnings_7d, 100)[OFFSET(70)] AS tot_p70 FROM intensity_score s JOIN `of-scheduler-proj.layer_04_semantic.v_page_health_7d` h ON s.creator_key = h.page_id), thresholds AS ( SELECT * FROM thresholds_config UNION ALL SELECT * FROM thresholds_dynamic WHERE NOT EXISTS (SELECT 1 FROM thresholds_config)) SELECT h.page_id AS creator_key, s.intensity, CASE WHEN h.message_net_7d = 0 AND h.total_earnings_7d = 0 AND h.active_fans_7d < 100 THEN 'LOW' WHEN s.intensity >= t.q90 AND h.active_fans_7d >= t.af_p70 AND (h.message_net_7d >= t.msg_p70 OR h.total_earnings_7d >= t.tot_p70) THEN 'POWER' WHEN s.intensity >= t.q60 AND (h.message_net_7d >= t.msg_p60 OR h.active_fans_7d >= 0.8 * t.af_p70) THEN 'HIGH' WHEN s.intensity >= t.q40 THEN 'MED' ELSE 'LOW' END AS recommended_tier, CURRENT_TIMESTAMP() AS computed_at FROM `of-scheduler-proj.layer_04_semantic.v_page_health_7d` h JOIN intensity_score s ON h.page_id = s.creator_key CROSS JOIN thresholds t",
    "schema": [
      {
        "name": "creator_key",
        "type": "STRING"
      },
      {
        "name": "intensity",
        "type": "FLOAT"
      },
      {
        "name": "recommended_tier",
        "type": "STRING"
      },
      {
        "name": "computed_at",
        "type": "TIMESTAMP"
      }
    ]
  },
  {
    "id": "v_message_facts_by_page",
    "type": "VIEW",
    "description": "All message facts joined with creator page context (default 365d window for partition filter).",
    "created": "2025-09-13 01:59:47",
    "modified": "2025-09-13 01:59:47",
    "query": "SELECT f.*, CONCAT(c.username, '__', COALESCE(c.account_type,'main')) AS username_page FROM `of-scheduler-proj.layer_03_foundation.fact_message_send` f JOIN `of-scheduler-proj.layer_03_foundation.dim_creator` c ON f.creator_key = c.creator_key AND c.is_current_record = TRUE WHERE f.send_date >= DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 365 DAY)",
    "schema": [
      {
        "name": "message_send_key",
        "type": "STRING"
      },
      {
        "name": "caption_key",
        "type": "STRING"
      },
      {
        "name": "creator_key",
        "type": "STRING"
      },
      {
        "name": "send_timestamp",
        "type": "TIMESTAMP"
      },
      {
        "name": "send_date",
        "type": "DATE"
      },
      {
        "name": "time_of_day_utc",
        "type": "INTEGER"
      },
      {
        "name": "day_of_week",
        "type": "INTEGER"
      },
      {
        "name": "week_of_year",
        "type": "INTEGER"
      },
      {
        "name": "month_of_year",
        "type": "INTEGER"
      },
      {
        "name": "messages_sent",
        "type": "INTEGER"
      },
      {
        "name": "messages_viewed",
        "type": "INTEGER"
      },
      {
        "name": "messages_purchased",
        "type": "INTEGER"
      },
      {
        "name": "view_rate",
        "type": "FLOAT"
      },
      {
        "name": "purchase_rate",
        "type": "FLOAT"
      },
      {
        "name": "conversion_rate",
        "type": "FLOAT"
      },
      {
        "name": "price_usd",
        "type": "NUMERIC"
      },
      {
        "name": "gross_revenue_usd",
        "type": "NUMERIC"
      },
      {
        "name": "net_revenue_usd",
        "type": "NUMERIC"
      },
      {
        "name": "revenue_per_send",
        "type": "NUMERIC"
      },
      {
        "name": "revenue_per_purchase",
        "type": "NUMERIC"
      },
      {
        "name": "response_metrics",
        "type": "RECORD",
        "fields": [
          {
            "name": "time_to_first_view_seconds",
            "type": "INTEGER"
          },
          {
            "name": "time_to_first_purchase_seconds",
            "type": "INTEGER"
          },
          {
            "name": "response_category",
            "type": "STRING"
          },
          {
            "name": "bounce_rate",
            "type": "FLOAT"
          }
        ]
      },
      {
        "name": "scheduler_code",
        "type": "STRING"
      },
      {
        "name": "send_type",
        "type": "STRING"
      },
      {
        "name": "campaign_id",
        "type": "INTEGER"
      },
      {
        "name": "quality_flag",
        "type": "STRING"
      },
      {
        "name": "etl_source",
        "type": "STRING"
      },
      {
        "name": "etl_timestamp",
        "type": "TIMESTAMP"
      },
      {
        "name": "username_page",
        "type": "STRING"
      }
    ]
  },
  {
    "id": "v_message_facts_by_page_90d",
    "type": "VIEW",
    "description": "Refactored view to provide message facts from the last 90 days, joined with creator page context.",
    "created": "2025-09-13 01:47:04",
    "modified": "2025-09-13 01:47:04",
    "query": "SELECT f.*, CONCAT(c.username, '__', c.account_type) AS username_page FROM `of-scheduler-proj.layer_03_foundation.fact_message_send` f JOIN `of-scheduler-proj.layer_03_foundation.dim_creator` c ON f.creator_key = c.creator_key AND c.is_current_record = TRUE WHERE f.send_date >= DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 89 DAY)",
    "schema": [
      {
        "name": "message_send_key",
        "type": "STRING"
      },
      {
        "name": "caption_key",
        "type": "STRING"
      },
      {
        "name": "creator_key",
        "type": "STRING"
      },
      {
        "name": "send_timestamp",
        "type": "TIMESTAMP"
      },
      {
        "name": "send_date",
        "type": "DATE"
      },
      {
        "name": "time_of_day_utc",
        "type": "INTEGER"
      },
      {
        "name": "day_of_week",
        "type": "INTEGER"
      },
      {
        "name": "week_of_year",
        "type": "INTEGER"
      },
      {
        "name": "month_of_year",
        "type": "INTEGER"
      },
      {
        "name": "messages_sent",
        "type": "INTEGER"
      },
      {
        "name": "messages_viewed",
        "type": "INTEGER"
      },
      {
        "name": "messages_purchased",
        "type": "INTEGER"
      },
      {
        "name": "view_rate",
        "type": "FLOAT"
      },
      {
        "name": "purchase_rate",
        "type": "FLOAT"
      },
      {
        "name": "conversion_rate",
        "type": "FLOAT"
      },
      {
        "name": "price_usd",
        "type": "NUMERIC"
      },
      {
        "name": "gross_revenue_usd",
        "type": "NUMERIC"
      },
      {
        "name": "net_revenue_usd",
        "type": "NUMERIC"
      },
      {
        "name": "revenue_per_send",
        "type": "NUMERIC"
      },
      {
        "name": "revenue_per_purchase",
        "type": "NUMERIC"
      },
      {
        "name": "response_metrics",
        "type": "RECORD",
        "fields": [
          {
            "name": "time_to_first_view_seconds",
            "type": "INTEGER"
          },
          {
            "name": "time_to_first_purchase_seconds",
            "type": "INTEGER"
          },
          {
            "name": "response_category",
            "type": "STRING"
          },
          {
            "name": "bounce_rate",
            "type": "FLOAT"
          }
        ]
      },
      {
        "name": "scheduler_code",
        "type": "STRING"
      },
      {
        "name": "send_type",
        "type": "STRING"
      },
      {
        "name": "campaign_id",
        "type": "INTEGER"
      },
      {
        "name": "quality_flag",
        "type": "STRING"
      },
      {
        "name": "etl_source",
        "type": "STRING"
      },
      {
        "name": "etl_timestamp",
        "type": "TIMESTAMP"
      },
      {
        "name": "username_page",
        "type": "STRING"
      }
    ]
  },
  {
    "id": "v_message_facts_by_page_alltime",
    "type": "VIEW",
    "description": "",
    "created": "2025-09-13 01:59:24",
    "modified": "2025-09-13 01:59:24",
    "query": "SELECT f.*, CONCAT(c.username, '__', COALESCE(c.account_type,'main')) AS username_page FROM `of-scheduler-proj.layer_03_foundation.fact_message_send` f JOIN `of-scheduler-proj.layer_03_foundation.dim_creator` c ON f.creator_key = c.creator_key AND c.is_current_record = TRUE WHERE f.send_date >= DATE '2000-01-01'",
    "schema": [
      {
        "name": "message_send_key",
        "type": "STRING"
      },
      {
        "name": "caption_key",
        "type": "STRING"
      },
      {
        "name": "creator_key",
        "type": "STRING"
      },
      {
        "name": "send_timestamp",
        "type": "TIMESTAMP"
      },
      {
        "name": "send_date",
        "type": "DATE"
      },
      {
        "name": "time_of_day_utc",
        "type": "INTEGER"
      },
      {
        "name": "day_of_week",
        "type": "INTEGER"
      },
      {
        "name": "week_of_year",
        "type": "INTEGER"
      },
      {
        "name": "month_of_year",
        "type": "INTEGER"
      },
      {
        "name": "messages_sent",
        "type": "INTEGER"
      },
      {
        "name": "messages_viewed",
        "type": "INTEGER"
      },
      {
        "name": "messages_purchased",
        "type": "INTEGER"
      },
      {
        "name": "view_rate",
        "type": "FLOAT"
      },
      {
        "name": "purchase_rate",
        "type": "FLOAT"
      },
      {
        "name": "conversion_rate",
        "type": "FLOAT"
      },
      {
        "name": "price_usd",
        "type": "NUMERIC"
      },
      {
        "name": "gross_revenue_usd",
        "type": "NUMERIC"
      },
      {
        "name": "net_revenue_usd",
        "type": "NUMERIC"
      },
      {
        "name": "revenue_per_send",
        "type": "NUMERIC"
      },
      {
        "name": "revenue_per_purchase",
        "type": "NUMERIC"
      },
      {
        "name": "response_metrics",
        "type": "RECORD",
        "fields": [
          {
            "name": "time_to_first_view_seconds",
            "type": "INTEGER"
          },
          {
            "name": "time_to_first_purchase_seconds",
            "type": "INTEGER"
          },
          {
            "name": "response_category",
            "type": "STRING"
          },
          {
            "name": "bounce_rate",
            "type": "FLOAT"
          }
        ]
      },
      {
        "name": "scheduler_code",
        "type": "STRING"
      },
      {
        "name": "send_type",
        "type": "STRING"
      },
      {
        "name": "campaign_id",
        "type": "INTEGER"
      },
      {
        "name": "quality_flag",
        "type": "STRING"
      },
      {
        "name": "etl_source",
        "type": "STRING"
      },
      {
        "name": "etl_timestamp",
        "type": "TIMESTAMP"
      },
      {
        "name": "username_page",
        "type": "STRING"
      }
    ]
  },
  {
    "id": "v_page_behavior_28d",
    "type": "VIEW",
    "description": "",
    "created": "2025-09-12 12:44:53",
    "modified": "2025-09-12 12:44:53",
    "query": "WITH recent AS (\n  SELECT\n    username_std AS page_key,\n    SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(SUM(messages_sent), 0)) AS rps_28d, -- ratio-of-sums\n    SAFE_DIVIDE(SUM(messages_purchased), NULLIF(SUM(messages_sent), 0)) AS ppv_conversion_rate, -- ratio-of-sums\n    COUNT(DISTINCT event_date) AS active_days\n  FROM `of-scheduler-proj.layer_02_staging.stg_message_events`\n  WHERE event_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 28 DAY) AND CURRENT_DATE('UTC')\n  GROUP BY 1\n),\nprior AS (\n  SELECT\n    username_std AS page_key,\n    SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(SUM(messages_sent), 0)) AS rps_prior_28d\n  FROM `of-scheduler-proj.layer_02_staging.stg_message_events`\n  WHERE event_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 56 DAY)\n                      AND DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 29 DAY)\n  GROUP BY 1\n),\nnight_activity AS (\n  SELECT\n    username_std AS page_key,\n    SUM(CASE WHEN hour_utc BETWEEN 20 AND 23 OR hour_utc BETWEEN 0 AND 2\n             THEN CAST(revenue_usd AS FLOAT64) ELSE 0 END) AS night_revenue,\n    SUM(CAST(revenue_usd AS FLOAT64)) AS total_revenue\n  FROM `of-scheduler-proj.layer_02_staging.stg_message_events`\n  WHERE event_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 28 DAY) AND CURRENT_DATE('UTC')\n  GROUP BY 1\n)\nSELECT\n  r.page_key,\n  r.rps_28d,\n  r.ppv_conversion_rate,\n  r.active_days,\n  SAFE_DIVIDE(r.rps_28d - p.rps_prior_28d, NULLIF(p.rps_prior_28d, 0)) AS or_slump_pct,\n  SAFE_DIVIDE(n.night_revenue, NULLIF(n.total_revenue, 0)) > 0.35 AS night_owl_idx,\n  0.0 AS cohort_currency,  -- placeholder\n  0.0 AS refund_rate       -- placeholder\nFROM recent r\nLEFT JOIN prior p USING (page_key)\nLEFT JOIN night_activity n USING (page_key)",
    "schema": [
      {
        "name": "page_key",
        "type": "STRING"
      },
      {
        "name": "rps_28d",
        "type": "FLOAT"
      },
      {
        "name": "ppv_conversion_rate",
        "type": "FLOAT"
      },
      {
        "name": "active_days",
        "type": "INTEGER"
      },
      {
        "name": "or_slump_pct",
        "type": "FLOAT"
      },
      {
        "name": "night_owl_idx",
        "type": "BOOLEAN"
      },
      {
        "name": "cohort_currency",
        "type": "FLOAT"
      },
      {
        "name": "refund_rate",
        "type": "FLOAT"
      }
    ]
  },
  {
    "id": "v_page_dim",
    "type": "VIEW",
    "description": "Refactored page dimension, sourcing all attributes from the new centralized creator dimension.",
    "created": "2025-09-13 01:47:24",
    "modified": "2025-09-13 01:47:24",
    "query": "SELECT c.username AS username_std, COALESCE(ovr.assigned_scheduler, c.scheduler_info.scheduler_email, 'unassigned') AS assigned_scheduler, COALESCE(t.recommended_tier, c.performance_metrics.performance_segment) AS tier, 'UTC' AS tz, NULL AS min_hod, NULL AS max_hod, TRUE AS is_active FROM `of-scheduler-proj.layer_04_semantic.v_creator_active_current` a JOIN `of-scheduler-proj.layer_03_foundation.dim_creator` c ON a.username_std = c.username AND c.is_current_record = TRUE LEFT JOIN `of-scheduler-proj.ops_config.v_scheduler_overrides` ovr ON a.username_std = ovr.username_std LEFT JOIN `of-scheduler-proj.layer_04_semantic.v_creator_tier_assignment` t ON c.creator_key = t.creator_key",
    "schema": [
      {
        "name": "username_std",
        "type": "STRING"
      },
      {
        "name": "assigned_scheduler",
        "type": "STRING"
      },
      {
        "name": "tier",
        "type": "STRING"
      },
      {
        "name": "tz",
        "type": "STRING"
      },
      {
        "name": "min_hod",
        "type": "INTEGER"
      },
      {
        "name": "max_hod",
        "type": "INTEGER"
      },
      {
        "name": "is_active",
        "type": "BOOLEAN"
      }
    ]
  },
  {
    "id": "v_page_dow_hod_profile_90d",
    "type": "VIEW",
    "description": "",
    "created": "2025-09-12 12:44:52",
    "modified": "2025-09-12 12:44:52",
    "query": "WITH base AS (\n  SELECT\n    username_std AS page_key,\n    EXTRACT(DAYOFWEEK FROM event_date) AS dow_utc,\n    hour_utc,\n    SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(SUM(messages_sent), 0)) AS rps_actual, -- ratio-of-sums\n    COUNT(DISTINCT event_date) AS sample_days\n  FROM `of-scheduler-proj.layer_02_staging.stg_message_events`\n  WHERE event_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 90 DAY) AND CURRENT_DATE('UTC')\n  GROUP BY 1,2,3\n),\navg_rps AS (\n  SELECT page_key, AVG(rps_actual) AS avg_rps_page\n  FROM base\n  GROUP BY 1\n)\nSELECT\n  b.page_key, b.dow_utc, b.hour_utc, b.rps_actual,\n  SAFE_DIVIDE(b.rps_actual, NULLIF(a.avg_rps_page, 0)) AS rps_lift,\n  b.sample_days,\n  RANK() OVER (PARTITION BY b.page_key, b.dow_utc ORDER BY b.rps_actual DESC) AS hour_rank_in_day\nFROM base b\nJOIN avg_rps a USING (page_key)",
    "schema": [
      {
        "name": "page_key",
        "type": "STRING"
      },
      {
        "name": "dow_utc",
        "type": "INTEGER"
      },
      {
        "name": "hour_utc",
        "type": "INTEGER"
      },
      {
        "name": "rps_actual",
        "type": "FLOAT"
      },
      {
        "name": "rps_lift",
        "type": "FLOAT"
      },
      {
        "name": "sample_days",
        "type": "INTEGER"
      },
      {
        "name": "hour_rank_in_day",
        "type": "INTEGER"
      }
    ]
  },
  {
    "id": "v_page_engagement_patterns",
    "type": "VIEW",
    "description": "Refactored view to analyze engagement patterns (conversion, revenue) by time of day and day of week.",
    "created": "2025-09-13 01:47:37",
    "modified": "2025-09-13 01:47:37",
    "query": "WITH hourly AS ( SELECT creator_key, time_of_day_utc AS hour, day_of_week AS dow, AVG(conversion_rate) AS conversion_rate, AVG(price_usd) AS avg_price, AVG(net_revenue_usd) AS avg_earnings, STDDEV(net_revenue_usd) AS earnings_volatility, COUNT(*) AS n_messages, SUM(net_revenue_usd) AS total_earnings FROM `of-scheduler-proj.layer_03_foundation.fact_message_send` WHERE send_date >= DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 89 DAY) GROUP BY 1, 2, 3 HAVING n_messages >= 3 ), aggregated AS ( SELECT creator_key, ARRAY_AGG(STRUCT(hour, dow, conversion_rate, avg_earnings, n_messages) ORDER BY conversion_rate DESC LIMIT 10) AS top_conversion_windows, 1 - SAFE_DIVIDE(SQRT(AVG(POW(earnings_volatility, 2))), NULLIF(AVG(avg_earnings), 0)) AS revenue_consistency, SAFE_DIVIDE(COUNT(DISTINCT CONCAT(hour, '-', dow)), 168.0) AS schedule_coverage, CORR(avg_price, conversion_rate) AS price_elasticity, MAX(conversion_rate) AS peak_conversion_rate, AVG(conversion_rate) AS avg_conversion_rate, MAX(avg_earnings) AS peak_earnings_per_message, SUM(total_earnings) AS total_90d_earnings, SUM(n_messages) AS total_90d_messages FROM hourly GROUP BY 1 ) SELECT c.username AS username_std, a.* EXCEPT (creator_key) FROM aggregated a JOIN `of-scheduler-proj.layer_03_foundation.dim_creator` c ON a.creator_key = c.creator_key AND c.is_current_record = TRUE",
    "schema": [
      {
        "name": "username_std",
        "type": "STRING"
      },
      {
        "name": "top_conversion_windows",
        "type": "RECORD",
        "mode": "REPEATED",
        "fields": [
          {
            "name": "hour",
            "type": "INTEGER"
          },
          {
            "name": "dow",
            "type": "INTEGER"
          },
          {
            "name": "conversion_rate",
            "type": "FLOAT"
          },
          {
            "name": "avg_earnings",
            "type": "NUMERIC"
          },
          {
            "name": "n_messages",
            "type": "INTEGER"
          }
        ]
      },
      {
        "name": "revenue_consistency",
        "type": "FLOAT"
      },
      {
        "name": "schedule_coverage",
        "type": "FLOAT"
      },
      {
        "name": "price_elasticity",
        "type": "FLOAT"
      },
      {
        "name": "peak_conversion_rate",
        "type": "FLOAT"
      },
      {
        "name": "avg_conversion_rate",
        "type": "FLOAT"
      },
      {
        "name": "peak_earnings_per_message",
        "type": "NUMERIC"
      },
      {
        "name": "total_90d_earnings",
        "type": "NUMERIC"
      },
      {
        "name": "total_90d_messages",
        "type": "INTEGER"
      }
    ]
  },
  {
    "id": "v_page_health_7d",
    "type": "VIEW",
    "description": "",
    "created": "2025-09-13 09:39:05",
    "modified": "2025-09-13 09:39:05",
    "query": "WITH current_creator_dim AS ( SELECT creator_key, util.norm_username(username) AS username_std FROM layer_03_foundation.dim_creator WHERE is_current_record = TRUE ), message_metrics_7d AS ( SELECT creator_key, SUM(messages_purchased) AS total_purchases_7d, SUM(CAST(gross_revenue_usd AS NUMERIC)) AS total_earnings_7d, SUM(CAST(net_revenue_usd AS NUMERIC)) AS message_net_7d FROM layer_03_foundation.fact_message_send WHERE send_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 6 DAY) AND CURRENT_DATE('UTC') AND COALESCE(quality_flag,'valid') = 'valid' GROUP BY 1 ) SELECT d.creator_key AS page_id, d.username_std, CAST(NULL AS INT64) AS active_fans_7d, CAST(NULL AS NUMERIC) AS renew_on_rate_7d, CAST(NULL AS INT64) AS expired_change_7d, COALESCE(mm.total_earnings_7d, 0) AS total_earnings_7d, COALESCE(mm.message_net_7d, 0) AS message_net_7d, SAFE_DIVIDE(COALESCE(mm.total_earnings_7d,0), NULLIF(COALESCE(mm.total_purchases_7d,0),0)) AS avg_spend_per_txn_7d, CAST(NULL AS NUMERIC) AS avg_earn_per_fan_7d, CURRENT_TIMESTAMP() AS computed_at FROM current_creator_dim d LEFT JOIN message_metrics_7d mm USING (creator_key)",
    "schema": [
      {
        "name": "page_id",
        "type": "STRING"
      },
      {
        "name": "username_std",
        "type": "STRING"
      },
      {
        "name": "active_fans_7d",
        "type": "INTEGER"
      },
      {
        "name": "renew_on_rate_7d",
        "type": "NUMERIC"
      },
      {
        "name": "expired_change_7d",
        "type": "INTEGER"
      },
      {
        "name": "total_earnings_7d",
        "type": "NUMERIC"
      },
      {
        "name": "message_net_7d",
        "type": "NUMERIC"
      },
      {
        "name": "avg_spend_per_txn_7d",
        "type": "NUMERIC"
      },
      {
        "name": "avg_earn_per_fan_7d",
        "type": "NUMERIC"
      },
      {
        "name": "computed_at",
        "type": "TIMESTAMP"
      }
    ]
  },
  {
    "id": "v_page_intensity_7d",
    "type": "VIEW",
    "description": "",
    "created": "2025-09-12 12:44:54",
    "modified": "2025-09-12 12:44:54",
    "query": "WITH base AS (\n  SELECT\n    username_std AS page_key,\n    SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(SUM(messages_sent), 0)) AS rps_7d, -- ratio-of-sums\n    SUM(CAST(revenue_usd AS FLOAT64)) AS total_earnings_7d,\n    SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(SUM(messages_purchased), 0)) AS avg_spend_per_txn,\n    -- proxies until fan-level exists\n    SAFE_DIVIDE(SUM(CAST(revenue_usd AS FLOAT64)), NULLIF(COUNT(DISTINCT CONCAT(username_std, event_date)), 0)) AS avg_earn_per_fan,\n    COUNT(DISTINCT event_date) AS active_fans,\n    0.7 AS renew_on_pct -- placeholder\n  FROM `of-scheduler-proj.layer_02_staging.stg_message_events`\n  WHERE event_date BETWEEN DATE_SUB(CURRENT_DATE('UTC'), INTERVAL 7 DAY) AND CURRENT_DATE('UTC')\n  GROUP BY 1\n)\nSELECT\n  page_key, rps_7d, total_earnings_7d, avg_spend_per_txn, avg_earn_per_fan, active_fans, renew_on_pct,\n  (0.3 * SAFE.LN(1 + total_earnings_7d)\n   + 0.2 * SAFE.LN(1 + avg_spend_per_txn)\n   + 0.2 * SAFE.LN(1 + avg_earn_per_fan)\n   + 0.2 * renew_on_pct\n   + 0.1 * SAFE.LN(1 + active_fans)) AS intensity_score,\n  CASE\n    WHEN (0.3 * SAFE.LN(1 + total_earnings_7d)\n        + 0.2 * SAFE.LN(1 + avg_spend_per_txn)\n        + 0.2 * SAFE.LN(1 + avg_earn_per_fan)\n        + 0.2 * renew_on_pct\n        + 0.1 * SAFE.LN(1 + active_fans)) > 5.0 THEN 'high'\n    WHEN (0.3 * SAFE.LN(1 + total_earnings_7d)\n        + 0.2 * SAFE.LN(1 + avg_spend_per_txn)\n        + 0.2 * SAFE.LN(1 + avg_earn_per_fan)\n        + 0.2 * renew_on_pct\n        + 0.1 * SAFE.LN(1 + active_fans)) > 3.0 THEN 'medium'\n    ELSE 'low'\n  END AS recommended_tier\nFROM base",
    "schema": [
      {
        "name": "page_key",
        "type": "STRING"
      },
      {
        "name": "rps_7d",
        "type": "FLOAT"
      },
      {
        "name": "total_earnings_7d",
        "type": "FLOAT"
      },
      {
        "name": "avg_spend_per_txn",
        "type": "FLOAT"
      },
      {
        "name": "avg_earn_per_fan",
        "type": "FLOAT"
      },
      {
        "name": "active_fans",
        "type": "INTEGER"
      },
      {
        "name": "renew_on_pct",
        "type": "FLOAT"
      },
      {
        "name": "intensity_score",
        "type": "FLOAT"
      },
      {
        "name": "recommended_tier",
        "type": "STRING"
      }
    ]
  },
  {
    "id": "v_page_paid_status",
    "type": "VIEW",
    "description": "Refactored view to determine if a page is a paid subscription page, using the new creator dimension.",
    "created": "2025-09-13 01:47:47",
    "modified": "2025-09-13 01:47:47",
    "query": "SELECT username AS username_std, CASE WHEN account_type = 'vip' THEN TRUE ELSE FALSE END AS is_paid_sub, last_active_date AS decided_as_of FROM `of-scheduler-proj.layer_03_foundation.dim_creator` WHERE is_current_record = TRUE",
    "schema": [
      {
        "name": "username_std",
        "type": "STRING"
      },
      {
        "name": "is_paid_sub",
        "type": "BOOLEAN"
      },
      {
        "name": "decided_as_of",
        "type": "DATE"
      }
    ]
  },
  {
    "id": "v_page_type_authority",
    "type": "VIEW",
    "description": "Refactored view to determine the authoritative page type (e.g., 'vip', 'main') from the creator dimension.",
    "created": "2025-09-13 01:47:58",
    "modified": "2025-09-13 01:47:58",
    "query": "SELECT username AS username_std, account_type AS page_type, last_active_date AS decided_as_of FROM `of-scheduler-proj.layer_03_foundation.dim_creator` WHERE is_current_record = TRUE",
    "schema": [
      {
        "name": "username_std",
        "type": "STRING"
      },
      {
        "name": "page_type",
        "type": "STRING"
      },
      {
        "name": "decided_as_of",
        "type": "DATE"
      }
    ]
  },
  {
    "id": "v_pages",
    "type": "VIEW",
    "description": "Refactored view to provide the definitive list of creator pages and their types.",
    "created": "2025-09-13 01:48:20",
    "modified": "2025-09-13 01:48:20",
    "query": "SELECT username AS username_std, account_type AS page_type, CONCAT(username, '__', account_type) AS username_page, last_active_date AS decided_as_of FROM `of-scheduler-proj.layer_03_foundation.dim_creator` WHERE is_current_record = TRUE",
    "schema": [
      {
        "name": "username_std",
        "type": "STRING"
      },
      {
        "name": "page_type",
        "type": "STRING"
      },
      {
        "name": "username_page",
        "type": "STRING"
      },
      {
        "name": "decided_as_of",
        "type": "DATE"
      }
    ]
  },
  {
    "id": "v_username_canonical",
    "type": "VIEW",
    "description": "Refactored view to provide the canonical list of standardized usernames from the creator dimension.",
    "created": "2025-09-13 01:48:30",
    "modified": "2025-09-13 01:48:30",
    "query": "SELECT DISTINCT username AS username_std FROM `of-scheduler-proj.layer_03_foundation.dim_creator` WHERE is_current_record = TRUE",
    "schema": [
      {
        "name": "username_std",
        "type": "STRING"
      }
    ]
  }
]
